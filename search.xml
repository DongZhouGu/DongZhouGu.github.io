<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>八，项目性能测试</title>
      <link href="/2022/05/12/yuque/ba-xiang-mu-xing-neng-ce-shi/"/>
      <url>/2022/05/12/yuque/ba-xiang-mu-xing-neng-ce-shi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过前面的章节，我们的 RPC 框架已经搭建完成，虽仍有许多待优化的点，但整体的效率性能应该还是不错的，下面我们来对 XRPC 的性能进行测试</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>我所用的测试机器硬件配置为：</p><ul><li>操作系统：Windows10</li><li>CPU: AMD R5 3500X 6-Core</li><li>内存：16 GB 3200 MHz DDR4</li></ul><h2 id="序列化测试"><a href="#序列化测试" class="headerlink" title="序列化测试"></a>序列化测试</h2><p>序列化针对序列化的大小和速度进行测试</p><h3 id="序列化后的数据大小"><a href="#序列化后的数据大小" class="headerlink" title="序列化后的数据大小"></a>序列化后的数据大小</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializerCompareTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RpcMessage <span class="title">buildMessage</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = RpcResponse.builder()</span><br><span class="line">                .requestId(UUID.randomUUID().toString())</span><br><span class="line">                .message(SUCCESS.getMessage())</span><br><span class="line">                .code(SUCCESS.getCode())</span><br><span class="line">                .data(<span class="keyword">new</span> String(<span class="string">"我是结果，我是结果，我是结果"</span>)).build();</span><br><span class="line"></span><br><span class="line">        RpcMessage rpcMessage = RpcMessage.builder()</span><br><span class="line">                .requestId(<span class="number">1</span>)</span><br><span class="line">                .compress(GZIP.getCode())</span><br><span class="line">                .messageType(REQUEST_TYPE)</span><br><span class="line">                .codec(KRYO.getCode())</span><br><span class="line">                .data(rpcResponse).build();</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kryoSerializeSizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcMessage data = buildMessage();</span><br><span class="line">        KryoSerializer kryoSerializer = <span class="keyword">new</span> KryoSerializer();</span><br><span class="line">        <span class="keyword">byte</span>[] serialize = kryoSerializer.serialize(data);</span><br><span class="line">        System.out.println(<span class="string">"kryo's size is "</span> + serialize.length);</span><br><span class="line">        RpcMessage out = kryoSerializer.deserialize(RpcMessage.class, serialize);</span><br><span class="line">        assertEquals(out, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hessianSerializeSizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcMessage data = buildMessage();</span><br><span class="line">        HessianSerializer hessianSerializer = <span class="keyword">new</span> HessianSerializer();</span><br><span class="line">        <span class="keyword">byte</span>[] serialize = hessianSerializer.serialize(data);</span><br><span class="line">        System.out.println(<span class="string">"hessian's size is "</span> + serialize.length);</span><br><span class="line">        RpcMessage out = hessianSerializer.deserialize(RpcMessage.class, serialize);</span><br><span class="line">        assertEquals(out, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">protostuffSerializeSizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcMessage data = buildMessage();</span><br><span class="line">        ProtostuffSerializer protostuffSerializer = <span class="keyword">new</span> ProtostuffSerializer();</span><br><span class="line">        <span class="keyword">byte</span>[] serialize = protostuffSerializer.serialize(data);</span><br><span class="line">        System.out.println(<span class="string">"protostuff's size is "</span> + serialize.length);</span><br><span class="line">        RpcMessage out = protostuffSerializer.deserialize(RpcMessage.class, serialize);</span><br><span class="line">        assertEquals(out, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        kryoSerializeSizeTest();</span><br><span class="line">        hessianSerializeSizeTest();</span><br><span class="line">        protostuffSerializeSizeTest();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>主要针对实现的三种序列化算法进行了实现，结果如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kryo<span class="string">'s size is 100</span></span><br><span class="line"><span class="string">hessian'</span>s size is <span class="number">274</span></span><br><span class="line">protostuff<span class="string">'s size is 138</span></span><br></pre></td></tr></tbody></table></figure><p>kryo 的序列化后数据体积最小</p><h3 id="序列化性能"><a href="#序列化性能" class="headerlink" title="序列化性能"></a>序列化性能</h3><p>这里使用 JMH 进行测试 <a href="http://openjdk.java.net/projects/code-tools/jmh/">http://openjdk.java.net/projects/code-tools/jmh/</a></p><blockquote><p>JMH 即 Java Microbenchmark Harness，这是专门用于进行代码的微基准测试的一套工具 API。<br>JMH 由 OpenJDK/Oracle 里面那群开发了 Java 编译器的大牛们所开发 。何谓 Micro Benchmark 呢？ 简单地说就是在 method 层面上的 benchmark，精度可以精确到 微秒级。</p></blockquote><p>首先再 pom 中导入依赖</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.35</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;<span class="number">1.35</span>&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><h4 id="JMH-中的注解介绍"><a href="#JMH-中的注解介绍" class="headerlink" title="JMH 中的注解介绍"></a>JMH 中的注解介绍</h4><h4 id="Warmup"><a href="#Warmup" class="headerlink" title="@Warmup"></a>@Warmup</h4><p>@Warmup<strong>(</strong> iterations <strong>=</strong> 5<strong>,</strong> time <strong>=</strong> 1<strong>,</strong> timeUnit <strong>=</strong> TimeUnit<strong>.</strong>SECONDS<strong>)</strong><br>warmup 这个注解，可以用在类或者方法上，进行预热配置。可以看到，它有几个配置参数。</p><ul><li>timeUnit ：时间的单位，默认的单位是秒。</li><li>iterations ：预热阶段的迭代数。</li><li>time ：每次预热的时间。</li><li>batchSize ：批处理大小，指定了每次操作调用几次方法。</li></ul><p>上面的注解，意思是对代码预热总计 5 秒（迭代 5 次，每次一秒） 。预热过程的测试数据，是不记录测量结果的。<strong>为啥要预热呢？</strong><br>因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。所以为了让 benchmark 的结果更加接近真实情况就需要进行预热。</p><h4 id="Measurement"><a href="#Measurement" class="headerlink" title="@Measurement"></a>@Measurement</h4><p>度量，其实就是一些基本的测试参数。</p><ul><li>iterations - 进行测试的轮次</li><li>time - 每轮进行的时长</li><li>timeUnit - 时长单位</li></ul><h4 id="Benchmark"><a href="#Benchmark" class="headerlink" title="@Benchmark"></a>@Benchmark</h4><p>方法级注解，表示该方法是需要进行 benchmark 的对象，用法和 JUnit 的 @Test 类似。</p><h4 id="BenchmarkMode"><a href="#BenchmarkMode" class="headerlink" title="@BenchmarkMode"></a>@BenchmarkMode</h4><p>基准测试类型。这里选择的是 Throughput 也就是吞吐量。根据源码点进去，每种类型后面都有对应的解释，比较好理解，吞吐量会得到单位时间内可以进行的操作数。</p><ul><li>Throughput: 整体吞吐量，例如”1 秒内可以执行多少次调用”。</li><li>AverageTime: 调用的平均时间，例如”每次调用平均耗时 xxx 毫秒”。</li><li>SampleTime: 随机取样，最后输出取样结果的分布，例如”99%的调用在 xxx 毫秒以内，99.99%的调用在 xxx 毫秒以内”</li><li>SingleShotTime: 以上模式都是默认一次 iteration 是 1s，唯有 SingleShotTime 是只运行一次。往往同时把 warmup 次数设为 0，用于测试冷启动时的性能。</li><li>All(“all”, “All benchmark modes”);</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 3, time = 5)</span></span><br><span class="line"><span class="comment">//测量次数,每次测量的持续时间</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 3, time = 10)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.All)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializerCompareTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RpcMessage <span class="title">buildMessage</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = RpcResponse.builder()</span><br><span class="line">                .requestId(UUID.randomUUID().toString())</span><br><span class="line">                .message(SUCCESS.getMessage())</span><br><span class="line">                .code(SUCCESS.getCode())</span><br><span class="line">                .data(<span class="keyword">new</span> String(<span class="string">"我是结果，我是结果，我是结果"</span>)).build();</span><br><span class="line"></span><br><span class="line">        RpcMessage rpcMessage = RpcMessage.builder()</span><br><span class="line">                .requestId(<span class="number">1</span>)</span><br><span class="line">                .compress(GZIP.getCode())</span><br><span class="line">                .messageType(REQUEST_TYPE)</span><br><span class="line">                .codec(KRYO.getCode())</span><br><span class="line">                .data(rpcResponse).build();</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kryoSerializeSizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcMessage data = buildMessage();</span><br><span class="line">        KryoSerializer kryoSerializer = <span class="keyword">new</span> KryoSerializer();</span><br><span class="line">        <span class="keyword">byte</span>[] serialize = kryoSerializer.serialize(data);</span><br><span class="line">        <span class="comment">//System.out.println("kryo's size is " + serialize.length);</span></span><br><span class="line">        RpcMessage out = kryoSerializer.deserialize(RpcMessage.class, serialize);</span><br><span class="line">        assertEquals(out, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hessianSerializeSizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcMessage data = buildMessage();</span><br><span class="line">        HessianSerializer hessianSerializer = <span class="keyword">new</span> HessianSerializer();</span><br><span class="line">        <span class="keyword">byte</span>[] serialize = hessianSerializer.serialize(data);</span><br><span class="line">        <span class="comment">//System.out.println("hessian's size is " + serialize.length);</span></span><br><span class="line">        RpcMessage out = hessianSerializer.deserialize(RpcMessage.class, serialize);</span><br><span class="line">        assertEquals(out, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">protostuffSerializeSizeTest</span><span class="params">()</span> </span>{</span><br><span class="line">        RpcMessage data = buildMessage();</span><br><span class="line">        ProtostuffSerializer protostuffSerializer = <span class="keyword">new</span> ProtostuffSerializer();</span><br><span class="line">        <span class="keyword">byte</span>[] serialize = protostuffSerializer.serialize(data);</span><br><span class="line">        <span class="comment">//System.out.println("protostuff's size is " + serialize.length);</span></span><br><span class="line">        RpcMessage out = protostuffSerializer.deserialize(RpcMessage.class, serialize);</span><br><span class="line">        assertEquals(out, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speedTest</span><span class="params">()</span> <span class="keyword">throws</span> RunnerException </span>{</span><br><span class="line">        Options options = <span class="keyword">new</span> OptionsBuilder().build();</span><br><span class="line">        <span class="keyword">new</span> Runner(options).run();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="性能结果"><a href="#性能结果" class="headerlink" title="性能结果"></a>性能结果</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                                           Mode  Cnt       Score      Error  Units</span><br><span class="line">SerializerCompareTest.hessianSerializeSizeTest     thrpt    <span class="number">5</span>   <span class="number">40262.595</span> ± <span class="number">2023.531</span>  ops/s</span><br><span class="line">SerializerCompareTest.kryoSerializeSizeTest        thrpt    <span class="number">5</span>   <span class="number">18974.527</span> ±  <span class="number">449.052</span>  ops/s</span><br><span class="line">SerializerCompareTest.protostuffSerializeSizeTest  thrpt    <span class="number">5</span>  <span class="number">307698.363</span> ± <span class="number">2169.165</span>  ops/s</span><br></pre></td></tr></tbody></table></figure><p>对比来看，性能上 protostuff&gt;hessian2&gt;kryo, 综合测试的数据来看，似乎 protostuff 作为默认的序列化技术较佳，不过 kryo 的序列化体积确实是最小的。</p><h2 id="框架性能测试"><a href="#框架性能测试" class="headerlink" title="框架性能测试"></a>框架性能测试</h2><p>这里我们使用线程池估算接口的性能</p><ul><li>大量<strong>顺序</strong>请求下，服务的线程数，JVM 内存布局、系统是否正常。</li><li>大量<strong>并发</strong>请求下，服务的线程数，JVM 内存布局、系统是否正常。</li><li><strong>JVM 参数配置</strong>：-Xmx512m -XX:MaxHeapSize=512m -Xmn256m -XX:MaxNewSize=256m</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = RpcClientSpringBootApplication.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeCompareTest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloController helloController;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1000</span>), <span class="keyword">new</span> ThreadFactory() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>{</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(r);</span><br><span class="line">            t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            t.setName(<span class="string">"xrpc-test-netty-work"</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">int</span> epoch = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">10000</span>;</span><br><span class="line">        <span class="keyword">float</span> allTime = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 运行20次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= epoch; ++i) {</span><br><span class="line">            <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(size);</span><br><span class="line">            <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">300</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 每次调用size次</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= size; j++) {</span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                executor.submit(() -&gt; {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        helloController.testSyncBenchMark();</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    } <span class="keyword">finally</span> {</span><br><span class="line">                        semaphore.release();</span><br><span class="line">                        latch.countDown();</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">            log.info(<span class="string">"第"</span> + i + <span class="string">"次运行--&gt;提交任务完成"</span>);</span><br><span class="line">            <span class="comment">// 阻塞等待调用size次任务完成</span></span><br><span class="line">            latch.await();</span><br><span class="line">            <span class="keyword">float</span> epochTime = System.currentTimeMillis() - startTime;</span><br><span class="line">            allTime += epochTime;</span><br><span class="line">            log.info(<span class="string">"第"</span> + i + <span class="string">"次运行--&gt;耗时：[{}] ms"</span>, epochTime);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">10</span>) {</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">float</span> num = (<span class="keyword">float</span>) epoch * size;</span><br><span class="line">        log.info(<span class="string">"平均每次调用--&gt;耗时：[{}] ms"</span>, allTime / num);</span><br><span class="line">        <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>).await();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里我们使用线程池来完成压力测试</p><ul><li>构建一个线程池，线程数模拟并发用户调用</li><li>size 代表连续调用 size 次</li><li>i 为重复次数，以平均时间得到合理压测结果</li><li>同时使用 CountDownLatch 来阻塞主线程以便计算耗时</li><li>使用 Semaphore 来简单限流，限制线程运行数量</li></ul><h3 id="大量顺序请求测试"><a href="#大量顺序请求测试" class="headerlink" title="大量顺序请求测试"></a>大量顺序请求测试</h3><p>如上述代码，我们将线程池中线程设置为 1，连续调用 1w 次,重复 20 次</p><ul><li>serializer: protostuff</li><li>compress: dummy</li></ul><p>调用结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">0</span>次运行--&gt;耗时：[<span class="number">9805.0</span>] ms</span><br><span class="line">第<span class="number">1</span>次运行--&gt;耗时：[<span class="number">6021.0</span>] ms</span><br><span class="line">第<span class="number">2</span>次运行--&gt;耗时：[<span class="number">6032.0</span>] ms</span><br><span class="line">第<span class="number">3</span>次运行--&gt;耗时：[<span class="number">5646.0</span>] ms</span><br><span class="line">第<span class="number">4</span>次运行--&gt;耗时：[<span class="number">5637.0</span>] ms</span><br><span class="line">第<span class="number">5</span>次运行--&gt;耗时：[<span class="number">6673.0</span>] ms</span><br><span class="line">第<span class="number">6</span>次运行--&gt;耗时：[<span class="number">5930.0</span>] ms</span><br><span class="line">第<span class="number">7</span>次运行--&gt;耗时：[<span class="number">6144.0</span>] ms</span><br><span class="line">第<span class="number">8</span>次运行--&gt;耗时：[<span class="number">5814.0</span>] ms</span><br><span class="line">第<span class="number">9</span>次运行--&gt;耗时：[<span class="number">5272.0</span>] ms</span><br><span class="line">第<span class="number">10</span>次运行--&gt;耗时：[<span class="number">5292.0</span>] ms</span><br><span class="line">第<span class="number">11</span>次运行--&gt;耗时：[<span class="number">5401.0</span>] ms</span><br><span class="line">第<span class="number">12</span>次运行--&gt;耗时：[<span class="number">5330.0</span>] ms</span><br><span class="line">第<span class="number">13</span>次运行--&gt;耗时：[<span class="number">5402.0</span>] ms</span><br><span class="line">第<span class="number">14</span>次运行--&gt;耗时：[<span class="number">5350.0</span>] ms</span><br><span class="line">第<span class="number">15</span>次运行--&gt;耗时：[<span class="number">6219.0</span>] ms</span><br><span class="line">第<span class="number">16</span>次运行--&gt;耗时：[<span class="number">5339.0</span>] ms</span><br><span class="line">第<span class="number">17</span>次运行--&gt;耗时：[<span class="number">5427.0</span>] ms</span><br><span class="line">第<span class="number">18</span>次运行--&gt;耗时：[<span class="number">5689.0</span>] ms</span><br><span class="line">第<span class="number">19</span>次运行--&gt;耗时：[<span class="number">6094.0</span>] ms</span><br><span class="line">平均每次调用--&gt;耗时：[<span class="number">0.592585</span>] ms</span><br></pre></td></tr></tbody></table></figure><p>每轮重复调用过程中，单次调用时间稳定在 0.6ms 左右<br>测试过程中使用采 JvisualVM 查看 JVM 内存和线程情况，线程数量正常，线程数量稳定，垃圾回收整场</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651934672550-985d2040-281e-47e8-9168-72923613e75b.png#clientId=ucc345779-629b-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=912&amp;id=uaf549262&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=912&amp;originWidth=1435&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=151748&amp;status=done&amp;style=none&amp;taskId=ub198c525-26e0-4867-8228-8f506417c01&amp;title=&amp;width=1435" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651934692718-cd806545-7f81-4ae1-97c3-8fbd38369716.png#clientId=ucc345779-629b-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=922&amp;id=ude286b31&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=922&amp;originWidth=1445&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=138472&amp;status=done&amp;style=none&amp;taskId=u32a579fb-979a-4b1c-8533-cdb6359122c&amp;title=&amp;width=1445" alt="image.png"></p><h3 id="大量并发请求测试"><a href="#大量并发请求测试" class="headerlink" title="大量并发请求测试"></a>大量并发请求测试</h3><p>如上述代码，我们将线程池中线程设置为 32，连续调用 1w 次,重复 20 次</p><ul><li>serializer: protostuff</li><li>compress: dummy</li></ul><p>调用结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">0</span>次运行--&gt;耗时：[<span class="number">8942.0</span>] ms</span><br><span class="line">第<span class="number">1</span>次运行--&gt;耗时：[<span class="number">2022.0</span>] ms</span><br><span class="line">第<span class="number">2</span>次运行--&gt;耗时：[<span class="number">2182.0</span>] ms</span><br><span class="line">第<span class="number">3</span>次运行--&gt;耗时：[<span class="number">2214.0</span>] ms</span><br><span class="line">第<span class="number">4</span>次运行--&gt;耗时：[<span class="number">1870.0</span>] ms</span><br><span class="line">第<span class="number">5</span>次运行--&gt;耗时：[<span class="number">2050.0</span>] ms</span><br><span class="line">第<span class="number">6</span>次运行--&gt;耗时：[<span class="number">2554.0</span>] ms</span><br><span class="line">第<span class="number">7</span>次运行--&gt;耗时：[<span class="number">1949.0</span>] ms</span><br><span class="line">第<span class="number">8</span>次运行--&gt;耗时：[<span class="number">1866.0</span>] ms</span><br><span class="line">第<span class="number">9</span>次运行--&gt;耗时：[<span class="number">1916.0</span>] ms</span><br><span class="line">第<span class="number">10</span>次运行--&gt;耗时：[<span class="number">1767.0</span>] ms</span><br><span class="line">第<span class="number">11</span>次运行--&gt;耗时：[<span class="number">2205.0</span>] ms</span><br><span class="line">第<span class="number">12</span>次运行--&gt;耗时：[<span class="number">1829.0</span>] ms</span><br><span class="line">第<span class="number">13</span>次运行--&gt;耗时：[<span class="number">1887.0</span>] ms</span><br><span class="line">第<span class="number">14</span>次运行--&gt;耗时：[<span class="number">2062.0</span>] ms</span><br><span class="line">第<span class="number">15</span>次运行--&gt;耗时：[<span class="number">2552.0</span>] ms</span><br><span class="line">第<span class="number">16</span>次运行--&gt;耗时：[<span class="number">2005.0</span>] ms</span><br><span class="line">第<span class="number">17</span>次运行--&gt;耗时：[<span class="number">2034.0</span>] ms</span><br><span class="line">第<span class="number">18</span>次运行--&gt;耗时：[<span class="number">2216.0</span>] ms</span><br><span class="line">第<span class="number">19</span>次运行--&gt;耗时：[<span class="number">1930.0</span>] ms</span><br><span class="line">平均每次调用--&gt;耗时：[<span class="number">0.24026</span>] ms</span><br></pre></td></tr></tbody></table></figure><p>在没有业务逻辑，服务端收到即返回的情况下，吞吐量 (32/0.23 )*1000 =13.9w 左右</p><p>如上述代码，我们将线程池中线程设置为 128，连续调用 1w 次,重复 20 次</p><ul><li>serializer: protostuff</li><li>compress: dummy</li></ul><p>调用结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">0</span>次运行--&gt;耗时：[<span class="number">8796.0</span>] ms</span><br><span class="line">第<span class="number">1</span>次运行--&gt;耗时：[<span class="number">1614.0</span>] ms</span><br><span class="line">第<span class="number">2</span>次运行--&gt;耗时：[<span class="number">1730.0</span>] ms</span><br><span class="line">第<span class="number">3</span>次运行--&gt;耗时：[<span class="number">1752.0</span>] ms</span><br><span class="line">第<span class="number">4</span>次运行--&gt;耗时：[<span class="number">2035.0</span>] ms</span><br><span class="line">第<span class="number">5</span>次运行--&gt;耗时：[<span class="number">3431.0</span>] ms</span><br><span class="line">第<span class="number">6</span>次运行--&gt;耗时：[<span class="number">1993.0</span>] ms</span><br><span class="line">第<span class="number">7</span>次运行--&gt;耗时：[<span class="number">1936.0</span>] ms</span><br><span class="line">第<span class="number">8</span>次运行--&gt;耗时：[<span class="number">2045.0</span>] ms</span><br><span class="line">第<span class="number">9</span>次运行--&gt;耗时：[<span class="number">1888.0</span>] ms</span><br><span class="line">第<span class="number">10</span>次运行--&gt;耗时：[<span class="number">2067.0</span>] ms</span><br><span class="line">第<span class="number">11</span>次运行--&gt;耗时：[<span class="number">2282.0</span>] ms</span><br><span class="line">第<span class="number">12</span>次运行--&gt;耗时：[<span class="number">2699.0</span>] ms</span><br><span class="line">第<span class="number">13</span>次运行--&gt;耗时：[<span class="number">2703.0</span>] ms</span><br><span class="line">第<span class="number">14</span>次运行--&gt;耗时：[<span class="number">2289.0</span>] ms</span><br><span class="line">第<span class="number">15</span>次运行--&gt;耗时：[<span class="number">2572.0</span>] ms</span><br><span class="line">第<span class="number">16</span>次运行--&gt;耗时：[<span class="number">2519.0</span>] ms</span><br><span class="line">第<span class="number">17</span>次运行--&gt;耗时：[<span class="number">2438.0</span>] ms</span><br><span class="line">第<span class="number">18</span>次运行--&gt;耗时：[<span class="number">2681.0</span>] ms</span><br><span class="line">第<span class="number">19</span>次运行--&gt;耗时：[<span class="number">2515.0</span>] ms</span><br><span class="line">平均每次调用--&gt;耗时：[<span class="number">0.259925</span>] ms</span><br></pre></td></tr></tbody></table></figure><p>在没有业务逻辑，服务端收到即返回的情况下，吞吐量 (128/0.26 )*1000 =49.2w 左右</p><p>如上述代码，我们将线程池中线程设置为 256，连续调用 1w 次,重复 20 次</p><ul><li>serializer: protostuff</li><li>compress: dummy</li></ul><p>调用结果：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">0</span>次运行--&gt;耗时：[<span class="number">8915.0</span>] ms</span><br><span class="line">第<span class="number">1</span>次运行--&gt;耗时：[<span class="number">2074.0</span>] ms</span><br><span class="line">第<span class="number">2</span>次运行--&gt;耗时：[<span class="number">2036.0</span>] ms</span><br><span class="line">第<span class="number">3</span>次运行--&gt;耗时：[<span class="number">1861.0</span>] ms</span><br><span class="line">第<span class="number">4</span>次运行--&gt;耗时：[<span class="number">1930.0</span>] ms</span><br><span class="line">第<span class="number">5</span>次运行--&gt;耗时：[<span class="number">1966.0</span>] ms</span><br><span class="line">第<span class="number">6</span>次运行--&gt;耗时：[<span class="number">1939.0</span>] ms</span><br><span class="line">第<span class="number">7</span>次运行--&gt;耗时：[<span class="number">2337.0</span>] ms</span><br><span class="line">第<span class="number">8</span>次运行--&gt;耗时：[<span class="number">3372.0</span>] ms</span><br><span class="line">第<span class="number">9</span>次运行--&gt;耗时：[<span class="number">2432.0</span>] ms</span><br><span class="line">第<span class="number">10</span>次运行--&gt;耗时：[<span class="number">2291.0</span>] ms</span><br><span class="line">第<span class="number">11</span>次运行--&gt;耗时：[<span class="number">2494.0</span>] ms</span><br><span class="line">第<span class="number">12</span>次运行--&gt;耗时：[<span class="number">2455.0</span>] ms</span><br><span class="line">第<span class="number">13</span>次运行--&gt;耗时：[<span class="number">3207.0</span>] ms</span><br><span class="line">第<span class="number">14</span>次运行--&gt;耗时：[<span class="number">2450.0</span>] ms</span><br><span class="line">第<span class="number">15</span>次运行--&gt;耗时：[<span class="number">2345.0</span>] ms</span><br><span class="line">第<span class="number">16</span>次运行--&gt;耗时：[<span class="number">2119.0</span>] ms</span><br><span class="line">第<span class="number">17</span>次运行--&gt;耗时：[<span class="number">2542.0</span>] ms</span><br><span class="line">第<span class="number">18</span>次运行--&gt;耗时：[<span class="number">2788.0</span>] ms</span><br><span class="line">第<span class="number">19</span>次运行--&gt;耗时：[<span class="number">2539.0</span>] ms</span><br><span class="line">平均每次调用--&gt;耗时：[<span class="number">0.27046</span>] ms</span><br></pre></td></tr></tbody></table></figure><p>当并发量达到 256 时，响应时间仍没有大幅增加，只有小幅增加，吞吐量仍在进一步提升。<br>当然，由于客服端和服务端都在本地，通信成本相对较低，有条件可以模拟真实的网络环境进行再测试。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651940776430-89cd3ad4-9184-41df-9068-e860e6421dae.png#clientId=ucc345779-629b-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=977&amp;id=u0e0eb0a5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=977&amp;originWidth=1457&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=134767&amp;status=done&amp;style=none&amp;taskId=u06f15d5f-6d56-4430-8199-839001d9906&amp;title=&amp;width=1457" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、集成Spring与SpringBoot</title>
      <link href="/2022/05/12/yuque/qi-ji-cheng-spring-yu-springboot/"/>
      <url>/2022/05/12/yuque/qi-ji-cheng-spring-yu-springboot/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot 最强大的功能就是把我们常用的场景抽取成了一个个 starter（场景启动器），我们通过引入 springboot 为我提供的这些场景启动器，我们再进行少量的配置就能使用相应的功能。<br>因此对于实现的 XRPC 同样需要制作 starter，并将相关配置和 bean 加载交由 Spring 来管理，最后通过 Maven 发布</p><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><ul><li>首先，SpringBoot 在启动时会去依赖的 starter 包中寻找 resources/META-INF/spring.factories 文件，然后根据文件中配置的 Jar 包去扫描项目所依赖的 Jar 包，这类似于 Java 的 SPI 机制。</li><li>第二步，根据 spring.factories 配置加载 AutoConfigure 类。</li><li>最后，根据 @Conditional 注解的条件，进行自动配置并将 Bean 注入 Spring Context 上下文当中。</li></ul><h2 id="POM-依赖"><a href="#POM-依赖" class="headerlink" title="POM 依赖"></a>POM 依赖</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.5</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">     &lt;!-- SpringBoot --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="XRPC-Client-集成-SpringBoot"><a href="#XRPC-Client-集成-SpringBoot" class="headerlink" title="XRPC-Client 集成 SpringBoot"></a>XRPC-Client 集成 SpringBoot</h2><h3 id="1-提供-RpcConfig"><a href="#1-提供-RpcConfig" class="headerlink" title="1. 提供 RpcConfig"></a>1. 提供 RpcConfig</h3><p>编写配置类，这样就可以在 SpringBoot 的配置中配置 xrpc 的参数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "xrpc")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用rpc 默认启用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enable = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册中心地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String registerAddress = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册中心</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String register = <span class="string">"zookeeper"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务暴露端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer serverPort = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serializer = <span class="string">"kryo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String compress = <span class="string">"gzip"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 负载均衡算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String loadBalance = <span class="string">"random"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容错策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String faultTolerant = <span class="string">"retry"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试次数，只有容错策略是 'retry' 的时候才有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer retryTimes = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务代理类型 reflect：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String proxyType = <span class="string">"cglib"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>###</p><h3 id="2-编写-RpcAutoConfiguration"><a href="#2-编写-RpcAutoConfiguration" class="headerlink" title="2. 编写 RpcAutoConfiguration"></a>2. 编写 RpcAutoConfiguration</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RpcConfig.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "xrpc", name = "enable", havingValue = "true", matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Register register;</span><br><span class="line">    <span class="keyword">private</span> NettyClient nettyClient;</span><br><span class="line">    <span class="keyword">private</span> ProxyFactory proxyFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Register <span class="title">serviceDiscovery</span><span class="params">(<span class="meta">@Autowired</span> RpcConfig rpcConfig)</span> </span>{</span><br><span class="line">        RegisterFactory registerFactory = ExtensionLoader.getExtensionLoader(RegisterFactory.class).getExtension(rpcConfig.getRegister());</span><br><span class="line">        register = registerFactory.getRegister(rpcConfig.getRegisterAddress());</span><br><span class="line">        <span class="keyword">return</span> register;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NettyClient <span class="title">nettyClient</span><span class="params">()</span> </span>{</span><br><span class="line">        nettyClient = <span class="keyword">new</span> NettyClient();</span><br><span class="line">        <span class="keyword">return</span> nettyClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProxyFactory <span class="title">proxyFactory</span><span class="params">(<span class="meta">@Autowired</span> RpcConfig rpcConfig)</span> </span>{</span><br><span class="line">        LoadBalance loadBalance = ExtensionLoader.getExtensionLoader(LoadBalance.class).getExtension(rpcConfig.getLoadBalance());</span><br><span class="line">        FaultTolerantInvoker tolerantInvoker = ExtensionLoader.getExtensionLoader(FaultTolerantInvoker.class).getExtension(rpcConfig.getFaultTolerant());</span><br><span class="line"></span><br><span class="line">        proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">        proxyFactory.setNettyClient(nettyClient)</span><br><span class="line">                .setLoadBalance(loadBalance)</span><br><span class="line">                .setRegister(register)</span><br><span class="line">                .setFaultTolerantInvoker(tolerantInvoker)</span><br><span class="line">                .setRetryTime(rpcConfig.getRetryTimes())</span><br><span class="line">                .setCompress(rpcConfig.getCompress())</span><br><span class="line">                .setSerializer(rpcConfig.getSerializer());</span><br><span class="line">        <span class="keyword">return</span> proxyFactory;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProxyInjectProcessor <span class="title">injectProcessor</span><span class="params">()</span> </span>{</span><br><span class="line">        ProxyInjectProcessor proxyInjectProcessor = <span class="keyword">new</span> ProxyInjectProcessor();</span><br><span class="line">        proxyInjectProcessor.setProxyFactory(proxyFactory);</span><br><span class="line">        <span class="keyword">return</span> proxyInjectProcessor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">        register.stop();</span><br><span class="line">        nettyClient.stop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 SpringBoot 启动进行自动装载时，根据 RpcConfig 中的参数进行 SPI 扩展类的注入，比如负载均衡和容错策略的选择。最后我们需要使用 ProxyFactory 来获得远程服务调用的代理类，但是 ProxyFactory 还依赖了其他类，（可能是更复杂的关联），所以当我们去使用这个类做事情时发现包空指针错误，这是因为我们这个类有可能已经初始化完成，但是引用的其他类不一定初始化完成，所以发生了空指针错误。<br>为了解决这个问题，我们还注入了 ProxyInjectProcessor，这个类中的主要作用就是等待 Spring 装载完成后，将需要远程调用的方法使用动态代理类替换。具体是继承 spring 的 ApplicationListener 监听，并监控 ContextRefreshedEvent 事件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInjectProcessor</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> ProxyFactory proxyFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> </span>{</span><br><span class="line">        <span class="comment">// Spring 启动完毕会受到Event</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(contextRefreshedEvent.getApplicationContext().getParent())) {</span><br><span class="line">            ApplicationContext context = contextRefreshedEvent.getApplicationContext();</span><br><span class="line">            String[] names = context.getBeanDefinitionNames();</span><br><span class="line">            <span class="keyword">for</span> (String name : names) {</span><br><span class="line">                Object bean = context.getBean(name);</span><br><span class="line">                Field[] fields = bean.getClass().getDeclaredFields();</span><br><span class="line">                <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">                    RpcAutowired rpcAutowired = field.getAnnotation(RpcAutowired.class);</span><br><span class="line">                    <span class="keyword">if</span> (rpcAutowired != <span class="keyword">null</span>) {</span><br><span class="line">                        String version = rpcAutowired.version();</span><br><span class="line">                        <span class="keyword">boolean</span> isAsync = rpcAutowired.isAsync();</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">try</span> {</span><br><span class="line">                            field.set(bean, proxyFactory.getProxy(field.getType(), version,isAsync));</span><br><span class="line">                        } <span class="keyword">catch</span> (IllegalAccessException e) {</span><br><span class="line">                            log.error(<span class="string">"field.set error. bean={}, field={}"</span>, bean.getClass(), field.getName(), e);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-编写-spring-factories"><a href="#3-编写-spring-factories" class="headerlink" title="3. 编写 spring.factories"></a>3. 编写 spring.factories</h3><p>最后，编写 spring.factories，让 Springboot 自动装载的时候去加载我们的 AutoConfiuration</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.dzgu.xrpc.client.config.RpcAutoConfiguration</span><br></pre></td></tr></tbody></table></figure><h2 id="XRPC-Server-集成-SpringBoot"><a href="#XRPC-Server-集成-SpringBoot" class="headerlink" title="XRPC-Server 集成 SpringBoot"></a>XRPC-Server 集成 SpringBoot</h2><h3 id="1-提供-RpcConfig-1"><a href="#1-提供-RpcConfig-1" class="headerlink" title="1. 提供 RpcConfig"></a>1. 提供 RpcConfig</h3><p>和上一节一样，略过</p><h3 id="2-编写-RpcAutoConfiguration-1"><a href="#2-编写-RpcAutoConfiguration-1" class="headerlink" title="2. 编写 RpcAutoConfiguration"></a>2. 编写 RpcAutoConfiguration</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RpcConfig.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = "xrpc", name = "enable", havingValue = "true", matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">DisposableBean</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NettyServer nettyServer;</span><br><span class="line">    <span class="keyword">private</span> ServiceRegisterCache serviceRegisterCache;</span><br><span class="line">    <span class="keyword">private</span> Invoker invoker;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceRegisterCache <span class="title">serviceProvider</span><span class="params">()</span> </span>{</span><br><span class="line">        serviceRegisterCache = <span class="keyword">new</span> ServiceRegisterCache();</span><br><span class="line">        <span class="keyword">return</span> serviceRegisterCache;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Invoker <span class="title">invoker</span><span class="params">(<span class="meta">@Autowired</span> RpcConfig rpcConfig)</span> </span>{</span><br><span class="line">        invoker = ExtensionLoader.getExtensionLoader(Invoker.class).getExtension(rpcConfig.getProxyType());</span><br><span class="line">        <span class="keyword">return</span> invoker;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NettyServer <span class="title">nettyServer</span><span class="params">(<span class="meta">@Autowired</span> RpcConfig rpcConfig)</span> </span>{</span><br><span class="line">        RegisterFactory registerFactory = ExtensionLoader.getExtensionLoader(RegisterFactory.class).getExtension(rpcConfig.getRegister());</span><br><span class="line">        Register register = registerFactory.getRegister(rpcConfig.getRegisterAddress());</span><br><span class="line">        String host = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            host = InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        } <span class="keyword">catch</span> (UnknownHostException e) {</span><br><span class="line">            log.error(<span class="string">"occur exception when getHostAddress"</span>, e);</span><br><span class="line">        }</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(host == <span class="keyword">null</span> ? <span class="string">"127.0.0.1"</span> : host, rpcConfig.getServerPort());</span><br><span class="line">        nettyServer = <span class="keyword">new</span> NettyServer();</span><br><span class="line">        nettyServer.setRegister(register);</span><br><span class="line">        nettyServer.setInvoker(invoker);</span><br><span class="line">        nettyServer.setServerAddress(inetSocketAddress);</span><br><span class="line">        <span class="keyword">return</span> nettyServer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInjectProcessor <span class="title">injectProcessor</span><span class="params">()</span> </span>{</span><br><span class="line">        ServiceInjectProcessor serviceInjectProcessor = <span class="keyword">new</span> ServiceInjectProcessor();</span><br><span class="line">        serviceInjectProcessor.setNettyServer(nettyServer);</span><br><span class="line">        serviceInjectProcessor.setServiceRegisterCache(serviceRegisterCache);</span><br><span class="line">        <span class="keyword">return</span> serviceInjectProcessor;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{</span><br><span class="line">        nettyServer.stop();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一样的，我们需要在所有 bean 装载完之后，将服务加载到 ServiceRegisterCache 缓存中，同时将 nettyServer 启动，并根绝缓存一次性注册到注册中心</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceInjectProcessor</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> NettyServer nettyServer;</span><br><span class="line">    <span class="keyword">private</span> ServiceRegisterCache serviceRegisterCache;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent contextRefreshedEvent)</span> </span>{</span><br><span class="line">        <span class="comment">// Spring 启动完毕会受到Event</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(contextRefreshedEvent.getApplicationContext().getParent())) {</span><br><span class="line">            ApplicationContext context = contextRefreshedEvent.getApplicationContext();</span><br><span class="line">            Map&lt;String, Object&gt; serviceBeanMap = context.getBeansWithAnnotation(RpcService.class);</span><br><span class="line">            <span class="keyword">if</span> (serviceBeanMap != <span class="keyword">null</span> &amp;&amp; !serviceBeanMap.isEmpty()) {</span><br><span class="line">                <span class="keyword">for</span> (Object serviceBean : serviceBeanMap.values()) {</span><br><span class="line">                    RpcService rpcService = serviceBean.getClass().getAnnotation(RpcService.class);</span><br><span class="line">                    String interfaceName = rpcService.value().getName();</span><br><span class="line">                    String version = rpcService.version();</span><br><span class="line">                    serviceRegisterCache.addService(interfaceName, version, serviceBean);</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            nettyServer.setServiceRegisterCache(serviceRegisterCache);</span><br><span class="line">            nettyServer.start();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-编写-spring-factories-1"><a href="#3-编写-spring-factories-1" class="headerlink" title="3. 编写 spring.factories"></a>3. 编写 spring.factories</h3><p>最后，编写 spring.factories，让 Springboot 自动装载的时候去加载我们的 AutoConfiuration</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.dzgu.xrpc.server.config.RpcAutoConfiguration</span><br></pre></td></tr></tbody></table></figure><p>##</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XRPC项目(仿Dubbo)-README</title>
      <link href="/2022/05/12/yuque/xrpc-xiang-mu-fang-dubbo-readme/"/>
      <url>/2022/05/12/yuque/xrpc-xiang-mu-fang-dubbo-readme/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="XRPC-实现轻量级-RPC-框架"><a href="#XRPC-实现轻量级-RPC-框架" class="headerlink" title="XRPC-实现轻量级 RPC 框架"></a>XRPC-实现轻量级 RPC 框架</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1164521/1651731678944-90832284-9d25-491f-b9d3-5bbb92e5886a.jpeg#clientId=ua1fc6095-aaa6-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ub613d89f&amp;margin=%5Bobject%20Object%5D&amp;originHeight=672&amp;originWidth=2344&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ub444b73c-24cd-4e21-97bc-372eee6a451&amp;title=" alt=""></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>为了更深入的学习 RPC 的原理与实现过程，从零实现了一个简易的可拓展 RPC 项目。</p><p>技术点包括：网络通信框架 Netty、长连接复用、TCP 粘包 / 拆包、心跳保活、服务注册与发现（Zookeeper、Nacos）、Java 基础（注解、反射、多线程、Future、SPI 、动态代理）、自定义传输协议、多种序列化（ProtoBuf / Kyro / Hessian）、Gzip 压缩、多种负载均衡算法（轮询、随机、一致性哈希）、客户端同步 / 异步调用，集成 SpringBoot 开箱即用</p><p><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/2b50.svg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=18&amp;id=b1fUY&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt="">在学习过程中，我也将重点整理为了博客，如果觉得有用，请点个 star 吧！感谢！！</p><p><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f6a9.svg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=18&amp;id=vvbtb&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt=""> 本人能力有限，如有错误和改进欢迎提交 PR</p></blockquote><h2 id="文章列表："><a href="#文章列表：" class="headerlink" title="** 文章列表：**"></a><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f4da.svg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=18&amp;id=QnR2i&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt="">** 文章列表：**</h2><p><a href="https://dongzhougu.github.io/XRPC/#/./%E9%9B%B6%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%BA%A7RPC%E6%A1%86%E6%9E%B6%EF%BC%9F?id=%E9%9B%B6%E3%80%81%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%BA%A7rpc%E6%A1%86%E6%9E%B6%EF%BC%9F">零、如何实现一个轻量级 RPC 框架？</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E4%B8%80%E3%80%81%E5%A6%82%E4%BD%95%E7%94%A8Netty%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%EF%BC%9F?id=%E4%B8%80%E3%80%81%E5%A6%82%E4%BD%95%E7%94%A8netty%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%EF%BC%9F">一、如何用 Netty 实现高性能网络通信？</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E4%BA%8C%E3%80%81%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E9%AB%98%E6%95%88%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%AE%9E%E7%8E%B0?id=%E4%BA%8C%E3%80%81%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E9%AB%98%E6%95%88%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%AE%9E%E7%8E%B0">二、网络传输高效序列化协议与实现</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E4%B8%89%E3%80%81%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0?id=%E4%B8%89%E3%80%81%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0">三、服务注册与发现</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E5%9B%9B%E3%80%81%E9%87%87%E7%94%A8%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8E%BB%E6%97%A0%E6%84%9F%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1?id=%E5%9B%9B%E3%80%81%E9%87%87%E7%94%A8%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%8E%BB%E6%97%A0%E6%84%9F%E8%B0%83%E7%94%A8%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1">四、采用动态代理去无感调用远程服务</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E4%BA%94%E3%80%81%E4%BD%BF%E7%94%A8SPI%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8F%92%E6%8B%94%E6%89%A9%E5%B1%95%E8%AE%BE%E8%AE%A1?id=%E4%BA%94%E3%80%81%E4%BD%BF%E7%94%A8spi%E5%AE%9E%E7%8E%B0%E5%8F%AF%E6%8F%92%E6%8B%94%E6%89%A9%E5%B1%95%E8%AE%BE%E8%AE%A1">五、使用 SPI 实现可插拔扩展设计</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E5%85%AD%E3%80%81%E5%8E%BB%E8%B0%83%E7%94%A8%E5%93%AA%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%A2%EF%BC%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5?id=%E5%85%AD%E3%80%81%E5%8E%BB%E8%B0%83%E7%94%A8%E5%93%AA%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%91%A2%EF%BC%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5">六、去调用哪个服务器呢？负载均衡策略</a></p><p><a href="https://dongzhougu.github.io/XRPC/#/./%E4%B8%83%E3%80%81%E9%9B%86%E6%88%90Spring%E4%B8%8ESpringBoot?id=%E4%B8%83%E3%80%81%E9%9B%86%E6%88%90spring%E4%B8%8Espringboot">七、集成 Spring 与 SpringBoot</a></p><h2 id="🔨-实现要点"><a href="#🔨-实现要点" class="headerlink" title="🔨 实现要点"></a>🔨 实现要点</h2><ul><li><input checked="" disabled="" type="checkbox"> 基于 NIO 的 Netty 网络通讯，实现 Channel 复用、心跳保活</li><li><input checked="" disabled="" type="checkbox"> 支持 ProtoBuf、Kryo、Hessian2 序列化，反序列化，经测试 Kryo 效率最高，默认 Kyro</li><li><input checked="" disabled="" type="checkbox"> 支持 Gzip 压缩，可在配置文件配置是否启用包压缩，已经压缩算法，减少数据包的大小。</li><li><input checked="" disabled="" type="checkbox"> 支持 Zookeeper 和 Nacos 的服务注册发现，启动后将服务信息发布到注册中心，客户端发现并监听服务信息。</li><li><input checked="" disabled="" type="checkbox"> 客户端实现了基于轮询、随机和一致性哈希负载均衡算法，快速失败和重试的容错策略</li><li><input checked="" disabled="" type="checkbox"> 自定义 RpcFuture，客户端支持同步和异步调用，设置回调方法，返回调用响应后执行回调。</li><li><input checked="" disabled="" type="checkbox"> 基于 SPI 的模块化管理，更加方便扩展模块，集成 Spring 通过注解注册服务，SpringBoot 自动装载配置</li><li><input disabled="" type="checkbox"> 动态代理使用 Javassist 生成代码，直接调用</li><li><input disabled="" type="checkbox"> 支持 Eureka、Consul 等注册中心</li><li><input disabled="" type="checkbox"> 调用鉴权、服务监控中心</li><li><input disabled="" type="checkbox"> 编写更完整的测试</li></ul><h2 id="💻-项目目录"><a href="#💻-项目目录" class="headerlink" title="💻 项目目录"></a>💻 项目目录</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以下是重要的包的简介：</span><br></pre></td></tr></tbody></table></figure><p>|- docs：博文 Markdown 源文件以及绘图 draw.io 文件</p><p>|- xrpc-client：RPC 客户端核心<br>|- async: 实现了 RpcFuture,完成同步、异步回调<br>|- config: SpringBoot 自动配置类<br>|- core: Netty 客户端核心逻辑，Channel 复用，心跳保活<br>|- faultTolerantInvoker: 容错策略<br>|- loadbalance: 负载均衡算法<br>|- proxy: 动态代理类， 实现无感调用</p><p>|- xrpc-common: RPC 抽取出来的通用模块<br>|- annotation：自定义的注解，例如 @RpcService(服务提供)、@RpcAutowired(服务引用)<br>|- codec: Netty 编解码、TCP 粘包、拆包<br>|- compress: 网络传输过程中的压缩算法<br>|- dto: 网络传输中的 RpcMessage,Request,Response<br>|- extension: 增强版 JDK SPI<br>|- proterties: SpringBoot 的配置 Config<br>|- registry: 注册中心，例如 Zookeeper、Nacos 注册中心<br>|- serializer: 序列化算法实现</p><p>|- xrpc-server: RPC 服务端核心<br>|- core: Netty 服务端逻辑，注册服务，接受请求<br>|- invoke: 反射调用请求的方法，实现了 jdk 和 cglib</p><p>|- xrpc-test-client: 样例 demo-客户端<br>|- xrpc-test-server: 样例 demo-服务端</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="🚀-主要特性"><a href="#🚀-主要特性" class="headerlink" title="🚀 主要特性"></a>🚀 主要特性</h2><p>下面为使用 draw.io 绘制的图，源文件位于<a href="https://github.com/DongZhouGu/XRPC/blob/master/docs/images/rpc.drawio，可供参考">https://github.com/DongZhouGu/XRPC/blob/master/docs/images/rpc.drawio，可供参考</a></p><h3 id="RPC-调用过程"><a href="#RPC-调用过程" class="headerlink" title="RPC 调用过程"></a>RPC 调用过程</h3><h3 id="Netty-服务端-pipline"><a href="#Netty-服务端-pipline" class="headerlink" title="Netty 服务端 pipline"></a>Netty 服务端 pipline</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651226155922-921d33a5-63a7-43cc-955b-5161497538e5.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=AxnH9&amp;originHeight=844&amp;originWidth=3168&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651231638890-31866612-2803-4951-a68f-d2ce5d0414c1.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=OUkot&amp;originHeight=744&amp;originWidth=4044&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="RPC-Client-逻辑"><a href="#RPC-Client-逻辑" class="headerlink" title="RPC-Client 逻辑"></a>RPC-Client 逻辑</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651244325781-e8658c69-83a8-4a8c-a4f9-9e57b44820fd.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=MgFPg&amp;originHeight=1252&amp;originWidth=4184&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="同步调用逻辑"><a href="#同步调用逻辑" class="headerlink" title="同步调用逻辑"></a>同步调用逻辑</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651247120029-4999acb6-a108-4367-b27b-7e91713e8139.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=N0Vle&amp;originHeight=1764&amp;originWidth=3168&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="异步调用逻辑"><a href="#异步调用逻辑" class="headerlink" title="异步调用逻辑"></a>异步调用逻辑</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651643941142-b1ffeaaa-7a5e-4869-b0c8-1d2cfdc01a19.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=F86oH&amp;originHeight=1648&amp;originWidth=3712&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title=" 使用方式"></a><img src="https://gw.alipayobjects.com/os/lib/twemoji/11.2.0/2/svg/1f3a8.svg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=18&amp;id=IrUmS&amp;originHeight=150&amp;originWidth=150&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=&amp;width=18" alt=""> 使用方式</h2><ol><li>克隆本项目到本地 Maven install。</li><li>添加 maven 依赖到你的<code>SpringBoot</code>项目中。</li></ol><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  客户端      --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.dzgu.xrpc&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;xrpc-client&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--  服务端      --&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.dzgu.xrpc&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;xrpc-server&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>默认配置项在<code>RpcConfig</code>类中，可以通过<code>application.properties</code>来覆盖需要修改的配置项。</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">xrpc:</span></span><br><span class="line">  <span class="comment"># 是否启用rpc，默认启用</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># RPC服务端口</span></span><br><span class="line">  <span class="attr">serverPort:</span> <span class="number">18866</span></span><br><span class="line">  <span class="comment"># 注册中心，默认zookeeper</span></span><br><span class="line">  <span class="attr">register:</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="comment"># 注册中心地址</span></span><br><span class="line">  <span class="attr">registerAddress:</span> <span class="number">127.0</span><span class="number">.01</span><span class="string">:8848</span></span><br><span class="line">  <span class="comment"># 序列化算没法，默认kryo</span></span><br><span class="line">  <span class="attr">serializer:</span> <span class="string">kryo</span></span><br><span class="line">  <span class="comment"># 压缩算法，默认gzip</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="string">gzip</span></span><br><span class="line">  <span class="comment"># 负载均衡算法，默认random</span></span><br><span class="line">  <span class="attr">load-balance:</span> <span class="string">random</span></span><br><span class="line">  <span class="comment"># 容错策略，默认retry</span></span><br><span class="line">  <span class="attr">retry:</span> <span class="string">retry</span></span><br><span class="line">  <span class="comment"># 重试次数，只有容错策略是retry时才有效</span></span><br><span class="line">  <span class="attr">retry-times:</span> <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>启动注册中心</li></ol><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li>定义服务接口</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>{</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(Hello hello)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>实现服务接口，并通过<code>@RpcService</code>注册服务</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RpcService(value = HelloService.class, version = "1.0")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImp1</span> <span class="keyword">implements</span> <span class="title">HelloService</span></span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"HelloServiceImpl1被创建"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Hello hello)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"HelloServiceImpl收到: {}."</span>, hello.getMessage());</span><br><span class="line">        String result = <span class="string">"Hello description is "</span> + hello.getDescription();</span><br><span class="line">        log.info(<span class="string">"HelloServiceImpl返回: {}."</span>, result);</span><br><span class="line">        <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h4><ol><li>使用 <code>@RpcAutowired</code> 注解调用远程服务</li><li>调用接口方法</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@RpcAutowired(version = "1.0")</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            System.out.println(i+<span class="string">"----sync:"</span>+helloService.hello(<span class="keyword">new</span> Hello(<span class="string">"hello"</span>, <span class="string">"hello sync"</span>)));</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h4><ol><li>使用 <code>@RpcAutowired</code> 注解调用远程服务，并且将注解的 <code>isAsync</code> 置为 <code>ture</code></li><li>调用接口方法，并立即为<code>RpcContext</code> 上下文设置回调函数（集成 <code>ResponseCallback</code> 抽象类）</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line">    <span class="meta">@RpcAutowired(version = "1.0",isAsync = true)</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloServiceAsync;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            helloServiceAsync.hello(<span class="keyword">new</span> Hello(<span class="string">"hello"</span>, <span class="string">"hello async"</span>));</span><br><span class="line">            RpcContext.setCallback(<span class="keyword">new</span> ResponseCallback() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callBack</span><span class="params">(RpcResponse&lt;Object&gt; result)</span> </span>{</span><br><span class="line">                    System.out.println(<span class="string">"----Async--requetId:"</span>+ result.getRequestId()+<span class="string">"--data:"</span>+result.getData());</span><br><span class="line">                }</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(RpcResponse&lt;Object&gt; result, Exception e)</span> </span>{</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="☕-鸣谢"><a href="#☕-鸣谢" class="headerlink" title="☕   鸣谢"></a>☕   鸣谢</h2><p>感谢以下项目，我们从中得到了很大的帮助：</p><ul><li><a href="https://my.oschina.net/huangyong/blog/361751">https://my.oschina.net/huangyong/blog/361751</a></li><li><a href="https://github.com/luxiaoxun/NettyRpc">https://github.com/luxiaoxun/NettyRpc</a></li><li><a href="https://github.com/Snailclimb/guide-rpc-framework">https://github.com/Snailclimb/guide-rpc-framework</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、去调用哪个服务器呢？负载均衡策略</title>
      <link href="/2022/05/12/yuque/liu-qu-diao-yong-na-ge-fu-wu-qi-ni-fu-zai-jun-heng-ce-lue/"/>
      <url>/2022/05/12/yuque/liu-qu-diao-yong-na-ge-fu-wu-qi-ni-fu-zai-jun-heng-ce-lue/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>负载均衡在各个层级都有相应的应用。由于单机应用的性能局限性，在负载高的情况下，通常都会采用增加服务器的形式来横向扩展，通过集群和负载均衡来提高整个系统处理能力。<br>那么在 RPC 项目中，当服务端由集群组成，注册中心的一个 serviceKey 对应多个服务地址，那么该选择哪个进行远程调用呢？这就需要负载均衡算法。这里我们共实现了随机、轮询和一致性 Hash 三种算法</p><h2 id="LoadBalance"><a href="#LoadBalance" class="headerlink" title="LoadBalance"></a>LoadBalance</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(value = "random")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoadBalance</span> </span>{</span><br><span class="line">    <span class="function">String <span class="title">doSelect</span><span class="params">(List&lt;String&gt; serviceAddresses, RpcRequest rpcRequest)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">selectServiceAddress</span><span class="params">(List&lt;String&gt; serviceAddresses, RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtil.isEmpty(serviceAddresses)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (serviceAddresses.size() == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">return</span> serviceAddresses.get(<span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> doSelect(serviceAddresses, rpcRequest);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>使用 SPI 机制，加载配置的负载均衡策略<br>提供了三种负载均衡实现</p><ul><li>RandomLoadBalance</li><li>FullRoundBalance</li><li>ConsistentHashLoadBalance</li></ul><h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><p>字如其名，随机中服务节点中选择一个进行调用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">implements</span> <span class="title">LoadBalance</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSelect</span><span class="params">(List&lt;String&gt; serviceAddresses, RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> serviceAddresses.get(random.nextInt(serviceAddresses.size()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><p>按顺序进行访问</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 随机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomLoadBalance</span> <span class="keyword">implements</span> <span class="title">LoadBalance</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSelect</span><span class="params">(List&lt;String&gt; serviceAddresses, RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">return</span> serviceAddresses.get(random.nextInt(serviceAddresses.size()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><blockquote><ul><li>一致性 Hash，相同参数的请求总是发到同一提供者。</li><li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li><li>算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing">http://en.wikipedia.org/wiki/Consistent_hashing</a></li></ul></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651231393-a4e3a751-3518-48e2-9cf1-c842a6d509d9.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u105cac6c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=775&amp;originWidth=746&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=137424&amp;status=done&amp;style=none&amp;taskId=u4ab29f8c-be62-44c1-a331-2a7455cf9ca&amp;title=" alt="image.png"><br>这里我们摘自<a href="https://dubbo.apache.org/zh/blog/2019/05/01/dubbo-%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%AE%9E%E7%8E%B0%E5%89%96%E6%9E%90/">Dubbo 博客</a></p><h4 id="a、映射服务"><a href="#a、映射服务" class="headerlink" title="a、映射服务"></a><strong>a、映射服务</strong></h4><p>将服务地址（ip+端口）按照一定规则构造出特定的识别码（如 md5 码），再用识别码对 2^32 取模，确定服务在 Hash 值区间对应的位置。假设有 Node1、Node2、Node3 三个服务，其映射关系如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651600201-d1df0912-312c-45f0-ae42-f1cfdcf137d4.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u7a6cfd1c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=551&amp;originWidth=501&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=29515&amp;status=done&amp;style=none&amp;taskId=u7aff7fcc-524c-4cff-8c1f-47152bc4df6&amp;title=" alt="image.png"></p><h4 id="b、映射请求、定位服务"><a href="#b、映射请求、定位服务" class="headerlink" title="b、映射请求、定位服务"></a><strong>b、映射请求、定位服务</strong></h4><p>在发起请求时，我们往往会带上参数，而这些参数，就可以被我们用来确定具体调用哪一个服务。假设有请求 R1、R2、R3，对它们的参数也经过计算特定识别码、取余的一系列运算之后，有如下映射关系：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651600257-7efab3b8-a397-458d-994d-d8574b96ce99.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u949cc91e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=551&amp;originWidth=501&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=34165&amp;status=done&amp;style=none&amp;taskId=u87893c7c-b1c8-4e86-8885-d6fce56bb5b&amp;title=" alt="image.png"><br>从图中，我们可以看到，R1 请求映射在 0-Node1 中间，R2 请求映射在 Node1-Node2 中间，R3 请求映射在 Node2-Node3 中间。我们取<strong>服务 Hash 值大于请求 Hash 值</strong>的<strong>第一个服务</strong>作为实际的调用服务。也就是说，R1 请求将调用 Node1 服务，R2 请求将调用 Node2 服务，R3 请求将调用 Node3 服务。</p><h4 id="c、新增服务节点"><a href="#c、新增服务节点" class="headerlink" title="c、新增服务节点"></a><strong>c、新增服务节点</strong></h4><p>假设新增服务 Node4，映射在 Node3 之前，恰巧破坏了原来的一个映射关系：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651600749-ed07aef6-a701-4c8c-8fcf-2aba9f290d20.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u00121488&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=551&amp;originWidth=501&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=35015&amp;status=done&amp;style=none&amp;taskId=uf0e9473c-71ca-4e6e-ba3b-90689c58637&amp;title=" alt="image.png"><br>这样，请求 R3 将会实际调用服务 Node4，但请求 R1、R2 不受影响。</p><h4 id="d、删除服务节点"><a href="#d、删除服务节点" class="headerlink" title="d、删除服务节点"></a><strong>d、删除服务节点</strong></h4><p>假设服务 Node2 宕机，那么 R2 请求将会映射到 Node3：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651600715-996f036b-93bd-449b-bd09-c7279f1d21ff.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ucbee22b5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=533&amp;originWidth=501&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=32314&amp;status=done&amp;style=none&amp;taskId=uda6c8290-066a-4c81-8d20-df2e3b05913&amp;title=" alt="image.png"><br>原本的 R1、R3 请求不受影响。<br><strong>可以看出，当新增、删除服务时，受影响的请求是有限的。不至于像简单取模映射一般，服务发生变化时，需要调整全局的映射关系</strong>。</p><h4 id="e、平衡性与虚拟节点"><a href="#e、平衡性与虚拟节点" class="headerlink" title="e、平衡性与虚拟节点"></a><strong>e、平衡性与虚拟节点</strong></h4><p>在我们上面的假设中，我们假设 Node1、Node2、Node3 三个服务在经过 Hash 映射后所分布的位置恰巧把环切成了均等的三分，请求的分布也基本是平衡的。但是实际上计算服务 Hash 值的时候，是很难这么巧的。也许一不小心就映射成了这个样子：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651693738-0a6a656a-c77e-4880-b2aa-d1a55cf95b24.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ueb18c01f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=533&amp;originWidth=490&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=29205&amp;status=done&amp;style=none&amp;taskId=u65ffa443-8214-4e42-a42c-90572d83803&amp;title=" alt="image.png"><br>这样，就会导致大部分请求都会被映射到 Node1 上。因此，引出了虚拟节点。<br>所谓虚拟节点，就是除了对服务本身地址进行 Hash 映射外，还通过在它地址上做些处理（比如 Dubbo 中，在 ip+port 的字符串后加上计数符 1、2、3……，分别代表虚拟节点 1、2、3），以达到同一服务映射多个节点的目的。通过引入虚拟节点，我们可以把上图中映射给 Node1 的请求进一步拆分：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651651718869-f8b1a732-bd67-40e1-8627-64419ea39e31.png#clientId=uf3c80f9a-5434-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u48800301&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=533&amp;originWidth=510&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=33019&amp;status=done&amp;style=none&amp;taskId=u94af75c7-e586-4e18-9dc4-aef0f44f2c7&amp;title=" alt="image.png"><br>如上图所示，若有请求落在 Node3-Node1’区间，该请求应该是调用 Node1’服务，但是因为 Node1’是 Node1 的虚拟节点，所以实际调用的是 Node1 服务。通过引入虚拟节点，请求的分布就会比较平衡了</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashLoadBalance</span> <span class="keyword">implements</span> <span class="title">LoadBalance</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&gt; selectors = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSelect</span><span class="params">(List&lt;String&gt; serviceAddresses, RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">        <span class="comment">// 用来识别Invoker列表是否发生变更的Hash码</span></span><br><span class="line">        <span class="keyword">int</span> identityHashCode = System.identityHashCode(serviceAddresses);</span><br><span class="line">        String rpcServiceName = rpcRequest.getMethodName();</span><br><span class="line">        ConsistentHashSelector selector = selectors.get(rpcServiceName);</span><br><span class="line">        <span class="comment">// 若不存在"接口.方法名"对应的选择器，或是Invoker列表已经发生了变更，则初始化一个选择器</span></span><br><span class="line">        <span class="keyword">if</span> (selector == <span class="keyword">null</span> || selector.identityHashCode != identityHashCode) {</span><br><span class="line">            selectors.put(rpcServiceName, <span class="keyword">new</span> ConsistentHashSelector(serviceAddresses, <span class="number">160</span>, identityHashCode));</span><br><span class="line">            selector = selectors.get(rpcServiceName);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> selector.select(rpcServiceName + Arrays.stream(rpcRequest.getParameters()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里有个很重要的概念：<strong>选择器——selector</strong>。这是 Dubbo 一致性 Hash 实现中，承载着整个映射关系的数据结构。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsistentHashSelector</span> </span>{</span><br><span class="line">    <span class="comment">// 存储Hash值与节点映射关系的TreeMap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, String&gt; virtualInvokers;</span><br><span class="line">    <span class="comment">// 用来识别Invoker列表是否发生变更的Hash码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> identityHashCode;</span><br><span class="line"></span><br><span class="line">    ConsistentHashSelector(List&lt;String&gt; invokers, <span class="keyword">int</span> replicaNumber, <span class="keyword">int</span> identityHashCode) {</span><br><span class="line">        <span class="keyword">this</span>.virtualInvokers = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.identityHashCode = identityHashCode;</span><br><span class="line">        <span class="comment">// 对每个invoker生成replicaNumber个虚拟结点，并存放于TreeMap中</span></span><br><span class="line">        <span class="keyword">for</span> (String invoker : invokers) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; replicaNumber / <span class="number">4</span>; i++) {</span><br><span class="line">                <span class="comment">// 根据md5算法为每4个结点生成一个消息摘要，摘要长为16字节128位。</span></span><br><span class="line">                <span class="keyword">byte</span>[] digest = md5(invoker + i);</span><br><span class="line">                <span class="comment">// 随后将128位分为4部分，0-31,32-63,64-95,95-128，并生成4个32位数，存于long中，long的高32位都为0</span></span><br><span class="line">                <span class="comment">// 并作为虚拟结点的key。</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">4</span>; h++) {</span><br><span class="line">                    <span class="keyword">long</span> m = hash(digest, h);</span><br><span class="line">                    virtualInvokers.put(m, invoker);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在新建 ConsistentHashSelector 对象的时候，就会遍历所有 Invoker 对象，然后计算出其地址（ip+port）对应的 md5 码，并按照配置的节点数目 replicaNumber 的值来初始化服务节点和所有虚拟节点。</p><blockquote><p>这里值得注意的是：以 replicaNumber 取默认值 160 为例，假设当前遍历到的 Invoker 地址为 127.0.0.1:20880，它会依次获得“127.0.0.1:208800”、“127.0.0.1:208801”、……、“127.0.0.1:2088040”的 md5 摘要，在每次获得摘要之后，还会对该摘要进行四次数位级别的散列。大致可以猜到其目的应该是为了加强散列效果。（希望有人能告诉我相关的理论依据。）</p></blockquote><p>如果找到对应的 selector，则会调用 selector 的 select 方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  选择节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">select</span><span class="params">(String rpcServiceKey)</span> </span>{</span><br><span class="line">    <span class="comment">//生成消息摘要</span></span><br><span class="line">    <span class="keyword">byte</span>[] digest = md5(rpcServiceKey);</span><br><span class="line">    <span class="comment">//调用hash(digest, 0)，将消息摘要转换为hashCode，这里仅取0-31位来生成HashCode</span></span><br><span class="line">    <span class="keyword">return</span> selectForKey(hash(digest, <span class="number">0</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  根据hashCode选择结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectForKey</span><span class="params">(<span class="keyword">long</span> hashCode)</span> </span>{</span><br><span class="line">    <span class="comment">// 1、先找当前key对应的entity，若不存在，走2</span></span><br><span class="line">    <span class="comment">// 2、找环上hash比key大，且最近的 entry</span></span><br><span class="line">    <span class="comment">// 3、若无则返回null</span></span><br><span class="line">    Map.Entry&lt;Long, String&gt; entry = virtualInvokers.ceilingEntry(hashCode);</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// 若找不到，则直接返回环上第一个entry</span></span><br><span class="line">        entry = virtualInvokers.firstEntry();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 返回具体invoker</span></span><br><span class="line">    <span class="keyword">return</span> entry.getValue();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、使用SPI实现可插拔扩展设计</title>
      <link href="/2022/05/12/yuque/wu-shi-yong-spi-shi-xian-ke-cha-ba-kuo-zhan-she-ji/"/>
      <url>/2022/05/12/yuque/wu-shi-yong-spi-shi-xian-ke-cha-ba-kuo-zhan-she-ji/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SPI 全称为 Service Provider Interface，对应中文为服务发现机制。SPI 类似一种可插拔机制，首先需要定义一个接口或一个约定，然后不同的场景可以对其进行实现，调用方在使用的时候无需过多关注具体的实现细节。在 Java 中，SPI 体现了面向接口编程的思想，满足开闭设计原则。</p><h2 id="JDK-自带-SPI-实现"><a href="#JDK-自带-SPI-实现" class="headerlink" title="JDK 自带 SPI 实现"></a>JDK 自带 SPI 实现</h2><p>以序列化为例，如果想要实现可插拔的序列化实现，使用 JDK 原生 SPI 过程如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>{</span><br><span class="line">    <span class="keyword">byte</span>[] serialize(Object object);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) {</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toJsonStr(object).getBytes();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtostuffSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LinkedBuffer BUFFER = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) {</span><br><span class="line">        Schema schema = RuntimeSchema.getSchema(object.getClass());</span><br><span class="line">        <span class="keyword">return</span> ProtostuffIOUtil.toByteArray(object, schema, BUFFER);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 resources/META-INF/services 目录下添加一个 com.xxx.Serializer 的文件，这是 JDK SPI 的配置文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.JSONSerializer</span><br><span class="line">com.xxx.ProtostuffSerializer</span><br></pre></td></tr></tbody></table></figure><p>然后，就可以使用 JDK 提供的 ServiceLoader 来加载扩展类了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    ServiceLoader&lt;Serializer&gt; serviceLoader = ServiceLoader.load(Serializer.class);</span><br><span class="line">    Iterator&lt;Serializer&gt; iterator = serviceLoader.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) {</span><br><span class="line">        Serializer serializer= iterator.next();</span><br><span class="line">        System.out.println(serializer.getClass().getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>JDK 对 SPI 的加载实现存在一个较为突出的小缺点，无法按需加载实现类，通过 ServiceLoader.load 加载时会将文件中的所有实现都进行实例化，如果想要获取具体某个具体的实现类需要进行遍历判断。</p><h2 id="Dubbo-SPI-和-Java-SPI-区别？"><a href="#Dubbo-SPI-和-Java-SPI-区别？" class="headerlink" title="Dubbo SPI 和 Java SPI 区别？"></a>Dubbo SPI 和 Java SPI 区别？</h2><p>Dubbo 就是通过 SPI 机制加载所有的组件。不过，Dubbo 并未使用 Java 原生的 SPI 机制，而是对其进行了增强，使其能够更好的满足需求。</p><ul><li>配置文件改为键值对形式，可以获取任一实现类，懒加载，而无需加载所有实现类，节约资源；</li><li>增加了缓存来存储实例，提高了读取的性能；</li><li>Dubbo SPI 还提供了默认值的指定方式，@SPI（“xxx”）指定</li><li>增加了对扩展点 IOC 和 AOP 的支持，一个扩展点可以直接 setter 注入其</li></ul><p>它扩展点。</p><h2 id="XRpc-的-SPI-实现"><a href="#XRpc-的-SPI-实现" class="headerlink" title="XRpc 的 SPI 实现"></a>XRpc 的 SPI 实现</h2><h3 id="SPI-注解"><a href="#SPI-注解" class="headerlink" title="SPI 注解"></a>SPI 注解</h3><p>定义 SPI 注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SPI {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认扩展类全路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 默认不填是 default</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "<span class="keyword">default</span>"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>被@SPI 注解的接口为扩展类型，SPI 注解含有默认值，可选择默认扩展实现</p><h3 id="获取对应接口的扩展加载器实例"><a href="#获取对应接口的扩展加载器实例" class="headerlink" title="获取对应接口的扩展加载器实例"></a>获取对应接口的扩展加载器实例</h3><p>当我们想要获取特定的扩展类实例时，调用如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExtensionLoader.getExtensionLoader(ServiceDiscovery.class).getExtension(<span class="string">"zk"</span>);</span><br><span class="line"><span class="comment">// 获取此接口的ExtensionLoader扩展类类加载器</span></span><br><span class="line">ExtensionLoader.getExtensionLoader(ServiceDiscovery.class)</span><br><span class="line"><span class="comment">// 使用ExtensionLoader获取扩展类实例，给到调用者</span></span><br><span class="line">.getExtension(<span class="string">"zk"</span>);</span><br></pre></td></tr></tbody></table></figure><p>下面是获取对应接口的扩展加载器实例的具体逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line"> * 扩展类加载器实例缓存</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, ExtensionLoader&lt;?&gt;&gt; EXTENSION_LOADERS = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取对应类型的扩展加载器实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type 扩展类加载器的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 扩展类加载器实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ExtensionLoader&lt;S&gt; <span class="title">getExtensionLoader</span><span class="params">(Class&lt;S&gt; type)</span> </span>{</span><br><span class="line">    <span class="comment">// 扩展类型不能为空</span></span><br><span class="line">    <span class="keyword">if</span> (type == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Extension type should not be null."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 扩展类型必须为接口</span></span><br><span class="line">    <span class="keyword">if</span> (!type.isInterface()) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Extension type must be an interface."</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 扩展类型必须被@SPI注解</span></span><br><span class="line">    <span class="keyword">if</span> (type.getAnnotation(SPI.class) == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Extension type must be annotated by @SPI"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从缓存中拿到扩展器加载器实例，没有则new一个放进去</span></span><br><span class="line">    ExtensionLoader&lt;S&gt; extensionLoader = (ExtensionLoader&lt;S&gt;) EXTENSION_LOADERS.get(type);</span><br><span class="line">    <span class="keyword">if</span> (extensionLoader == <span class="keyword">null</span>) {</span><br><span class="line">        EXTENSION_LOADERS.putIfAbsent(type, <span class="keyword">new</span> ExtensionLoader&lt;S&gt;(type));</span><br><span class="line">        extensionLoader = (ExtensionLoader&lt;S&gt;) EXTENSION_LOADERS.get(type);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> extensionLoader;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>加载器指的就是 ExtensionLoader<t>，为了减少对象的开销， 屏蔽了加载器的构造函数，提供了一个静态方法来获取加载器。EXTENSION_LOADERS 是一个 Map，缓存了各种类型的加载器。获取的时候先从缓存获取，缓存不存在则去实例化，节省资源</t></p><h3 id="扩展类懒加载"><a href="#扩展类懒加载" class="headerlink" title="扩展类懒加载"></a>扩展类懒加载</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展类配置列表缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Holder&lt;Map&lt;String, Class&lt;?&gt;&gt;&gt; cachedClasses = <span class="keyword">new</span> Holder&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展类实例缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Holder&lt;Object&gt;&gt; cachedInstances = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展类实例缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Holder&lt;Object&gt;&gt; cachedInstances = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据名字获取扩展类实例(单例)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 扩展类在配置文件中配置的名字. 如果名字是空的或者空白的，则返回默认扩展</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 单例扩展类实例，如果找不到，则抛出异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getExtension</span><span class="params">(String name)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(name)) {</span><br><span class="line">        log.warn(<span class="string">"Extension name is null or empty, load the default Extension"</span>);</span><br><span class="line">        <span class="keyword">return</span> getDefaultExtension();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 从缓存中获取单例，没有命中，则创建</span></span><br><span class="line">    Holder&lt;Object&gt; holder = cachedInstances.get(name);</span><br><span class="line">    <span class="keyword">if</span> (holder == <span class="keyword">null</span>) {</span><br><span class="line">        cachedInstances.putIfAbsent(name, <span class="keyword">new</span> Holder&lt;&gt;());</span><br><span class="line">        holder = cachedInstances.get(name);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 创建单例</span></span><br><span class="line">    Object instance = holder.get();</span><br><span class="line">    <span class="comment">// 双重锁检查</span></span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">synchronized</span> (holder) {</span><br><span class="line">            instance = holder.get();</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                instance = createExtension(name);</span><br><span class="line">                holder.set(instance);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> (T) instance;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一个接口如果有很多实现类，而我们只需要其中一个的时候，就会产生其他不必要的实现类。 例如 Dubbo 的序列化接口，实现类就有 fastjson、gson、hession2、jdk、kryo、protobuf 等等，通常我们只需要选择一种序列化方式。<br>这里，我们根据名字来实例化需要加载的扩展类。同样，使用一个 cachedInstances 缓存已经实例化的单例扩展类。</p><h3 id="扩展类的创建"><a href="#扩展类的创建" class="headerlink" title="扩展类的创建"></a>扩展类的创建</h3><p>当获取扩展类不存在缓存时，会加锁创建单例，并放入到缓存中<br>实例化的流程如下：</p><ol><li>从配置文件中，加载该接口所有的实现类的 Class 对象，并放到缓存中。</li><li>根据要获取的扩展名字，找到对应的 Class 对象。</li><li>调用 clazz.newInstance() 实例化。(Class 需要有无参构造函数)</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建对应名字的扩展类实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 扩展名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 扩展类实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">createExtension</span><span class="params">(String name)</span> </span>{</span><br><span class="line">    <span class="comment">// 获取当前类型所有扩展类，并从中根据名字获取目标类</span></span><br><span class="line">    Class&lt;?&gt; clazz = getAllExtensionClasses().get(name);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No such extension of name "</span> + name);</span><br><span class="line">    }</span><br><span class="line">    T instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            EXTENSION_INSTANCES.putIfAbsent(clazz, clazz.newInstance());</span><br><span class="line">            instance = (T) EXTENSION_INSTANCES.get(clazz);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前类型{<span class="doctag">@link</span> #type}的所有扩展类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> {name: clazz}</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getAllExtensionClasses() {</span><br><span class="line">    <span class="comment">// 从缓存中获取所有扩展类</span></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; classes = cachedClasses.get();</span><br><span class="line">    <span class="comment">// 缓存中没有，则从目录文件中读取加载</span></span><br><span class="line">    <span class="keyword">if</span> (classes == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">synchronized</span> (cachedClasses) {</span><br><span class="line">            classes = cachedClasses.get();</span><br><span class="line">            <span class="keyword">if</span> (classes == <span class="keyword">null</span>) {</span><br><span class="line">                classes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                <span class="comment">// load all extensions from our extensions directory</span></span><br><span class="line">                loadDirectory(classes);</span><br><span class="line">                cachedClasses.set(classes);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> classes;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="默认扩展类"><a href="#默认扩展类" class="headerlink" title="默认扩展类"></a>默认扩展类</h3><p>在使用 @SPI 的时候可以指定一个默认的实现类名，例如 @SPI(“zk”)。<br>这样当获取扩展名留空没有配置的时候，就会直接获取默认扩展，减少了配置的量</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String defaultNameCache;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ExtensionLoader</span><span class="params">(Class&lt;T&gt; type)</span> </span>{</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    SPI annotation = type.getAnnotation(SPI.class);</span><br><span class="line">    defaultNameCache = annotation.value();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getDefaultExtension</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> getExtension(defaultNameCache);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="SPI-自适应扩展"><a href="#SPI-自适应扩展" class="headerlink" title="SPI 自适应扩展"></a>SPI 自适应扩展</h3><p>在 Dubbo 中,SPI 配置有两种。一种是固定的系统级别的配置，在 Dubbo 启动之后就不会再改了。还有一种是运行时的配置，可能对于每一次的 RPC，这些配置都不同。</p><ul><li>对于固定的配置，在配置 Config 中写死，在调用时从 ExtensionLoader 中拿到对应的扩展类，这样的话，虽然可以支持可插拔的第三方实现，但是在应用启动时，到底用哪个扩展类就已经确定了</li><li>对于运行时配置，Dubbo 提供了自适应扩展，也可被理解为扩展代理类，其就是 Extension 的代理，它实现了扩展点接口。在调用扩展点的接口方法时，会根据实际的参数来决定要使用哪个扩展。<blockquote><p>在 Dubbo 中，因为 dubbo 是 url 驱动，即服务的配置信息都是通过&amp;拼接在 url 之后，换句话说，当 Provider 收到调用请求时，其相关配置是通过查 url 后的参数获得；这样做的目的是， Consumer 在注册中心拿到相应服务的 url 后，可以根据自身的配置对请求 url 再次进行拼接（修改）。因此，对于 Dubbo 而言，每一次的 RPC 调用的参数都是未知的，只有在运行时，根据这些参数才能做出正确的决定。</p></blockquote></li></ul><p><strong>获取自适应扩展类</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getAdaptiveExtension</span><span class="params">()</span> </span>{</span><br><span class="line">    InvocationHandler handler = <span class="keyword">new</span> AdaptiveInvocationHandler&lt;&gt;(type);</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(ExtensionLoader.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> Class&lt;?&gt;[]{type}, handler);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>适配扩展类其实是一个代理类，接下来来看看这个代理类 AdaptiveInvocationHandler：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Extension代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2022/4/30 22:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdaptiveInvocationHandler</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AdaptiveInvocationHandler</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">if</span>(args.length==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> method.invoke(proxy,args);</span><br><span class="line">        }</span><br><span class="line">        URL url=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) {</span><br><span class="line">            <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> URL) {</span><br><span class="line">                url = (URL) arg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 找不到 URL 参数，直接执行方法</span></span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> method.invoke(proxy, args);</span><br><span class="line">        }</span><br><span class="line">        Adaptive adaptive = method.getAnnotation(Adaptive.class);</span><br><span class="line">        <span class="comment">// 如果不包含 @Adaptive，直接执行方法即可</span></span><br><span class="line">        <span class="keyword">if</span> (adaptive == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> method.invoke(proxy, args);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 从 @Adaptive#value() 中拿到扩展名的 key</span></span><br><span class="line">        String extendNameKey = adaptive.value();</span><br><span class="line">        String extendName;</span><br><span class="line">        <span class="comment">// 如果这个 key 是协议，从协议拿。其他的就直接从 URL 参数拿</span></span><br><span class="line">        <span class="keyword">if</span> (URLKeyConst.PROTOCOL.equals(extendNameKey)) {</span><br><span class="line">            extendName = url.getProtocol();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            extendName = url.getParam(extendNameKey, method.getDeclaringClass() + <span class="string">"."</span> + method.getName());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 拿到扩展名之后，就直接从 ExtensionLoader 拿就行了</span></span><br><span class="line">        ExtensionLoader&lt;T&gt; extensionLoader = ExtensionLoader.getExtensionLoader(clazz);</span><br><span class="line">        T extension = extensionLoader.getExtension(extendName);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(extension, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>扩展代理类的流程如下</p><ol><li>从方法参数中拿到 URL 参数，拿不到就直接执行方法</li><li>获取配置 Key。从 @Adaptive#value() 拿扩展名的配置 key，如果拿不到就直接执行方法</li><li>获取扩展名。判断配置 key 是不是协议，如果是就拿协议类型，否则拿 URL 后面的参数。<br>例如 URL 是：zk://localhost:2181?type=eureka<ul><li>如果 @Adaptive(“protocol”)，那么扩展名就是协议类型：zk</li><li>如果 @Adaptive(“type”)，那么扩展名就是 type 参数：eureka</li></ul></li><li>最后根据扩展名获取扩展 extensionLoader.getExtension(extendName)</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、采用动态代理去无感调用远程服务</title>
      <link href="/2022/05/12/yuque/si-cai-yong-dong-tai-dai-li-qu-wu-gan-diao-yong-yuan-cheng-fu-wu/"/>
      <url>/2022/05/12/yuque/si-cai-yong-dong-tai-dai-li-qu-wu-gan-diao-yong-yuan-cheng-fu-wu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在客户端需要调用远程服务时，我们希望这个过程对于用户来说是无感的，使用框架的开发人员只需要像调用本地服务一样调用远程服务。因此，我们需要使用动态代理来增强接口方法，当调用接口方法时，框架会使用自动代理，将网络通信、编解码等复杂的过程封装在代理类中，本章就是讲解如何实现这个功能。</p><h2 id="调用流程与封装"><a href="#调用流程与封装" class="headerlink" title="调用流程与封装"></a>调用流程与封装</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651244325781-e8658c69-83a8-4a8c-a4f9-9e57b44820fd.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u56eeab43&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1252&amp;originWidth=4184&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=548410&amp;status=done&amp;style=none&amp;taskId=ue69f9fea-00be-48a5-8979-5f64a502d04&amp;title=" alt="image.png"><br>上图是整个调用过程的流程图，动态代理的部分，是 XRPC-Client 模块的核心代码。</p><h3 id="动态代理工厂类"><a href="#动态代理工厂类" class="headerlink" title="动态代理工厂类"></a>动态代理工厂类</h3><p>首先，抽象出一个动态代理工厂类，封装为 ProxyFactory</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Register register;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NettyClient nettyClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoadBalance loadBalance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FaultTolerantInvoker faultTolerantInvoker;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> retryTime = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> String compress;</span><br><span class="line">    <span class="keyword">private</span> String serializer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; objectCache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被调用服务的动态代理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class&lt;T&gt; interfaceClass, String version)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (T) objectCache.computeIfAbsent(interfaceClass.getName() + version, clz -&gt;</span><br><span class="line">                Proxy.newProxyInstance(</span><br><span class="line">                        interfaceClass.getClassLoader(),</span><br><span class="line">                        <span class="keyword">new</span> Class&lt;?&gt;[]{interfaceClass},</span><br><span class="line">                        <span class="keyword">new</span> ObjectProxy&lt;T&gt;(interfaceClass, version)</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line">        <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ObjectProxy</span><span class="params">(Class&lt;T&gt; clazz, String version)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">            <span class="keyword">this</span>.version = version;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 客户端主要逻辑，包括发送请求，相应结果与请求的绑定</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@SneakyThrows</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span>{</span><br><span class="line">            log.info(<span class="string">"client invoked method: [{}]"</span>, method.getName());</span><br><span class="line">            <span class="comment">// 构建request对象</span></span><br><span class="line">            RpcRequest rpcRequest = RpcRequest.builder()</span><br><span class="line">                    .methodName(method.getName())</span><br><span class="line">                    .parameters(args)</span><br><span class="line">                    .parameterTypes(method.getParameterTypes())</span><br><span class="line">                    .className(method.getDeclaringClass().getName())</span><br><span class="line">                    .requestId(UUID.randomUUID().toString())</span><br><span class="line">                    .version(version)</span><br><span class="line">                    .build();</span><br><span class="line">            String rpcServiceName = rpcRequest.getClassName();</span><br><span class="line">            String version = rpcRequest.getVersion();</span><br><span class="line">            String serviceKey = ServiceUtil.makeServiceKey(rpcServiceName, version);</span><br><span class="line">            <span class="comment">// 从注册中心 拿到该rpcService下的所有server的Address</span></span><br><span class="line">            List&lt;String&gt; serviceUrlList = register.lookupService(serviceKey);;</span><br><span class="line">            <span class="comment">// 负载均衡</span></span><br><span class="line">            String targetServiceUrl = loadBalance.selectServiceAddress(serviceUrlList, rpcRequest);</span><br><span class="line">            log.info(<span class="string">"Successfully found the com.dzgu.xprc.service address:[{}]"</span>, targetServiceUrl);</span><br><span class="line">            <span class="comment">//封装Message</span></span><br><span class="line">            RpcMessage rpcMessage = RpcMessage.builder().data(rpcRequest)</span><br><span class="line">                    .codec(SerializerTypeEnum.getCode(serializer))</span><br><span class="line">                    .compress(CompressTypeEnum.getCode(compress))</span><br><span class="line">                    .requestId(REQUEST_ID.getAndIncrement())</span><br><span class="line">                    .messageType(RpcConstants.REQUEST_TYPE).build();</span><br><span class="line">            <span class="comment">// Netty向服务端发送请求</span></span><br><span class="line">            RpcResponse&lt;Object&gt; rpcResponse = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (faultTolerantInvoker <span class="keyword">instanceof</span> RetryInvoker) {</span><br><span class="line">                RetryInvoker.DEFAULT_RETRY_TIMES = retryTime;</span><br><span class="line">            }</span><br><span class="line">            rpcResponse = faultTolerantInvoker.doinvoke(nettyClient, rpcMessage, targetServiceUrl);</span><br><span class="line">            <span class="keyword">this</span>.check(rpcResponse, rpcRequest);</span><br><span class="line">            <span class="keyword">return</span> rpcResponse.getData();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(RpcResponse&lt;Object&gt; rpcResponse, RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">            <span class="keyword">if</span> (rpcResponse == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE, <span class="string">"interfaceName"</span> + <span class="string">":"</span> + rpcRequest.getMethodName());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!rpcRequest.getRequestId().equals(rpcResponse.getRequestId())) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.REQUEST_NOT_MATCH_RESPONSE, <span class="string">"interfaceName"</span> + <span class="string">":"</span> + rpcRequest.getMethodName());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (rpcResponse.getCode() == <span class="keyword">null</span> || !rpcResponse.getCode().equals(RpcResponseCodeEnum.SUCCESS.getCode())) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE, <span class="string">"interfaceName"</span> + <span class="string">":"</span> + rpcRequest.getMethodName());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li>通过 getProxy 来获取指定接口的代理类 ObjectProxy</li><li>当调用接口方法时，通过实现 InvocationHandler 的 invoke 方法，完成调用逻辑，包括<ol><li>构建网络通信对象 Rpcrequest</li><li>从注册中心缓存或注册中心中拿到被调用服务的网络地址</li><li>通过负载均衡策略选择一个地址</li><li>通过配置的容错策略，Netty 向服务端发送请求</li></ol></li></ol><h3 id="容错策略"><a href="#容错策略" class="headerlink" title="容错策略"></a>容错策略</h3><p>实现了两种简单的容错策略，分别是 fail-fast 快速失败和重试</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryInvoker</span> <span class="keyword">implements</span> <span class="title">FaultTolerantInvoker</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_RETRY_TIMES = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RpcResponse&lt;Object&gt; <span class="title">doinvoke</span><span class="params">(NettyClient nettyClient, RpcMessage rpcMessage, String targetServiceUrl)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; DEFAULT_RETRY_TIMES; i++) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                RpcResponse&lt;Object&gt; result = nettyClient.sendRequest( rpcMessage, targetServiceUrl);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="keyword">null</span>) {</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (RpcException ex) {</span><br><span class="line">                log.error(<span class="string">"invoke error. retry times="</span> + i, ex);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(SERVICE_INVOCATION_FAILURE);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailFastInvoker</span> <span class="keyword">implements</span> <span class="title">FaultTolerantInvoker</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RpcResponse&lt;Object&gt; <span class="title">doinvoke</span><span class="params">(NettyClient nettyClient, RpcMessage rpcMessage, String targetServiceUrl)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> nettyClient.sendRequest(rpcMessage, targetServiceUrl);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>容错策略中的主要逻辑就是通过 Netty 来发送请求消息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RpcResponse&lt;Object&gt; <span class="title">sendRequest</span><span class="params">(RpcMessage rpcMessage, String targetServiceUrl)</span> </span>{</span><br><span class="line">        String[] socketAddressArray = targetServiceUrl.split(<span class="string">":"</span>);</span><br><span class="line">        String host = socketAddressArray[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> port = Integer.parseInt(socketAddressArray[<span class="number">1</span>]);</span><br><span class="line">        InetSocketAddress remoteaddress = <span class="keyword">new</span> InetSocketAddress(host, port);</span><br><span class="line">        <span class="comment">// 构造返回Future</span></span><br><span class="line">        CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; resultFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">        <span class="comment">// Channel复用，获取之前连接过的或者断线重连得Netty Channel</span></span><br><span class="line">        Channel channel = getChannel(remoteaddress);</span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 将请求放入未完成请求的Map缓存中,key为请求的唯一ID, value存放异步回调Future</span></span><br><span class="line">            pendingRpcRequests.put(((RpcRequest) rpcMessage.getData()).getRequestId(), resultFuture);</span><br><span class="line">            <span class="comment">// 发送请求</span></span><br><span class="line">            channel.writeAndFlush(rpcMessage).addListener(<span class="keyword">new</span> ChannelFutureListener() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>{</span><br><span class="line">                    <span class="keyword">if</span> (future.isSuccess()) {</span><br><span class="line">                        log.info(<span class="string">"client send message: [{}]"</span>, rpcMessage);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        future.channel().close();</span><br><span class="line">                        resultFuture.completeExceptionally(future.cause());</span><br><span class="line">                        log.error(<span class="string">"Send failed:"</span>, future.cause());</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            <span class="comment">// 阻塞等待调用请求的结果，当 Netty Client 收到对应请求的回复时，future.complete（response）,完成相应</span></span><br><span class="line">            <span class="comment">// TODO 异步调用</span></span><br><span class="line">            rpcResponse = resultFuture.get(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">"send request error: "</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"send request error:"</span>, e);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            pendingRpcRequests.remove(((RpcRequest) rpcMessage.getData()).getRequestId());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> rpcResponse;</span><br><span class="line"></span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><p>这里使用了 JDK 的 CompletableFuture 实现了<strong>同步调用</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651247120029-4999acb6-a108-4367-b27b-7e91713e8139.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3f547007&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1764&amp;originWidth=3168&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=566555&amp;status=done&amp;style=none&amp;taskId=u2d03d89b-e2a9-479b-bc3f-99dceb92cfe&amp;title=" alt="image.png"><br>其中，future.get 仍然会阻塞线程，等待响应，<br>当然，还可以利用 CallBack 实现真正的异步回调，这里笔者没有实现，后面会继续补充</p><h2 id="更新：异步调用"><a href="#更新：异步调用" class="headerlink" title="更新：异步调用"></a>更新：异步调用</h2><p>自己定义一个 RpcFuture，然后在 complete 的时候调用 用户传入的 callback 函数不就可以异步调用了嘛。执行远程调用方法时，直接返回空的 response，当收到 server 端返回的调用结果后，在调用 callback 函数，从而达到异步的效果。思路还是挺简单的，但是有一个问题是<strong>我们怎么把 RpcFuture 给到服务调用者，让用户自己添加回调的具体逻辑呢？</strong><br>这里模仿 Dubbo 的方式，抽取了简单的 RpcContext 类，类内有 localCallback 静态变量，这是一个 ThreadLocal 类型的，也就是说，每个线程都会有私有的 ResponseCallback 对象，只要我们在一个线程中 set 和 put 回调函数就解决问题了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcContext</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;ResponseCallback&gt; localCallback = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(ResponseCallback callback)</span> </span>{</span><br><span class="line">        localCallback.set(callback);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseCallback <span class="title">getCallback</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> localCallback.get();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>具体来说，我们来看一个例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RpcAutowired(version = "1.0",isAsync = true)</span></span><br><span class="line"><span class="keyword">private</span> HelloService helloServiceAsync;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">helloServiceAsync.hello(<span class="keyword">new</span> Hello(<span class="string">"hello"</span>, <span class="string">"hello async"</span>));</span><br><span class="line">RpcContext.setCallback(<span class="keyword">new</span> ResponseCallback() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callBack</span><span class="params">(RpcResponse&lt;Object&gt; result)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"----Async--requetId:"</span>+ result.getRequestId()+<span class="string">"--data:"</span>+result.getData());</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(RpcResponse&lt;Object&gt; result, Exception e)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> RpcResponse&lt;Object&gt; <span class="title">sendAsyncRequest</span><span class="params">(Channel channel, RpcFuture resultFuture, RpcMessage rpcMessage)</span> </span>{</span><br><span class="line">    RpcResponse&lt;Object&gt; rpcResponse = <span class="keyword">null</span>;</span><br><span class="line">    String requestId = ((RpcRequest) rpcMessage.getData()).getRequestId();</span><br><span class="line">    ResponseCallback callback = RpcContext.getCallback();</span><br><span class="line">    resultFuture.setResponseCallback(callback);</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        pendingRpcRequests.put(requestId, resultFuture);</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        channel.writeAndFlush(rpcMessage).addListener(<span class="keyword">new</span> ChannelFutureListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> </span>{</span><br><span class="line">                <span class="keyword">if</span> (future.isSuccess()) {</span><br><span class="line">                    log.info(<span class="string">"client send message: [{}]"</span>, rpcMessage);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    future.channel().close();</span><br><span class="line">                    log.error(<span class="string">"Send failed:"</span>, future.cause());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">// 直接返回空的数据体</span></span><br><span class="line">        rpcResponse = RpcResponse.success(<span class="keyword">null</span>, requestId);</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        pendingRpcRequests.remove(requestId);</span><br><span class="line">        log.error(<span class="string">"send request error: "</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"send request error:"</span>, e);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> rpcResponse;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>首先，我们对注解@RpcAutowired 添加了一个 isAsync 字段来标识是否是异步调用</li><li>RpcContext 是一个 ThreadLocal 的临时状态记录器。我们在调用服务时，给线程私有变量添加一个继承自抽象方法 ResponseCallback 的 callback 对象，实现 callback 和 onException 即可。</li><li>在使用 Netty 发送消息时， 获取上下文的 callback 函数 ResponseCallback callback = RpcContext.getCallback(); 并把它添加到这个请求的 rpcFuture 中 resultFuture.setResponseCallback(callback);</li></ul><p>之前我们使用 CompleteFuture 来实现请求和响应的绑定，现在我们自己实现一个 RpcFuture</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcFuture</span> <span class="keyword">implements</span> <span class="title">Future</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> RpcResponse&lt;Object&gt; response;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResponseCallback responseCallback;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RpcFuture</span><span class="params">()</span> </span>{</span><br><span class="line">        countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞获取结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RpcResponse&lt;Object&gt; <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>{</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RpcResponse&lt;Object&gt; <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>{</span><br><span class="line">        <span class="keyword">if</span> (countDownLatch.await(timeout, unit)) {</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(RpcResponse&lt;Object&gt; response)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.response = response;</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">        <span class="keyword">if</span>(responseCallback!=<span class="keyword">null</span>){</span><br><span class="line">            responseCallback.success(response);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponseCallback</span><span class="params">(ResponseCallback responseCallback)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.responseCallback = responseCallback;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里我们使用 countDownLatch 来实现 completFuture 的 get 阻塞调用<br>同时，在 complete 方法中实现了异步调用的逻辑</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseCallback</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">(RpcResponse&lt;Object&gt; response)</span> </span>{</span><br><span class="line">        AsyncCallBackExecutor.execute(() -&gt; {</span><br><span class="line">            log.debug(<span class="string">"AsyncReceiveHandler success context:{} response:{}"</span>, response);</span><br><span class="line">            <span class="keyword">if</span> (response.getCode() == RpcResponseCodeEnum.SUCCESS.getCode()) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    callBack(response);</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    onException(response, e);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                onException(response, <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE));</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写此方法，添加异步接收到结果之后的业务逻辑</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">callBack</span><span class="params">(RpcResponse&lt;Object&gt; result)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写此方法，可以在callBack中自行处理业务处理异常，也可以重写此方法兜底处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(RpcResponse&lt;Object&gt; result, Exception e)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>AsyncCallBackExecutor 是一个处理异步调用的线程池</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCallBackExecutor</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> worker = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorHolder</span> </span>{</span><br><span class="line">        <span class="keyword">static</span> {</span><br><span class="line">            log.info(<span class="string">"call back executor work count is "</span> + worker);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadPoolExecutor callBackExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                worker, worker, <span class="number">2000L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(),</span><br><span class="line">                ThreadPoolFactoryUtil.createThreadFactory(<span class="string">"XRPC-Client-AsyncCallBackExecutor"</span>, <span class="keyword">false</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>{</span><br><span class="line">        ThreadPoolExecutorHolder.callBackExecutor.execute(runnable);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>整体流程图如下<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651643941142-b1ffeaaa-7a5e-4869-b0c8-1d2cfdc01a19.png#clientId=uda93bd95-47ad-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uaae20dcc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1648&amp;originWidth=3712&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=702101&amp;status=done&amp;style=none&amp;taskId=u01c6cf5a-61b2-4fa7-baa5-335423dca46&amp;title=" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、服务注册与发现</title>
      <link href="/2022/05/12/yuque/san-fu-wu-zhu-ce-yu-fa-xian/"/>
      <url>/2022/05/12/yuque/san-fu-wu-zhu-ce-yu-fa-xian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>客户端在调用远程服务时，怎么知道服务端是否有要调用的服务呢，如果有，服务端的地址是什么呢？<br>因此，在 RPC 框架中，服务注册与发现是非常重要的一个部分。在 Provider 也就是服务端启动时，需要将自己的 IP 地址和 RPC 接口写到配置表中；Consumer 也就是客户端在请求远程服务时，会获取该服务的 IP 地址。这个配置表就叫做<strong>注册中心</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651118558445-f03c704c-04ca-4017-975c-0e09b046ad70.png#clientId=u751c5a9d-f8ad-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u61ac2caa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1128&amp;originWidth=2272&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=240388&amp;status=done&amp;style=none&amp;taskId=u4a7bb34d-0c76-4977-bab7-99130d1e0e0&amp;title=" alt="image.png"></p><h2 id="注册中心的要求"><a href="#注册中心的要求" class="headerlink" title="注册中心的要求"></a>注册中心的要求</h2><p><strong>1. 存储</strong><br>可以简单地将注册中心理解为一个存储系统，存储着服务与服务提供方的映射表。一般注册中心对存储没有太多特别的要求，甚至夸张一点，你可以基于数据库来实现一个注册中心。<br><strong>2. 高可用</strong><br>注册中心一旦挂掉，Consumer 将无法获取 Provider 的地址，整个微服务将无法运转。因此<br>当然 Consumer 可以添加本地缓存，从某种角度上看，是允许注册中心短暂挂掉的。<br><strong>3. 健康检查</strong><br>Provider 向注册中心注册服务之后，注册中心需要定时向 Provider 发起健康检查，当 Provider 宕机的时候，注册中心能更快发现 ，从而将宕机的 Provider 从注册表中移除。<br>这特性数据库、Redis 都不具有，因此他们不适合做注册中心。<br><strong>4. 监听状态</strong><br>当服务增加、减少 Provider 的时候，注册中心除了能及时更新，还要能主动通知 Consumer，以便 Consumer 能快速更新本地缓存，减少错误请求的次数。<br>这一特性同样数据库、Redis 都不具有。<br>目前主流的注册中心有：Zookeeper、Eureka、Nacos、Consul 等。</p><h2 id="一致性协议（CAP）"><a href="#一致性协议（CAP）" class="headerlink" title="一致性协议（CAP）"></a>一致性协议（CAP）</h2><p>CAP 即：</p><ul><li>Consistency（一致性）对于不同节点的请求，要么给出包含最新的修改响应、要么给出一个出错响应。</li><li>Availability（可用性）对于每个请求都会给出一个非错响应，有可能是旧数据</li><li>Partition tolerance（分区容忍性）系统中节点间出现<em>网络分区</em>时，系统仍然能够正常响应请求。</li></ul><p>这三个性质对应了分布式系统的三个指标：<br>而 CAP 理论说的就是：一个分布式系统，不可能同时做到这三点。这是因为在分布式系统总，网络故障和节点宕机是常态，因此<strong>网络分区</strong>是一定会出现的</p><h2 id="注册中心实现的差异"><a href="#注册中心实现的差异" class="headerlink" title="注册中心实现的差异"></a>注册中心实现的差异</h2><p>Spring Cloud 有四个注册中心：Eureka、Zookeeper、Nacos 以及 Consul。注册中心必需的功能，肯定要有服务注册、服务发现、健康检查、集群节点间的心跳机制等等，集群架构要么是平级结构、要么是主从结构。节点之间必须考虑服务的数据信息同步，而一旦是主从结构，就必须考虑主节点 leader 的选举等等功能。这几种注册中心的比较如下</p><table><thead><tr><th><strong>比较项</strong></th><th>*<em>Eureka *</em></th><th>*<em>zookeeper *</em></th><th>*<em>Nacos *</em></th><th><strong>Consul</strong></th></tr></thead><tbody><tr><td>集群结构</td><td>平级</td><td>主从</td><td>支持平级和主从</td><td>主从</td></tr><tr><td>集群角色</td><td>主人</td><td>Leader、follower observer</td><td>leader、follower、candidate</td><td>server-leader、server 以及 client</td></tr><tr><td>是否可以及时知道服务状态变化</td><td>不能及时知道</td><td>会及时知道</td><td>不能及时知道</td><td>不能及时知道</td></tr><tr><td>一致性协议（<strong>CAP）</strong></td><td>注重可用性（AP）</td><td>注重一致性(CP)</td><td>支持 CP 和 AP-如何实现</td><td>注重一致性(CP)</td></tr><tr><td>雪崩保护</td><td>有</td><td>没有</td><td>有</td><td>没有</td></tr><tr><td>社区是否活跃</td><td>Eureka2.0 不再维护了</td><td>持续维护</td><td>持续维护</td><td>持续维护</td></tr><tr><td>管理端</td><td>有现成的 eureka 管理端</td><td>没有现成的管理端</td><td>有现成的管理端</td><td>有现成的管理端</td></tr><tr><td>负载均衡策略</td><td>使用 ribbon 实现</td><td>一般可以直接采用 RPC 的负载均衡</td><td>权重/metadata/Selector</td><td>Fabio</td></tr><tr><td>权限控制</td><td>无</td><td>使用 ACL 实现节点权限控制</td><td>RBAC-用户、角色、权限</td><td>ACL</td></tr><tr><td>Spring Cloud 集成</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>健康检查</td><td>Client Beat</td><td>Keep Alive</td><td>TCP/HTTP/MYSQL/Client Beat</td><td>TCP/HTTP/gRPC/Cmd</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>访问协议</td><td>HTTP</td><td>TCP</td><td>HTTP/DNS</td><td>HTTP/DNS</td></tr><tr><td>是否可用作配置中心</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>多数据中心</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>跨注册中心同步</td><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>Dubbo 集成</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>K8S 集成</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>下面主要用 dubbo 支持的 zookeeper 和 Nacos 两种注册中心进行学习</p><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><p>ZooKeeper 提供的名称空间与标准文件系统的名称空间非常相似。各个节点名称是由斜杠（/）分隔的一系列路径元素。ZooKeeper 命名空间中的每个 znode 节点都由路径标识。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/1164521/1651496054525-b742e286-a402-47c2-88b8-c20076a1c170.jpeg#clientId=ud4cc99df-ee39-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u52259d48&amp;margin=%5Bobject%20Object%5D&amp;originHeight=253&amp;originWidth=442&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ub351cc84-e664-4da2-a917-a46a1deee65&amp;title=" alt=""><br>就像拥有一个文件系统一样，该文件系统也允许文件成为目录。<br>需要注意的是：ZooKeeper 旨在存储协调数据：状态信息，配置，位置信息等，因此每个节点上存储的数据通常很小，在字节到千字节范围内。</p><h3 id="Znode-节点"><a href="#Znode-节点" class="headerlink" title="Znode 节点"></a>Znode 节点</h3><ul><li>持久节点：一旦创建，除非主动移除，否则会一直保存在 ZooKeeper。</li><li>临时节点：生命周期和客户端会话绑定，会话失效，相关的临时节点被移除。</li><li>持久顺序性：同时具备顺序性。</li><li>临时顺序性：同时具备顺序性。</li></ul><p>Znodes 维护一个统计数据结构，其中包括用于数据更改，ACL 更改和时间戳的版本号，以允许进行缓存验证和协调更新。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651496235842-c88adda5-4b13-4860-b3b2-ad93dcd4a6e6.png#clientId=ud4cc99df-ee39-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf53d6bda&amp;margin=%5Bobject%20Object%5D&amp;originHeight=420&amp;originWidth=533&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uf04359a3-1c99-4c29-a961-63d5bf2e545&amp;title=" alt=""><br><strong>ACL(Access Control List)：</strong><br>记录 Znode 的访问权限列表，也就是说存储了哪些人可以访问本节点。<br><strong>stat：</strong><br>包含 Znode 的各种元数据，比如事务 ID、版本号、时间戳、大小等等。<br><strong>child：</strong><br>当前节点的子节点引用，类似于二叉树的孩子节点，当然不止我画的这么两个孩子节点。</p><h3 id="watch-特性"><a href="#watch-特性" class="headerlink" title="watch 特性"></a>watch 特性</h3><p>zookeeper 的这种 watch 机制能够使得客户端能够实时感知到 zk 上它所需要调用的那个服务实例的新增、删除以及更新等操作，从而进行相应的服务熔断、回退后续等处理。当客户端调用了任何一种获取数据（包含 getData()，getChildren()和 exist()）的操作，并将监听事件参数 watch 设置为 true，则当这个 Znode 发生改变，zookeeper 服务端就会发送变化通知到这个请求监听的的客户端。</p><h3 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h3><p>主从结构的，具体来说是一主多从结构，就是有一个 leader，多个 follower，以及只负责读操作、不参与选举的 observer<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651494376046-67714b7e-24c2-4112-8693-91606021e7d1.png#clientId=ud4cc99df-ee39-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=CEWeZ&amp;margin=%5Bobject%20Object%5D&amp;originHeight=360&amp;originWidth=743&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ub14edd0c-65c6-408c-91c3-f9e359f04b5&amp;title=" alt=""></p><h3 id="ZAB-协议保证一致性"><a href="#ZAB-协议保证一致性" class="headerlink" title="ZAB 协议保证一致性"></a>ZAB 协议保证一致性</h3><p>ZAB 有两种基本模式：崩溃恢复和广播模式<br><strong>崩溃恢复：</strong><br>集群架构中是有一个 Leader 的，但是这个 leader 万一因为网络故障挂掉就会从 Follower 中投票选举一个新的 leader。当选举产生了新的 Leader，同时集群中有过半的机器与该 Leader 服务器完成了状态同步（即数据同步）之后，Zab 协议就会退出崩溃恢复模式，进入消息广播模式。</p><p><strong>广播模式：</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651497452486-54e6db95-9b11-48c6-ac67-dbdc5e6fbdd1.png#clientId=ud4cc99df-ee39-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u460db5af&amp;margin=%5Bobject%20Object%5D&amp;originHeight=542&amp;originWidth=820&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u77e69ba1-dba8-4f60-b1e1-af3df09186c&amp;title=" alt=""><br>1）所有的事务请求必须由一个全局唯一的 leader 服务器来协调处理，leader 接收到写入数据请求（客户端发出写入数据请求给任意 Follower，Follower 将写入数据请求转发给 Leader）<br>2）进入广播提议的发起<br>3）转换成一个 事务 Proposal，并将该 Proposal 分发给集群中所有的 Follower 服务器，也就是向所有 Follower 节点发送数据广播请求<br>4）Follower 接到 Propose 消息，写入日志成功<br>5）返回 ACK 消息给 Leader<br>6）Leader 接到半数以上 ACK 消息，返回成功给客户端，并且广播 Commit 请求给 Follower；<br>7）follower 接收到消息，则提交事务。</p><h3 id="XRPC-中的实现"><a href="#XRPC-中的实现" class="headerlink" title="XRPC 中的实现"></a>XRPC 中的实现</h3><p><strong>注册中心工厂，用于获取注册中心</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI(value = "zookeeper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterFactory</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取注册中心</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 注册中心的地址。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果协议类型跟注册中心匹配上了，返回对应的配置中心实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Register <span class="title">getRegister</span><span class="params">(String address)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>注册中心的接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Register</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">registerServiceMap</span><span class="params">(Map&lt;String, Object&gt; serviceMap, InetSocketAddress serverAddress)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (String rpcServiceName : serviceMap.keySet()) {</span><br><span class="line">            registerService(rpcServiceName, serverAddress);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向注册中心注册服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String rpcServiceName, InetSocketAddress inetSocketAddress)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消所有本机的服务，用于关机的时候</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterAllMyService</span><span class="params">(InetSocketAddress inetSocketAddress)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  查找含有某个服务的所有服务端地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lookupService</span><span class="params">(String serviceKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  关闭注册中心</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>zookeeper 注册工厂</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkRegistryFactory</span> <span class="keyword">implements</span> <span class="title">RegisterFactory</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, ZkRegister&gt; cache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Register <span class="title">getRegister</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (cache.containsKey(address)) {</span><br><span class="line">            <span class="keyword">return</span> cache.get(address);</span><br><span class="line">        }</span><br><span class="line">        ZkRegister zkRegister = <span class="keyword">new</span> ZkRegister(address);</span><br><span class="line">        cache.putIfAbsent(address, zkRegister);</span><br><span class="line">        <span class="keyword">return</span> cache.get(address);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>zookeeper 注册中心功能实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkRegister</span> <span class="keyword">implements</span> <span class="title">Register</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> CuratorFramework zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZkRegister</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.zkClient = CuratorUtils.getZkClient(address);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String rpcServiceName, InetSocketAddress inetSocketAddress)</span> </span>{</span><br><span class="line">        String servicePath = CuratorUtils.ZK_REGISTER_ROOT_PATH + <span class="string">"/"</span> + rpcServiceName + inetSocketAddress.toString();</span><br><span class="line">        CuratorUtils.createPersistentNode(zkClient, servicePath);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterAllMyService</span><span class="params">(InetSocketAddress inetSocketAddress)</span> </span>{</span><br><span class="line">        CuratorUtils.clearRegistry(zkClient, inetSocketAddress);</span><br><span class="line">        zkClient.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lookupService</span><span class="params">(String serviceKey)</span> </span>{</span><br><span class="line">        <span class="comment">// 从注册中心 拿到该rpcService下的所有server的Address</span></span><br><span class="line">        List&lt;String&gt; serviceUrlList = CuratorUtils.getChildrenNodes(zkClient, serviceKey);</span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isEmpty(serviceUrlList)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_CAN_NOT_BE_FOUND, serviceKey);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> serviceUrlList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.zkClient.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>从注册中心拿到调用接口的服务地址时，还会走一层<strong>本地缓存</strong>，当注册中心挂的时候，本地还可以使用缓存中的数据。Zookeeper 还有一个很强的功能：<strong>监听。</strong>当监听的路径发生状态变化时，会全量更新对应的服务的本地缓存 SERVICE_ADDRESS_MAP</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CuratorUtils</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASE_SLEEP_TIME = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RETRIES = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZK_REGISTER_ROOT_PATH = <span class="string">"/xrpc"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, List&lt;String&gt;&gt; SERVICE_ADDRESS_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; REGISTERED_PATH_SET = ConcurrentHashMap.newKeySet();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CuratorFramework zkClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CuratorUtils</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create persistent nodes. Unlike temporary nodes, persistent nodes are not removed when the client disconnects</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path node path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createPersistentNode</span><span class="params">(CuratorFramework zkClient, String path)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">if</span> (REGISTERED_PATH_SET.contains(path) || zkClient.checkExists().forPath(path) != <span class="keyword">null</span>) {</span><br><span class="line">                log.info(<span class="string">"The node already exists. The node is:[{}]"</span>, path);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                zkClient.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path);</span><br><span class="line">                log.info(<span class="string">"The node was created successfully. The node is:[{}]"</span>, path);</span><br><span class="line">            }</span><br><span class="line">            REGISTERED_PATH_SET.add(path);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">"create persistent node for path [{}] fail"</span>, path);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the children under a node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> All child nodes under the specified node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getChildrenNodes</span><span class="params">(CuratorFramework zkClient, String rpcServiceName)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (SERVICE_ADDRESS_MAP.containsKey(rpcServiceName)) {</span><br><span class="line">            <span class="keyword">return</span> SERVICE_ADDRESS_MAP.get(rpcServiceName);</span><br><span class="line">        }</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">null</span>;</span><br><span class="line">        String servicePath = ZK_REGISTER_ROOT_PATH + <span class="string">"/"</span> + rpcServiceName;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            result = zkClient.getChildren().forPath(servicePath);</span><br><span class="line">            SERVICE_ADDRESS_MAP.put(rpcServiceName, result);</span><br><span class="line">            registerWatcher(rpcServiceName, zkClient);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(<span class="string">"get children nodes for path [{}] fail"</span>, servicePath);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Empty the registry of data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearRegistry</span><span class="params">(CuratorFramework zkClient, InetSocketAddress inetSocketAddress)</span> </span>{</span><br><span class="line">        REGISTERED_PATH_SET.stream().parallel().forEach(p -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (p.endsWith(inetSocketAddress.toString())) {</span><br><span class="line">                    zkClient.delete().forPath(p);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                log.error(<span class="string">"clear registry for path [{}] fail"</span>, p);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        log.info(<span class="string">"All registered services on the server are cleared:[{}]"</span>, REGISTERED_PATH_SET.toString());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CuratorFramework <span class="title">getZkClient</span><span class="params">(String zookeeperAddress)</span> </span>{</span><br><span class="line">        <span class="comment">// if zkClient has been started, return directly</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient != <span class="keyword">null</span> &amp;&amp; zkClient.getState() == CuratorFrameworkState.STARTED) {</span><br><span class="line">            <span class="keyword">return</span> zkClient;</span><br><span class="line">        }</span><br><span class="line">        buildZkClient(zookeeperAddress);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// wait 30s until connect to the zookeeper</span></span><br><span class="line">            <span class="keyword">if</span> (!zkClient.blockUntilConnected(<span class="number">30</span>, TimeUnit.SECONDS)) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Time out waiting to connect to ZK!"</span>);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> zkClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基于建造者模式的链式调用来创建客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectString 服务器列表，格式host1:port1,host2:port2,...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildZkClient</span><span class="params">(String connectString)</span> </span>{</span><br><span class="line">        zkClient = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(connectString)</span><br><span class="line">                .retryPolicy(<span class="keyword">new</span> ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES))</span><br><span class="line">                .build();</span><br><span class="line">        zkClient.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Registers to listen for changes to the specified node</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWatcher</span><span class="params">(String rpcServiceName, CuratorFramework zkClient)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        String servicePath = ZK_REGISTER_ROOT_PATH + <span class="string">"/"</span> + rpcServiceName;</span><br><span class="line">        PathChildrenCache pathChildrenCache = <span class="keyword">new</span> PathChildrenCache(zkClient, servicePath, <span class="keyword">true</span>);</span><br><span class="line">        PathChildrenCacheListener pathChildrenCacheListener = (curatorFramework, pathChildrenCacheEvent) -&gt; {</span><br><span class="line">            List&lt;String&gt; serviceAddresses = curatorFramework.getChildren().forPath(servicePath);</span><br><span class="line">            SERVICE_ADDRESS_MAP.put(rpcServiceName, serviceAddresses);</span><br><span class="line">        };</span><br><span class="line">        pathChildrenCache.getListenable().addListener(pathChildrenCacheListener);</span><br><span class="line">        pathChildrenCache.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosRegister</span> <span class="keyword">implements</span> <span class="title">Register</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NacosRegister</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.namingService = NacosUtils.getNacosClient(address);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerService</span><span class="params">(String rpcServiceName, InetSocketAddress inetSocketAddress)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            NacosUtils.registerInstance(namingService, rpcServiceName, inetSocketAddress);</span><br><span class="line">        } <span class="keyword">catch</span> (NacosException e) {</span><br><span class="line">            log.error(<span class="string">"register service [{}] fail"</span>, rpcServiceName, e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterAllMyService</span><span class="params">(InetSocketAddress inetSocketAddress)</span> </span>{</span><br><span class="line">        NacosUtils.clearRegistry(namingService, inetSocketAddress);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lookupService</span><span class="params">(String serviceKey)</span> </span>{</span><br><span class="line">        <span class="comment">// 从注册中心 拿到该rpcService下的所有server的Address</span></span><br><span class="line">        List&lt;String&gt; serviceUrlList = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            serviceUrlList = NacosUtils.getAllInstance(namingService, serviceKey);</span><br><span class="line">        } <span class="keyword">catch</span> (NacosException e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_CAN_NOT_BE_FOUND, serviceKey);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceUrlList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        namingService=<span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosUtils</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, List&lt;String&gt;&gt; SERVICE_ADDRESS_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;String&gt; REGISTERED_PATH_SET = ConcurrentHashMap.newKeySet();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NamingService namingService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NamingService <span class="title">getNacosClient</span><span class="params">(String address)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            namingService = NamingFactory.createNamingService(address);</span><br><span class="line">        } <span class="keyword">catch</span> (NacosException e) {</span><br><span class="line">            log.error(<span class="string">"connect to nacos [{}] fail"</span>, address);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> namingService;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据服务名称和地址注册服务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcServiceName 服务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address        服务地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerInstance</span><span class="params">(NamingService namingService, String rpcServiceName, InetSocketAddress address)</span> <span class="keyword">throws</span> NacosException </span>{</span><br><span class="line">        namingService.registerInstance(rpcServiceName, address.getHostName(), address.getPort());</span><br><span class="line">        REGISTERED_PATH_SET.add(rpcServiceName);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根绝服务名称获取服务的所有实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceName 服务名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 服务实例集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NacosException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getAllInstance</span><span class="params">(NamingService namingService, String serviceName)</span> <span class="keyword">throws</span> NacosException </span>{</span><br><span class="line">        <span class="keyword">if</span> (SERVICE_ADDRESS_MAP.containsKey(serviceName)) {</span><br><span class="line">            <span class="keyword">return</span> SERVICE_ADDRESS_MAP.get(serviceName);</span><br><span class="line">        }</span><br><span class="line">        List&lt;Instance&gt; allInstances = namingService.getAllInstances(serviceName);</span><br><span class="line">        List&lt;String&gt; addressList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Instance instance : allInstances) {</span><br><span class="line">            addressList.add(instance.getIp() + <span class="string">":"</span> + instance.getPort());</span><br><span class="line">        }</span><br><span class="line">        SERVICE_ADDRESS_MAP.put(serviceName, addressList);</span><br><span class="line">        registerWatcher(namingService, serviceName);</span><br><span class="line">        <span class="keyword">return</span> addressList;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据服务地址清理 Nacos</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 服务地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearRegistry</span><span class="params">(NamingService namingService, InetSocketAddress address)</span> </span>{</span><br><span class="line">        String host = address.getHostName();</span><br><span class="line">        <span class="keyword">int</span> port = address.getPort();</span><br><span class="line">        REGISTERED_PATH_SET.stream().parallel().forEach(serviceName -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                namingService.deregisterInstance(serviceName, host, port);</span><br><span class="line">            } <span class="keyword">catch</span> (NacosException e) {</span><br><span class="line">                log.error(<span class="string">"clear registry for service [{}] fail"</span>, serviceName, e);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        log.info(<span class="string">"All registered services on the server are cleared:[{}]"</span>, REGISTERED_PATH_SET.toString());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听服务，更改时刷缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerWatcher</span><span class="params">(NamingService namingService, String serviceName)</span> </span>{</span><br><span class="line">        namingService.subscribe(serviceName, <span class="keyword">new</span> EventListener() {</span><br><span class="line">            <span class="meta">@SneakyThrows</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Event event)</span> </span>{</span><br><span class="line">                List&lt;Instance&gt; allInstances = namingService.getAllInstances(serviceName);</span><br><span class="line">                List&lt;String&gt; addressList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (Instance instance : allInstances) {</span><br><span class="line">                    addressList.add(instance.getIp() + <span class="string">":"</span> + instance.getPort());</span><br><span class="line">                }</span><br><span class="line">                SERVICE_ADDRESS_MAP.put(serviceName, addressList);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、网络传输高效序列化协议与实现</title>
      <link href="/2022/05/12/yuque/er-wang-luo-chuan-shu-gao-xiao-xu-lie-hua-xie-yi-yu-shi-xian/"/>
      <url>/2022/05/12/yuque/er-wang-luo-chuan-shu-gao-xiao-xu-lie-hua-xie-yi-yu-shi-xian/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RPC 需要将对象序列化成二进制数据，写入本地 Socket 中，然后被网卡发送到网络设备中进行网络传输，序列化的速度以及序列化后的数据大小非常影响网络通信的效率，这里，我们实现了多中序列化的方法，并通过 SPI 实现自定义拓展。</p><blockquote><p>对象是不能直接在网络中传输，我们需要提前把它转成可传输的二进制，并要求转换算法是可逆的，这个过程我们一般叫做“序列化”。<br>服务提供方就可以正确的从二进制数据中分割出不同的请求，同时根据请求类型和序列化类型，把二进制消息逆向还原成请求对象，称之为”反序列化“。</p></blockquote><h2 id="序列化要素"><a href="#序列化要素" class="headerlink" title="序列化要素"></a>序列化要素</h2><ul><li><strong>解析效率</strong>：序列化协议应该首要考虑的因素，像 xml/json 解析起来比较耗时，需要解析 doom 树，二进制自定义协议解析起来效率要快很多。</li><li><strong>压缩率</strong>：同样一个对象，xml/json 传输起来有大量的标签冗余信息，信息有效性低，二进制自定义协议占用的空间相对来说会小很多。</li><li><strong>扩展性与兼容性</strong>：是否能够利于信息的扩展，并且增加字段后旧版客户端是否需要强制升级，这都是需要考虑的问题，在自定义二进制协议时候，要做好充分考虑设计。</li><li><strong>可读性与可调试性</strong>：xml/json 的可读性会比二进制协议好很多，并且通过网络抓包是可以直接读取，二进制则需要反序列化才能查看其内容。</li><li><strong>跨语言</strong>：有些序列化协议是与开发语言紧密相关的，例如 dubbo 的 Hessian 序列化协议就只能支持 Java 的 RPC 调用。</li><li><strong>通用性</strong>：xml/json 非常通用，都有很好的第三方解析库，各个语言解析起来都十分方便，二进制数据的处理方面也有 Protobuf 和 Hessian 等插件，在做设计的时候尽量做到较好的通用性。</li></ul><h2 id="序列化算法"><a href="#序列化算法" class="headerlink" title="序列化算法"></a>序列化算法</h2><p>最简单的一种就是直接实现 JDK 自带的序列化接口 Serializable 就可以了，但是这种方式不支持跨语言调用，而且性能比较低。现在常用的序列化协议有 hessian，kyro，protostuff。另外 JSON 和 XML 这种文本类序列化方式，可读性比较好，但是性能也比较差。</p><h3 id="JDK-序列化"><a href="#JDK-序列化" class="headerlink" title="JDK 序列化"></a>JDK 序列化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcRequest</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="keyword">private</span> String interfaceName;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里的 serialVersionUID 是我们指定的序列化数据的版本，当对这个类的对象进行序列化操作的时候，serialVersionUID 会被写入到二进制序列中，当反序列化的时候会检查这个二进制序列的 serialVersionUID 是否和当前类的 serialVersionUID 相同，如果相同才会正常进行，否则就会抛出 InvalidClassException 异常。一般我们会手动指定 serialVersionUID，如果没有手动指定，编译器会自动生成默认的 serialVersionUID。如果想把一个 Java 对象变为 byte[]数组，需要使用 ObjectOutputStream。它负责把一个 Java 对象写入一个字节流<br>缺点：</p><ol><li>不支持跨语言调用，其他语言无法使用</li><li>相比其他序列化框架封装的序列化功能性能较低，主要原因是序列化后的字节数组体积较大，传输成本高。</li></ol><h3 id="Kryo"><a href="#Kryo" class="headerlink" title="Kryo"></a>Kryo</h3><p>Kryo 是一个高性能的序列化/反序列化工具，由于其变长存储的特性，并且使用了字节码生成机制(底部使用了 ASM 库)，拥有较高的运行速度和较小的字节码体积。Kryo 作为一个成熟的序列化工具，在 Twitter，Groupon，Yahoo 等多个著名开源项目中都有广泛使用. 号称 Java 中最快的序列化框架<br>优点：接口易用、解析快、体积小<br>缺点：只支持 Java、增删字段会异常</p><h3 id="Hessian2"><a href="#Hessian2" class="headerlink" title="Hessian2"></a>Hessian2</h3><p>Hessian 是动态类型、二进制、紧凑的，并且可跨语言移植的一种序列化框架。Hessian 协议要比 JDK、JSON 更加紧凑，性能上要币 JDK、JSON 序列化高很多，而且序列化的字节数也要更小。有非常好的兼容性和稳定性，所以 Hessian 更加适合作为 RPC 框架远程通信的序列化协议。<br>但是 Hessian 本身也有问题，比如：</p><ul><li>Linked 系列，LinkedHashMap、LinkedHashSet 等，但是可以通过扩展 CollectionDeserializer 类修复</li><li>Locale 类，可以通过扩展 ContextSerializerFactory 类修复</li><li>Byte/Short 反序列化的时候编程 Integer</li></ul><h3 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h3><p>Protobuf 是 Google 内部的混合语言数据标准，是一种轻便、高效的结构化数据存储格式，可以用于结构化数据序列化，支持 Java、Python、C ++、Go 等语言。 Protobuf 使用时需要定义 IDL，使用不同语言的 IDL 编译器，生成序列化工具类<br>优点：</p><ul><li>序列化后体积相比 JSON 、Hessian 之类的小很多</li><li>IDL 能清晰地描述语义，保证应用程序之间的类型不会丢失，无需类似 XML 解析器</li><li>序列化反序列化速度很快，不需要通过反射获取类型</li><li>消息格式升级和兼容性不错，可以做到向后兼容</li></ul><p>但是使用 Protobuf 对于具有反射和动态能力的语言来说使用起来很费劲，可以考虑使用 Protostuff。<br>Protostuff 不需要依赖 IDL 文件，可以直接对 Java 领域对象进行反/序列化操作，在效率上根 Protobuf 差不多，生成的二进制格式和 Protobuf 是完全相同的，可以说是一个 Java 版本的 Protobuf 序列化框架。<br>缺点：</p><ul><li>不支持 null</li><li>Protostuff 不支持单纯的 Map、List 集合对象，需要包在对象里面</li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>JSON 是典型的 key-value 方式，没有数据类型，是一种文本型序列化框架。<br>JSON 序列化的两大问题：</p><ul><li>JSON 进行序列化的额外空间开销比较大，对于数据量大的服务这意味着需要巨大的内存和磁盘开销。</li><li>JSON 没有类型，但像 Java 这种强类型语言，需要通过反射同一解决，性能不太好。</li></ul><p>所以如果 RPC 框架选用 JSON 序列化，服务提供者与服务调用者之间传输的数据量要相对较小，否则将严重影响性能。一般来说 JSON 用在 HTTP 中多一些，因为具有较好的可读性。</p><blockquote><ul><li>FastJson 是阿里开源的 JSON 解析库。正如其名，“快”是其主要卖点。从官方的测试结果来看，FastJson 确实是最快的，比 Jackson 快 20% 左右，但是近几年 FastJson 的安全漏洞比较多，而且版本升级可能会存在较大的兼容问题，所以在选择的时候，还是需要谨慎一些。</li><li>Jackson 相对 FastJson 的功能比较多，安全漏洞也比较少，社区活跃。虽然性能相对于 Jackson 稍差，但是用着安心。但是其序列化结果的体积比较大，对 RPC 框架来说，还是不大适合的。</li></ul></blockquote><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>摘自美团技术团队文章<a href="https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html">https://tech.meituan.com/2015/02/26/serialization-vs-deserialization.html</a></p><h3 id="解析时间"><a href="#解析时间" class="headerlink" title="解析时间"></a>解析时间</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651490867750-335654fc-1503-405f-9784-2e350358dc60.png#clientId=uc8a72bdf-7bef-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u37385cfa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=430&amp;originWidth=689&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=48316&amp;status=done&amp;style=none&amp;taskId=ubc40b587-49ec-4b26-b254-bf2153340c9&amp;title=" alt="image.png"></p><h3 id="解析空间"><a href="#解析空间" class="headerlink" title="解析空间"></a>解析空间</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651490910251-6408075a-431b-4aba-bdca-bf1753ba2438.png#clientId=uc8a72bdf-7bef-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u33cae1ad&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=430&amp;originWidth=689&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=44276&amp;status=done&amp;style=none&amp;taskId=u42c22f60-799a-41ec-a524-a07e4fb4c78&amp;title=" alt="image.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="定义序列化接口"><a href="#定义序列化接口" class="headerlink" title="定义序列化接口"></a>定义序列化接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SPI</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializer</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function">SerializerTypeEnum <span class="title">getSerializerAlgorithm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] serialize(Object object);</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="keyword">byte</span>[] bytes)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Kyro-序列化"><a href="#Kyro-序列化" class="headerlink" title="Kyro 序列化"></a>Kyro 序列化</h3><p>Kryo 不是线程安全的。每个线程都应该有自己的 Kryo 对象、输入和输出实例。<br>因此在多线程环境中，可以考虑使用 ThreadLocal 或者对象池来保证线程安全性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Because Kryo is not thread safe. So, use ThreadLocal to store Kryo objects</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Kryo&gt; kryoThreadLocal = ThreadLocal.withInitial(() -&gt; {</span><br><span class="line">        Kryo kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line">        kryo.register(RpcResponse.class);</span><br><span class="line">        kryo.register(RpcRequest.class);</span><br><span class="line">        <span class="keyword">return</span> kryo;</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerializerTypeEnum <span class="title">getSerializerAlgorithm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SerializerTypeEnum.KRYO;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object obj) {</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">             Output output = <span class="keyword">new</span> Output(byteArrayOutputStream)) {</span><br><span class="line">            Kryo kryo = kryoThreadLocal.get();</span><br><span class="line">            kryo.writeObject(output, obj);</span><br><span class="line">            kryoThreadLocal.remove();</span><br><span class="line">            <span class="keyword">return</span> output.toBytes();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Kryo Serialization failed"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="keyword">byte</span>[] bytes)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">             Input input = <span class="keyword">new</span> Input(byteArrayInputStream)) {</span><br><span class="line">            Kryo kryo = kryoThreadLocal.get();</span><br><span class="line">            T res = kryo.readObject(input, clazz);</span><br><span class="line">            kryoThreadLocal.remove();</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Kyro Deserialization failed"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Hessian-序列化"><a href="#Hessian-序列化" class="headerlink" title="Hessian 序列化"></a>Hessian 序列化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerializerTypeEnum <span class="title">getSerializerAlgorithm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SerializerTypeEnum.HESSIAN;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) {</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream()) {</span><br><span class="line">            HessianOutput hessianOutput = <span class="keyword">new</span> HessianOutput(byteArrayOutputStream);</span><br><span class="line">            hessianOutput.writeObject(object);</span><br><span class="line">            <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Hessian Serialization failed:"</span>, e.getMessage());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="keyword">byte</span>[] bytes)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> (ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes)) {</span><br><span class="line">            HessianInput hessianInput = <span class="keyword">new</span> HessianInput(byteArrayInputStream);</span><br><span class="line">            Object o = hessianInput.readObject();</span><br><span class="line">            <span class="keyword">return</span> clazz.cast(o);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Hessian Deserialization failed:"</span>, e.getMessage());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Protostuff-序列化"><a href="#Protostuff-序列化" class="headerlink" title="Protostuff 序列化"></a>Protostuff 序列化</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtostuffSerializer</span> <span class="keyword">implements</span> <span class="title">Serializer</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Avoid re applying buffer space every time serialization</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LinkedBuffer BUFFER = LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SerializerTypeEnum <span class="title">getSerializerAlgorithm</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> SerializerTypeEnum.PROTOSTUFF;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object obj) {</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        Schema schema = RuntimeSchema.getSchema(clazz);</span><br><span class="line">        <span class="keyword">byte</span>[] bytes;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            bytes = ProtostuffIOUtil.toByteArray(obj, schema, BUFFER);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            BUFFER.clear();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserialize</span><span class="params">(Class&lt;T&gt; clazz, <span class="keyword">byte</span>[] bytes)</span> </span>{</span><br><span class="line">        Schema&lt;T&gt; schema = RuntimeSchema.getSchema(clazz);</span><br><span class="line">        T obj = schema.newMessage();</span><br><span class="line">        ProtostuffIOUtil.mergeFrom(bytes, obj, schema);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、如何用Netty实现高性能网络通信？</title>
      <link href="/2022/05/12/yuque/yi-ru-he-yong-netty-shi-xian-gao-xing-neng-wang-luo-tong-xin/"/>
      <url>/2022/05/12/yuque/yi-ru-he-yong-netty-shi-xian-gao-xing-neng-wang-luo-tong-xin/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>从零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>既然要调用远程方法，必然需要网络通信，通过网络来传递要调用的目标类信息及相关方法参数，和返回的调用结果。<br>网络传输具体实现可以使用 Socket 、NIO、Netty：</p><ul><li>Socket：Java 中最原始、最基础的网络通信方式。但是 Socket 是阻塞 IO、性能低并且功能单一</li><li>NIO：同步非阻塞的 I/O 模型，Java 原生实现，但是用它来进行网络编程太过繁琐</li><li>Netty：基于 NIO 的 client-server(客户端服务器)框架，设计了一套优秀的 Reactor 反应器模式使用它可以快速简单地开发网络应用程序。极大地简化并简化了 TCP 和 UDP 套接字服务器等网络编程, 并且性能以及安全性等很多方面甚至都要更好。支持多种协议如 FTP，SMTP，HTTP 以及各种二进制和基于文本的传统协议。</li></ul><h2 id="Reactor-反应器模式"><a href="#Reactor-反应器模式" class="headerlink" title="Reactor 反应器模式"></a>Reactor 反应器模式</h2><p>Reactor 就是基于 NIO 中实现多路复用的一种模式，</p><h3 id="单-Reactor-单线程模型"><a href="#单-Reactor-单线程模型" class="headerlink" title="单 Reactor 单线程模型"></a>单 Reactor 单线程模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651239494041-429b359b-3ebf-4043-88f4-d4f043c98ac9.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf1c9ab7e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=479&amp;originWidth=743&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=32668&amp;status=done&amp;style=none&amp;taskId=u8086378d-4da0-45b8-946d-333c8f1a9b0&amp;title=" alt="image.png"></p><ul><li>服务端的 Reactor 是一个线程，该线程会启动事件循环，并使用 Selector 实现 IO 多路复用，通过 acceptor 来获取并注册新的连接</li><li>客户端发起连接请求，Reactor 监听到了这个时间，并分发给对应的 acceptor 去处理，acceptor 负责建立到这个客户端的 SocketChannel，Reactor 使用 Selector 系统调用进行事件监听</li><li>当客户端有 IO 读写事件时，则分发给对应的 handler 进行处理</li></ul><p>单线程 Reactor 模式中，不仅 I/O 操作在该 Reactor 线程上，连非 I/O 的业务操作也在该线程上进行处理了，这可能会大大延迟 I/O 请求的响应。所以我们应该将非 I/O 的业务逻辑操作从 Reactor 线程上卸载，以此来加速 Reactor 线程对 I/O 请求的响应。</p><h3 id="单-Reactor-多线程模型"><a href="#单-Reactor-多线程模型" class="headerlink" title="单 Reactor 多线程模型"></a>单 Reactor 多线程模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651239500254-92694874-1d18-43a8-9501-a4f49aede460.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uc14ceb57&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=459&amp;originWidth=687&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=33868&amp;status=done&amp;style=none&amp;taskId=u4f1f3f5b-4efc-4916-80f5-289f3db5d2f&amp;title=" alt="image.png"><br>与单线程 Reactor 模式不同的是，添加了一个工作者线程池，并将非 I/O 操作从 Reactor 线程中移出转交给工作者线程池来执行。这样能够提高 Reactor 线程的 I/O 响应，不至于因为一些耗时的业务逻辑而延迟对后面 I/O 请求的处理。</p><h3 id="多-Reactor-多线程模型"><a href="#多-Reactor-多线程模型" class="headerlink" title="多 Reactor 多线程模型"></a>多 Reactor 多线程模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651239513042-abc8057a-d22b-41d8-83c7-0cea76d96cb2.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uc09103b5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=479&amp;originWidth=827&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=43560&amp;status=done&amp;style=none&amp;taskId=ueff1da0b-f2bc-4a60-a8a3-874a57218a7&amp;title=" alt="image.png"><br>多 Reactor 线程模式将“接受客户端的连接请求”和“与该客户端的通信”分在了两个 Reactor 线程来完成。mainReactor 完成接收客户端连接请求的操作，它不负责与客户端的通信，而是将建立好的连接转交给 subReactor 线程来完成与客户端的通信，这样一来就不会因为 read()数据量太大而导致后面的客户端连接请求得不到即时处理的情况。并且多 Reactor 线程模式在海量的客户端并发请求的情况下，还可以通过实现 subReactor 线程池来将海量的连接分发给多个 subReactor 线程，在多核的操作系统中这能大大提升应用的负载和吞吐量。</p><h2 id="使用-Netty-来实现-XPRC-服务端"><a href="#使用-Netty-来实现-XPRC-服务端" class="headerlink" title="使用 Netty 来实现 XPRC 服务端"></a>使用 Netty 来实现 XPRC 服务端</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line">    <span class="keyword">private</span> InetSocketAddress serverAddress = getServerAddress();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() {</span><br><span class="line">            DefaultEventExecutorGroup serviceHandlerGroup = <span class="keyword">new</span> DefaultEventExecutorGroup(</span><br><span class="line">                    RuntimeUtil.cpus() * <span class="number">2</span>,</span><br><span class="line">                    ThreadPoolFactoryUtil.createThreadFactory(<span class="string">"service-handler-group"</span>, <span class="keyword">false</span>));</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// 负责服务器通道新连接的IO事件的监听</span></span><br><span class="line">                NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">                <span class="comment">// 负责传输通道的IO事件的处理, 无参数的构造函数默认最大可用的CPU处理器数量 的2倍</span></span><br><span class="line">                NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">                    bootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                            .channel(NioServerSocketChannel.class)</span><br><span class="line">                            <span class="comment">// TCP默认开启了 Nagle 算法，该算法的作用是尽可能的发送大数据快，减少网络传输。TCP_NODELAY 参数的作用就是控制是否启用 Nagle 算法。</span></span><br><span class="line">                            .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                            <span class="comment">// 是否开启 TCP 底层心跳机制</span></span><br><span class="line">                            .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                            <span class="comment">//表示系统用于临时存放已完成三次握手的请求的队列的最大长度,如果连接建立频繁，服务器处理创建新连接较慢，可以适当调大这个参数</span></span><br><span class="line">                            .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                            .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() {</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">                                    <span class="comment">// 心跳,空闲检测</span></span><br><span class="line">                                    ch.pipeline().addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">                                    <span class="comment">// 处理粘包半包</span></span><br><span class="line">                                    ch.pipeline().addLast(<span class="keyword">new</span> Spliter());</span><br><span class="line">                                    ch.pipeline().addLast(<span class="keyword">new</span> RpcDecoder());</span><br><span class="line">                                    ch.pipeline().addLast(<span class="keyword">new</span> RpcEncoder());</span><br><span class="line">                                    ch.pipeline().addLast(serviceHandlerGroup, <span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                                }</span><br><span class="line">                            });</span><br><span class="line">                    <span class="comment">// 绑定端口，同步等待绑定成功</span></span><br><span class="line">                    <span class="comment">//bind操作(对应初始化)是异步的，通过sync改为同步等待初始化的完成，否则立即操作对象(未初始完全)可能会报错</span></span><br><span class="line">                    ChannelFuture f = bootstrap.bind(serverAddress.getAddress(), serverAddress.getPort()).sync();</span><br><span class="line">                    log.info(<span class="string">"Netty Server started on address {}"</span>, serverAddress);</span><br><span class="line">                    <span class="comment">// 不会立即执行 finally，而阻塞在这里，等待服务端监听端口关闭</span></span><br><span class="line">                    f.channel().closeFuture().sync();</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InterruptedException) {</span><br><span class="line">                        log.info(<span class="string">"Rpc server remoting server stop"</span>);</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        log.error(<span class="string">"Rpc server remoting server error"</span>, e);</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        serviceRegistry.unregisterService(serverAddress);</span><br><span class="line">                        workerGroup.shutdownGracefully();</span><br><span class="line">                        bossGroup.shutdownGracefully();</span><br><span class="line">                    } <span class="keyword">catch</span> (Exception ex) {</span><br><span class="line">                        log.error(ex.getMessage(), ex);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// destroy server thread</span></span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span> &amp;&amp; thread.isAlive()) {</span><br><span class="line">            thread.interrupt();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="NioEventLoop"><a href="#NioEventLoop" class="headerlink" title="NioEventLoop"></a>NioEventLoop</h3><p>Netty 的反应器类为：NioEventLoop，首先看到，我们创建了两个 NioEventLoopGroup，第一个通 常被称为“包工头”，负责服务器通道新连接的 IO 事件的监听。第二个 通常被称为“工人”，主要负责传输通道的 IO 事件的处理。具体来说，一种类型的 reactor 线程是 boss 线程组，专门用来接受新的连接，然后封装成 channel 对象扔给 worker 线程组；还有一种类型的 reactor 线程是 worker 线程组，专门用来处理连接的读写。不管是 boos 线程还是 worker 线程，所做的事情均分为以下三个步骤</p><ol><li>轮询注册在 selector 上的 IO 事件</li><li>处理 IO 事件</li><li>执行异步 task</li></ol><p>对于 boos 线程来说，第一步轮询出来的基本都是 accept 事件，表示有新的连接，而 worker 线程轮询出来的基本都是 read/write 事件，表示网络的读写事件。<br><img src="https://cdn.nlark.com/yuque/0/2022/webp/1164521/1651202492097-1e6d73cc-91fb-4dbe-b509-80543853cd2e.webp#clientId=u38b5cafb-8dd3-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u2ca7f28d&amp;margin=%5Bobject%20Object%5D&amp;originHeight=714&amp;originWidth=1304&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ub8c17781-9fb6-43c3-b227-316b201a444&amp;title=" alt=""></p><h3 id="ServerBootstrap-服务启动类"><a href="#ServerBootstrap-服务启动类" class="headerlink" title="ServerBootstrap 服务启动类"></a>ServerBootstrap 服务启动类</h3><p>Bootstrap 类是 Netty 提供的一个便利的工厂类，可以通过它来完成 Netty 的客户端或服务器端的 Netty 组件的组装，以及 Netty 程序的初始 化。当然，Netty 的官方解释是，完全可以不用这个 Bootstrap 启动器。 但是，一点点去手动创建通道、完成各种设置和启动、并且注册到 EventLoop，这个过程会非常麻烦。通常情况下，还是使用这个便利的 Bootstrap 工具类会效率更高。</p><ol><li><strong>创建反应器线程组，并赋值给 ServerBootstrap 启动器实例</strong></li></ol><p>在服务器端，建议设置成两个线程组的工作模式。</p><ol start="2"><li><strong>设置通道的 IO 类型</strong></li></ol><p>Netty 不止支持 Java NIO，也支持阻塞式的 OIO（也叫 BIO，BlockIO，即阻塞式 IO）由于 NIO 的优势巨大，通 常不会在 Netty 中使用 BIO。<br>在 Netty 中，将有接收关系的 NioServerSocketChannel 和 NioSocketChannel，叫作父子通道。其中，NioServerSocketChannel 负 责服务器连接监听和接收，也叫父通道（Parent Channel）。对应于每 一个接收到的 NioSocketChannel 传输类通道，也叫子通道（Child Channel）。服务端使用 b.channel(NioServerSocketChannel.class)来监听</p><ol start="3"><li><strong>设置传输通道的配置选项</strong></li></ol><p>调用了 Bootstrap 的 option()选项设置方法。对于服务器的 Bootstrap 而言，这个方法的作用是：给父通道（Parent Channel）设置一些与传输协议相关的选项。如果要给子通道（Child Channel）设置一些通道选项，则需要调用 childOption()设置方法。具体的 channelOption(): <a href="https://juejin.cn/post/6982470261811445791">https://juejin.cn/post/6982470261811445791</a></p><ol start="4"><li><strong>装配子通道的 Pipeline 流水线</strong></li></ol><p>每一个通道的子通道，都用一条 ChannelPipeline 流水线。它的内部有一个双向的链表。装配流水线的方式是：将业务 处理器 ChannelHandler 实例加入双向链表中。 装配子通道的 Handler 流水线调用 childHandler()方法，传递一个 ChannelInitializer 通道初始化类的实例。<br>在父通道成功接收一个连接， 并创建成功一个子通道后，就会初始化子通道，这里配置的 ChannelInitializer 实例就会被调用。 在 ChannelInitializer 通道初始化类的实例中，有一个 initChannel 初 始化方法，在子通道创建后会被执行到，向子通道流水线增加业务处理器。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(NioSocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">// 心跳,空闲检测</span></span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">        <span class="comment">// 处理粘包半包</span></span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> Spliter());</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> RpcDecoder());</span><br><span class="line">        ch.pipeline().addLast(<span class="keyword">new</span> RpcEncoder());</span><br><span class="line">        ch.pipeline().addLast(serviceHandlerGroup, <span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>为什么仅装配子通道的流水线，而不需要装配父通道的流水线 呢？原因是：父通道也就是 NioServerSocketChannel 连接接受通道，它 的内部业务处理是固定的：接受新连接后，创建子通道，然后初始化 子通道，所以不需要特别的配置。</p><ol start="5"><li><strong>开始绑定服务器新连接的监听端口</strong></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定端口，同步等待绑定成功</span></span><br><span class="line"><span class="comment">//bind操作(对应初始化)是异步的，通过sync改为同步等待初始化的完成，否则立即操作对象(未初始完全)可能会报错</span></span><br><span class="line">ChannelFuture f = bootstrap.bind(serverAddress.getAddress(), serverAddress.getPort()).sync();</span><br><span class="line">log.info(<span class="string">"Netty Server started on address {}"</span>, serverAddress);</span><br></pre></td></tr></tbody></table></figure><p>bootstrap.bind()方法的功能：返回一个端口绑定 Netty 的异 步任务 channelFuture。在这里，并没有给 channelFuture 异步任务增加回 调监听器，而是阻塞 channelFuture 异步任务，直到端口绑定任务执行 完成。</p><ol start="6"><li><strong>自我阻塞，直到通道关闭</strong></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不会立即执行 finally，而阻塞在这里，等待服务端监听端口关闭</span></span><br><span class="line">f.channel().closeFuture().sync();</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li><strong>关闭 EventLoopGroup</strong></li></ol><p>关闭 Reactor 反应器线程组，同时会关闭内部的 subReactor 子反应 器线程，也会关闭内部的 Selector 选择器、内部的轮询线程以及负责查 询的所有的子通道。在子通道关闭后，会释放掉底层的资源，如 TCP Socket 文件描述符等。</p><p>至此，Netty 服务端已搭建完成，其中，最为重要的是装配到<strong>Pipeline 流水线中 handler,下面我们具体介绍。</strong></p><h3 id="Pipline-流水线"><a href="#Pipline-流水线" class="headerlink" title="Pipline 流水线"></a>Pipline 流水线</h3><p>每条通道内部都有一条流水线 pipline 来讲 Handler 装配起来来处理业务。Netty 的业务处理器流水线 ChannelPipeline 是基于*<em>责任链设计模式 *</em>来设计的，内部是一个双向链表结构，能够 支持动态地添加和删除 Handler 业务处理器。<br>Handler 涉及的环节有：数据包解码、业务处理、目标数据编码、数据包写入通道这几个部分，那么他们在 pipline 中的添加顺序是怎样的呢？<br>首先，Handler 有入站和出 站两种类型操作</p><ul><li>入站处理，触发的方向为：自底向上，Netty 的内部（如通道）到 ChannelInboundHandler 入站处理器。</li><li>出站处理，触发的方向为：自顶向下，从 ChannelOutboundHandler 出站处理器到 Netty 的内部（如通道）。</li></ul><p>按照这种方向来分，前面数据包解码、业务处理两个环节——属 于入站处理器的工作；后面目标数据编码、把数据包写到通道中两个 环节——属于出站处理器的工作。<br>入站处理器的流动次序是：从前到后。加在前面的， 执行也在前面；出站流水处理次序为从后向前，最后加入的出 站处理器，反而执行在最前面。这一点和 Inbound 入站处理次序是相反的。<br><strong>需要注意的点</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerA());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerA());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerB());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerB());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> InBoundHandlerC());</span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> OutboundHandlerC());</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651216115227-f9defdc5-886d-44a1-a50e-61e0c61a7966.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u614b5f98&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=724&amp;originWidth=3828&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=191372&amp;status=done&amp;style=none&amp;taskId=ue0472cfa-7581-4cbc-bbd7-2f6ec5502b7&amp;title=" alt="image.png"><br>针对 InBoundHandlerC，处理完消息发送时，</p><ul><li>当调用 ctx.writeAndFlush(new Object())时代表 Object 从当前的 handler 流向 head 节点</li><li>当调用 ctx.channel().writeAndFlush(new Object())时代表 Object 从 tail 节点流向 head 节点。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651216412456-197b6ad3-8008-4654-b305-6d511d1a51f4.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u6c21b4c0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1444&amp;originWidth=3112&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=317106&amp;status=done&amp;style=none&amp;taskId=u222e7442-78c1-4ec5-b014-ce3aaefbff5&amp;title=" alt="image.png"><br>针对 RPC 框架的 Netty Server 的 pipline 来说，执行顺序为<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651226155922-921d33a5-63a7-43cc-955b-5161497538e5.png#clientId=u765db17b-2c3b-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u2502c4fb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=844&amp;originWidth=3168&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=247573&amp;status=done&amp;style=none&amp;taskId=u0076bb5d-9e65-4ff7-b3fa-d4f3fff651e&amp;title=" alt="image.png"></p><h3 id="心跳-空闲检测"><a href="#心跳-空闲检测" class="headerlink" title="心跳-空闲检测"></a>心跳-空闲检测</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/1164521/1651214594531-e9023b15-12cd-4279-9d69-b223ebbf9ee7.webp#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ua0ee798b&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1218&amp;originWidth=1240&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u08fc06b3-877c-4492-a611-6c560c34852&amp;title=" alt=""><br>网络应用程序普遍会出现连接假死，连接假死的现象是：在某一端（服务端或者客户端）看来，底层的 TCP 连接已经断开了，但是应用程序并没有捕获到，因此会认为这条连接仍然是存在的，从 TCP 层面来说，只有收到四次握手数据包或者一个 RST 数据包，连接的状态才表示已断开。<br>连接假死会带来以下两大问题</p><ol><li>对于服务端来说，因为每条连接都会耗费 cpu 和内存资源，大量假死的连接会逐渐耗光服务器的资源，最终导致性能逐渐下降，程序奔溃。</li><li>对于客户端来说，连接假死会造成发送数据超时，影响用户体验。</li></ol><p>通常，连接假死由以下几个原因造成的</p><ol><li>应用程序出现线程堵塞，无法进行数据的读写。</li><li>客户端或者服务端网络相关的设备出现故障，比如网卡，机房故障。</li><li>公网丢包。公网环境相对内网而言，非常容易出现丢包，网络抖动等现象，如果在一段时间内用户接入的网络连续出现丢包现象，那么对客户端来说数据一直发送不出去，而服务端也是一直收不到客户端来的数据，连接就一直耗着。</li></ol><p>我们分别从客户端和服务端来解决这个问题<br><strong>服务端</strong><br>利用 Netty 自带的 IdleStateHandler 实现空闲检测，服务端只需要检测一段时间内，是否收到过客户端发来的数据即可，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IdleStateHandler</span><span class="params">(<span class="keyword">long</span> readerIdleTime, <span class="keyword">long</span> writerIdleTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">long</span> allIdleTime,TimeUnit unit)</span></span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>第一个参数是隔多久检查一下读事件是否发生，如果* channelRead() <em>方法超过 readerIdleTime 时间未被调用则会触发一个</em> READER_IDLE *的 <em>IdleStateEvent</em> 事件；</li><li>第二个参数是隔多久检查一下写事件是否发生，<em>writerIdleTime</em> 写空闲超时时间设定，如果 write() 方法超过 writerIdleTime 时间未被调用则会<em>WRITER_IDLE</em> 的* IdleStateEvent* 事件；</li><li>第三个参数是全能型参数，隔多久检查读写事件；</li><li>第四个参数表示当前的时间单位。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) {</span><br><span class="line">        IdleState state = ((IdleStateEvent) evt).state();</span><br><span class="line">        <span class="keyword">if</span> (state == IdleState.READER_IDLE) {</span><br><span class="line">            log.info(<span class="string">"idle check happen, so close the connection"</span>);</span><br><span class="line">            ctx.close();</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>服务端当 15 秒内没有读到数据（客户端发来的心跳），则出发 userEventTriggered 事件，关闭假死的<br>channel 连接。</p><p><strong>客户端</strong><br>客户端同样添加 IdleStateHandler</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">当<span class="number">5</span>秒内没有主动远程调用，也就是没有写事件发生时候，触发userEventTriggered主动写并发送心跳数据包</span><br><span class="line"> <span class="comment">// 心跳发送</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) {</span><br><span class="line">        IdleState state = ((IdleStateEvent) evt).state();</span><br><span class="line">        <span class="keyword">if</span> (state == IdleState.WRITER_IDLE) {</span><br><span class="line">            log.info(<span class="string">"write idle happen [{}]"</span>, ctx.channel().remoteAddress());</span><br><span class="line">            Channel channel = nettyClient.getChannel((InetSocketAddress) ctx.channel().remoteAddress());</span><br><span class="line">            RpcMessage rpcMessage = <span class="keyword">new</span> RpcMessage();</span><br><span class="line">            rpcMessage.setCodec(SerializerTypeEnum.PROTOSTUFF.getCode());</span><br><span class="line">            rpcMessage.setCompress(CompressTypeEnum.GZIP.getCode());</span><br><span class="line">            rpcMessage.setMessageType(RpcConstants.HEARTBEAT_REQUEST_TYPE);</span><br><span class="line">            rpcMessage.setData(RpcConstants.PING);</span><br><span class="line">            channel.writeAndFlush(rpcMessage).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>###</p><h3 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h3><p>无论是使用 Netty 还是原始的 Socket 编程，基于 TCP 通信的数据包格式均为二进制，协议指的就是客户端与服务端事先商量好的，每一个二进制数据包中每一段字节分别代表什么含义的规则。对于 XRPC 来说，使用了消息头+消息体 的方式制定私有协议。其格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>     <span class="number">4</span>        <span class="number">5</span>     <span class="number">6</span>     <span class="number">7</span>     <span class="number">8</span>    <span class="number">9</span>          <span class="number">10</span>      <span class="number">11</span>     <span class="number">12</span>     <span class="number">13</span>    <span class="number">14</span>   <span class="number">15</span>   <span class="number">16</span></span><br><span class="line">+-----+-----+-----+-----+--------+----+----+----+------+-----------+-------+----- --+-----+-----+----+---+</span><br><span class="line">|   magic   code        |version |      full length    | messageType| codec|compress|    RequestId       |</span><br><span class="line">+-----------------------+--------+---------------------+-----------+-----------+-----------+------------+</span><br><span class="line">|                                                                                                       |</span><br><span class="line">|                                         body                                                          |</span><br><span class="line">|                                                                                                       |</span><br><span class="line">|                                        ... ...                                                        |</span><br><span class="line">+-------------------------------------------------------------------------------------------------------+</span><br><span class="line">4B  magic code（魔法数）</span><br><span class="line">1B version（版本）</span><br><span class="line">4B full length（消息长度）</span><br><span class="line">1B messageType（消息类型）</span><br><span class="line">1B compress（压缩类型）</span><br><span class="line">1B codec（序列化类型）</span><br><span class="line">4B  requestId（请求的Id）</span><br><span class="line">body（object类型数据）</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651231638890-31866612-2803-4951-a68f-d2ce5d0414c1.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uc778bce2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=744&amp;originWidth=4044&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=292662&amp;status=done&amp;style=none&amp;taskId=u852bc693-9d4c-410c-a238-3480158f8a9&amp;title=" alt="image.png"><br><strong>字段解释</strong><br><strong>1. magic（魔数)</strong><br>是通信双方协商的一个暗号，4 个字节，定义在 RpcConstants._MAGIC_NUMBER_。<br>魔数的作用是用于服务端在接收数据时先解析出魔数做正确性对比。如果和协议中的魔数不匹配，则认为是非法数据，可以直接关闭连接或采取其他措施增强系统安全性。<br>注意：这只是一个简单的校验，如果有安全性方面的需求，需要使用其他手段，例如 SSL/TLS。<br>魔数的思想在很多场景中都有体现，如 Java Class 文件开头就存储了魔数 OxCAFEBABE，在 JVM 加载 Class 文件时首先就会验证魔数对的正确性。<br><strong>2. version（版本)</strong><br>为了应对业务需求的变化，可能需要对自定义协议的结构或字段进行改动。不同版本的协议对应的解析方法也是不同的。所以在生产级项目中强烈建议预留协议版本这个字段。<br><strong>3. full length（消息长度)</strong><br>记录了整个消息的长度，这个字段是报文拆包的关键。<br><strong>4. messageType（消息类型)</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  消息类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">byte</span> REQUEST_TYPE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> RESPONSE_TYPE = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">byte</span> HEARTBEAT_REQUEST_TYPE = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">byte</span> HEARTBEAT_RESPONSE_TYPE = <span class="number">4</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>5. compress（压缩类型）</strong><br>序列化的字节流，还可以进行压缩，使得体积更小，在网络传输更快，但是同时会消耗 CPU 资源。<br>如果使用压缩效果好的序列化器，可以考虑不使用压缩</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 伪压缩器，等于不使用压缩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DUMMY((<span class="keyword">byte</span>) <span class="number">0</span>, <span class="string">"dummy"</span>),</span><br><span class="line">GZIP((<span class="keyword">byte</span>) <span class="number">1</span>, <span class="string">"gzip"</span>),</span><br><span class="line">UNZIP((<span class="keyword">byte</span>) <span class="number">2</span>, <span class="string">"unzip"</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>7. serialize（序列化类型）</strong><br>通过这个类型来确定使用哪种序列化方式，将字节流序列化成对应的对象。<br>序列化类型定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HESSIAN((<span class="keyword">byte</span>) <span class="number">1</span>, <span class="string">"hessian"</span>),</span><br><span class="line">KRYO((<span class="keyword">byte</span>) <span class="number">2</span>, <span class="string">"kryo"</span>),</span><br><span class="line">PROTOSTUFF((<span class="keyword">byte</span>) <span class="number">3</span>, <span class="string">"protostuff"</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>8. requestId（请求的 Id）</strong><br>每个请求分配好请求 Id，这样响应数据的时候，才能对的上。使用 4 字节的 int 类型<br><strong>9. body</strong><br>body 里面放具体的数据，通常来说是请求的参数 request、响应的结果 response，再经过序列化、压缩后的字节数组。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcMessage</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rpc message type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> messageType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serialization type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> codec;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compress type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> compress;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> requestId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcRequest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2176648719840392878L</span>;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line">    <span class="keyword">private</span> Object[] parameters;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RpcResponse</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">715745410605631233L</span>;</span><br><span class="line">    <span class="keyword">private</span> String requestId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * response code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * response message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * response body</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="编解码与粘包拆包"><a href="#编解码与粘包拆包" class="headerlink" title="编解码与粘包拆包"></a>编解码与粘包拆包</h3><blockquote><p>TCP/IP 协议，在用户数据量非常小的情况下，极端情况下，一个字节，该 TCP 数据包的有效载荷非常低，传递 100 字节的数据，需要 100 次 TCP 传送，100 次 ACK，在应用及时性要求不高的情况下，将这 100 个有效数据拼接成一个数据包，那会缩短到一个 TCP 数据包，以及一个 ack，有效载荷提高了，带宽也节省了<br>非极端情况，有可能两个数据包拼接成一个数据包，也有可能一个半的数据包拼接成一个数据包，也有可能两个半的数据包拼接成一个数据包<br>拆包和粘包是相对的，一端粘了包，另外一端就需要将粘过的包拆开，举个栗子，发送端将三个数据包粘成两个 TCP 数据包发送到接收端，接收端就需要根据应用协议将两个数据包重新组装成三个数据包，还有一种情况就是用户数据包超过了 mss(最大报文长度)，那么这个数据包在发送的时候必须拆分成几个数据包，接收端收到之后需要将这些数据包粘合起来之后，再拆开</p></blockquote><h4 id="编码-Encode"><a href="#编码-Encode" class="headerlink" title="编码 Encode"></a>编码 Encode</h4><p>编码器相对比较简单，按照协议定义的长度和值进行设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ByteBuf <span class="title">encode</span><span class="params">(RpcMessage rpcMessage, ByteBuf out)</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 4B magic code（魔数）</span></span><br><span class="line">        out.writeBytes(RpcConstants.MAGIC_NUMBER);</span><br><span class="line">        <span class="comment">// 1B version（版本）</span></span><br><span class="line">        out.writeByte(RpcConstants.VERSION);</span><br><span class="line">        <span class="comment">// 4B full length（消息长度）. 先空着，后面填。</span></span><br><span class="line">        out.writerIndex(out.writerIndex() + <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// 1B messageType（消息类型）</span></span><br><span class="line">        <span class="keyword">byte</span> messageType = rpcMessage.getMessageType();</span><br><span class="line">        out.writeByte(messageType);</span><br><span class="line">        <span class="comment">// 1B codec（序列化类型）</span></span><br><span class="line">        out.writeByte(rpcMessage.getCodec());</span><br><span class="line">        <span class="comment">// 1B compress（压缩类型）</span></span><br><span class="line">        out.writeByte(CompressTypeEnum.GZIP.getCode());</span><br><span class="line">        <span class="comment">// 4B requestId（请求的Id）</span></span><br><span class="line">        out.writeInt(rpcMessage.getRequestId());</span><br><span class="line">        <span class="comment">// 写body，并获取数据长度</span></span><br><span class="line">        <span class="keyword">byte</span>[] bodyBytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> fullLength = RpcConstants.HEAD_LENGTH;</span><br><span class="line">        <span class="keyword">if</span> (messageType != RpcConstants.HEARTBEAT_REQUEST_TYPE</span><br><span class="line">                &amp;&amp; messageType != RpcConstants.HEARTBEAT_RESPONSE_TYPE) {</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            String codecName = SerializerTypeEnum.getName(rpcMessage.getCodec());</span><br><span class="line">            log.info(<span class="string">"encode name: [{}] "</span>, codecName);</span><br><span class="line">            Serializer serializer = ExtensionLoader.getExtensionLoader(Serializer.class)</span><br><span class="line">                    .getExtension(codecName);</span><br><span class="line">            bodyBytes = serializer.serialize(rpcMessage.getData());</span><br><span class="line">            <span class="comment">// 压缩</span></span><br><span class="line">            String compressName = CompressTypeEnum.getName(rpcMessage.getCompress());</span><br><span class="line">            Compress compress = ExtensionLoader.getExtensionLoader(Compress.class)</span><br><span class="line">                    .getExtension(compressName);</span><br><span class="line">            bodyBytes = compress.compress(bodyBytes);</span><br><span class="line">            <span class="comment">// 总长度=消息头长度+body</span></span><br><span class="line">            fullLength += bodyBytes.length;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (bodyBytes != <span class="keyword">null</span>) {</span><br><span class="line">            out.writeBytes(bodyBytes);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 记录当前写指针</span></span><br><span class="line">        <span class="keyword">int</span> writeIndex = out.writerIndex();</span><br><span class="line">        <span class="comment">// 写空出的4B full length（消息长度）</span></span><br><span class="line">        out.writerIndex(MAGIC_LENGTH + VERSION_LENGTH);</span><br><span class="line">        out.writeInt(fullLength);</span><br><span class="line">        <span class="comment">// 写指针复原</span></span><br><span class="line">        out.writerIndex(writeIndex);</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        log.error(<span class="string">"Encode request error!"</span>, e);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="解码-decode"><a href="#解码-decode" class="headerlink" title="解码 decode"></a>解码 decode</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ByteBuf 解码为RpcMessage</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(ByteBuf in)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> fullLength = in.readInt();</span><br><span class="line">    <span class="keyword">byte</span> messageType = in.readByte();</span><br><span class="line">    <span class="keyword">byte</span> codecType = in.readByte();</span><br><span class="line">    <span class="keyword">byte</span> compressType = in.readByte();</span><br><span class="line">    <span class="keyword">int</span> requestId = in.readInt();</span><br><span class="line">    RpcMessage rpcMessage = RpcMessage.builder()</span><br><span class="line">            .codec(codecType)</span><br><span class="line">            .requestId(requestId)</span><br><span class="line">            .compress(compressType)</span><br><span class="line">            .messageType(messageType).build();</span><br><span class="line">    <span class="comment">//心跳类型的请求、body 长度 0，不需要decode数据体</span></span><br><span class="line">    <span class="keyword">if</span> (messageType == RpcConstants.HEARTBEAT_REQUEST_TYPE) {</span><br><span class="line">        rpcMessage.setData(RpcConstants.PING);</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (messageType == RpcConstants.HEARTBEAT_RESPONSE_TYPE) {</span><br><span class="line">        rpcMessage.setData(RpcConstants.PONG);</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 获取数据体body的长度</span></span><br><span class="line">    <span class="keyword">int</span> bodyLength = fullLength - RpcConstants.HEAD_LENGTH;</span><br><span class="line">    <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[bodyLength];</span><br><span class="line">    in.readBytes(bs);</span><br><span class="line">    <span class="comment">// 反压缩</span></span><br><span class="line">    String compressName = CompressTypeEnum.getName(compressType);</span><br><span class="line">    Compress compress = ExtensionLoader.getExtensionLoader(Compress.class)</span><br><span class="line">            .getExtension(compressName);</span><br><span class="line">    bs = compress.decompress(bs);</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    String codecName = SerializerTypeEnum.getName(rpcMessage.getCodec());</span><br><span class="line">    Serializer serializer = ExtensionLoader.getExtensionLoader(Serializer.class)</span><br><span class="line">            .getExtension(codecName);</span><br><span class="line">    <span class="comment">// 设置decode后的消息体</span></span><br><span class="line">    Object object = serializer.deserialize(messageTypeMap.get(messageType), bs);</span><br><span class="line">    rpcMessage.setData(object);</span><br><span class="line">    <span class="keyword">return</span> rpcMessage;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Netty-拆包器"><a href="#Netty-拆包器" class="headerlink" title="Netty 拆包器"></a>Netty 拆包器</h4><p>使用最为常用的<strong>基于长度域拆包器 LengthFieldBasedFrameDecoder</strong><br>只要自定义协议中包含长度域字段，均可以使用这个拆包器来实现应用层拆包。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> LengthFieldBasedFrameDecoder(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip);</span><br></pre></td></tr></tbody></table></figure><p>maxFrameLength：指定包的最大长度，如果超过，直接丢弃<br>lengthFieldOffset： 描述长度的字段在第几个字节<br>lengthFieldLength：length 字段本身的长度(几个字节)<br>lengthAdjustment：包的总长度调整，去掉 lengthFieldOffset+lengthFieldLength<br>initialBytesToStrip： 跳过的字节数，之前的几个参数，已经足够识别出整个数据包了。但是很多时候，调用者只关心包的内容，包的头部完全可以丢弃掉，initialBytesToStrip 就是用来告诉 Netty，识别出整个数据包之后，截掉 initialBytesToStrip 之前的数据<br>因此，这里我们的拆包参数为</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> LengthFieldBasedFrameDecoder(RpcConstants.MAX_FRAME_LENGTH, <span class="number">5</span>, <span class="number">4</span>, -<span class="number">9</span>, <span class="number">0</span>);</span><br></pre></td></tr></tbody></table></figure><p>因为我们还需要检测 魔数 和 版本号，所以 initialBytesToStrip=0，不能去除，当 魔数 和 版本号不符合规定时，拒绝非本协议连接。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Spliter</span> <span class="keyword">extends</span> <span class="title">LengthFieldBasedFrameDecoder</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Spliter</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(MAX_FRAME_LENGTH, MAGIC_LENGTH + VERSION_LENGTH, FULL_LENGTH_LENGTH,</span><br><span class="line">                -(MAGIC_LENGTH + VERSION_LENGTH + FULL_LENGTH_LENGTH), <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxFrameLength      指定包的最大长度，如果超过，直接丢弃</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lengthFieldOffset   描述长度的字段在第几个字节</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lengthFieldLength   length 字段本身的长度(几个字节)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lengthAdjustment    包的总长度调整，去掉lengthFieldOffset+lengthFieldLength</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialBytesToStrip 跳过的字节数，识别出整个数据包之后，截掉 initialBytesToStrip之前的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Spliter</span><span class="params">(<span class="keyword">int</span> maxFrameLength, <span class="keyword">int</span> lengthFieldOffset, <span class="keyword">int</span> lengthFieldLength, <span class="keyword">int</span> lengthAdjustment, <span class="keyword">int</span> initialBytesToStrip)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        Object decoded = <span class="keyword">super</span>.decode(ctx, in);</span><br><span class="line">        ByteBuf frame = (ByteBuf) decoded;</span><br><span class="line">        <span class="keyword">if</span> (frame.readableBytes() &gt;= RpcConstants.HEAD_LENGTH) {</span><br><span class="line">            <span class="comment">//拒绝非本协议连接</span></span><br><span class="line">            <span class="keyword">if</span>(!checkMagicNumberAndVersion(in)){</span><br><span class="line">                ctx.channel().close();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取并检查魔数和版本是否符合规定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkMagicNumberAndVersion</span><span class="params">(ByteBuf in)</span> </span>{</span><br><span class="line">        <span class="comment">// 读取魔数</span></span><br><span class="line">        <span class="keyword">int</span> len = RpcConstants.MAGIC_NUMBER.length;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[len];</span><br><span class="line">        in.readBytes(bytes);</span><br><span class="line">        <span class="comment">// 比较魔数是否符合规定，不符合抛出异常</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="keyword">if</span> (bytes[i] != RpcConstants.MAGIC_NUMBER[i]) {</span><br><span class="line">                log.error(<span class="string">"Unknown magic code: "</span> + Arrays.toString(bytes));</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 读取版本号</span></span><br><span class="line">        <span class="keyword">byte</span> version = in.readByte();</span><br><span class="line">        <span class="comment">// 比较版本号是否符合规定，不符合抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (version != RpcConstants.VERSION) {</span><br><span class="line">            log.error(<span class="string">"version isn't compatible"</span> + version);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="服务端业务-Handler"><a href="#服务端业务-Handler" class="headerlink" title="服务端业务 Handler"></a>服务端业务 Handler</h3><p>服务器端需要隔离 EventLoop（Reactor）线程和业务 线程。所以需要使用独立的、异步的线程任务去执行用户验证 的逻辑；而不在 EventLoop 线程中去执行用户验证的逻辑。<br>在默认情况下，Netty 的一个 EventLoop 实例会开启 2 倍 CPU 核数的内部线程。通常情况下，一个 Netty 服务器端会有几万或者 几十万的连接通道。也就是说，一个 EventLoop 内部线程会负责处理着 几万个或者上十万个通道连接的 IO 处理，而耗时的入站/出站处理越 多，就越会拖慢整个线程的其他 IO 处理，最终导致严重的性能问题。<br>因此这里我们是用一个独立的异步任务处理队列去处理业务逻辑。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DefaultEventExecutorGroup serviceHandlerGroup = <span class="keyword">new</span> DefaultEventExecutorGroup(</span><br><span class="line">            RuntimeUtil.getProcessorCount() * <span class="number">2</span>,</span><br><span class="line">            ThreadUtil.newNamedThreadFactory(<span class="string">"service-handler-group"</span>, <span class="keyword">false</span>)</span><br><span class="line">);</span><br><span class="line">ch.pipeline().addLast(serviceHandlerGroup, <span class="keyword">new</span> NettyServerHandler());</span><br></pre></td></tr></tbody></table></figure><p><strong>具体的 handler 业务逻辑</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">RpcMessage</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceProvider serviceProvider;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServerHandler</span><span class="params">()</span> </span>{</span><br><span class="line">        serviceProvider = SingletonFactory.getInstance(ServiceProvider.class);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RpcMessage rpcMessage)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        log.info(<span class="string">"server receive msg: [{}] "</span>, rpcMessage);</span><br><span class="line">        <span class="keyword">byte</span> messageType = rpcMessage.getMessageType();</span><br><span class="line">        <span class="comment">// 如果是心跳消息，回复pong</span></span><br><span class="line">        <span class="keyword">if</span> (messageType == RpcConstants.HEARTBEAT_REQUEST_TYPE) {</span><br><span class="line">            rpcMessage.setMessageType(RpcConstants.HEARTBEAT_RESPONSE_TYPE);</span><br><span class="line">            rpcMessage.setData(RpcConstants.PONG);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            RpcRequest rpcRequest = (RpcRequest) rpcMessage.getData();</span><br><span class="line">            <span class="comment">// 根据请求的参数，找到对应的服务，反射执行方法</span></span><br><span class="line">            Object result = handle(rpcRequest);</span><br><span class="line">            log.info(String.format(<span class="string">"server get result: %s"</span>, result.toString()));</span><br><span class="line">            rpcMessage.setMessageType(RpcConstants.RESPONSE_TYPE);</span><br><span class="line">            <span class="keyword">if</span> (ctx.channel().isActive() &amp;&amp; ctx.channel().isWritable()) {</span><br><span class="line">                RpcResponse&lt;Object&gt; rpcResponse = RpcResponse.success(result, rpcRequest.getRequestId());</span><br><span class="line">                rpcMessage.setData(rpcResponse);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                RpcResponse&lt;Object&gt; rpcResponse = RpcResponse.fail(RpcResponseCodeEnum.FAIL);</span><br><span class="line">                rpcMessage.setData(rpcResponse);</span><br><span class="line">                log.error(<span class="string">"not writable now, message dropped"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        ctx.writeAndFlush(rpcMessage).addListener(<span class="keyword">new</span> ChannelFutureListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">                <span class="keyword">if</span> (!future.isSuccess()) {</span><br><span class="line">                    future.channel().close();</span><br><span class="line">                    log.error(<span class="string">"Fail!! Send response for request "</span> + rpcMessage.getRequestId());</span><br><span class="line"></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    log.info(<span class="string">"Send response for request "</span> + rpcMessage.getRequestId());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> <span class="function"><span class="keyword">private</span> Object <span class="title">handle</span><span class="params">(RpcRequest request)</span> </span>{</span><br><span class="line">    String className = request.getClassName();</span><br><span class="line">    String version = request.getVersion();</span><br><span class="line">    String serviceKey = ServiceUtil.makeServiceKey(className, version);</span><br><span class="line">    Object serviceBean = serviceProvider.getService(serviceKey);</span><br><span class="line">    <span class="keyword">if</span> (serviceBean == <span class="keyword">null</span>) {</span><br><span class="line">        log.error(<span class="string">"Can not find service implement with interface name: {} and version: {}"</span>, className, version);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> invokeCglib(request, serviceBean);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解析 request 请求服务，在服务端注册服务的时候本地缓存一个服务 Map，从 Map 中找到服务，使用反射调用，并将结果返回，构造 response，并写入到 channal,最后 encode 发送</p><h2 id="使用-Netty-来实现-XPRC-客户端"><a href="#使用-Netty-来实现-XPRC-客户端" class="headerlink" title="使用 Netty 来实现 XPRC 客户端"></a>使用 Netty 来实现 XPRC 客户端</h2><h3 id="整体架构逻辑"><a href="#整体架构逻辑" class="headerlink" title="整体架构逻辑"></a>整体架构逻辑</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651244325781-e8658c69-83a8-4a8c-a4f9-9e57b44820fd.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u56eeab43&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1252&amp;originWidth=4184&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=548410&amp;status=done&amp;style=none&amp;taskId=ue69f9fea-00be-48a5-8979-5f64a502d04&amp;title=" alt="image.png"><br>当用户要调用一个远程服务时，给该服务添加@RpcAutowired 注解，那么该服务将自动被替换为其动态代理类，代理中包含从调用-构造 RPC request- 获取连接 channel-编码-发送， 收到回复-拆包-解码-与发送的 request 关联 response-返回调用结果</p><h3 id="动态代理逻辑"><a href="#动态代理逻辑" class="headerlink" title="动态代理逻辑"></a>动态代理逻辑</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectProxy</span><span class="params">(Class&lt;T&gt; clazz, String version)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.version = version;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被调用服务的动态代理类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">createService</span><span class="params">(Class&lt;T&gt; interfaceClass, String version)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(</span><br><span class="line">                interfaceClass.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]{interfaceClass},</span><br><span class="line">                <span class="keyword">new</span> ObjectProxy&lt;T&gt;(interfaceClass, version)</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  客户端主要逻辑，包括发送请求，相应结果与请求的绑定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        log.info(<span class="string">"client invoked method: [{}]"</span>, method.getName());</span><br><span class="line">        RpcRequest rpcRequest = RpcRequest.builder()</span><br><span class="line">                .methodName(method.getName())</span><br><span class="line">                .parameters(args)</span><br><span class="line">                .parameterTypes(method.getParameterTypes())</span><br><span class="line">                .className(method.getDeclaringClass().getName())</span><br><span class="line">                .requestId(UUID.randomUUID().toString())</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 向服务端发送请求</span></span><br><span class="line">        CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; completableFuture = (CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt;) NettyClient.getInstance().sendRequest(rpcRequest);</span><br><span class="line">        <span class="comment">// 阻塞等待调用请求的结果，当 Netty Client 收到对应请求的回复时，future.complete（response）,完成相应</span></span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = completableFuture.get();</span><br><span class="line">        <span class="keyword">this</span>.check(rpcResponse, rpcRequest);</span><br><span class="line">        <span class="keyword">return</span> rpcResponse.getData();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(RpcResponse&lt;Object&gt; rpcResponse, RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (rpcResponse == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE, <span class="string">"interfaceName"</span> + <span class="string">":"</span> + rpcRequest.getMethodName());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!rpcRequest.getRequestId().equals(rpcResponse.getRequestId())) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.REQUEST_NOT_MATCH_RESPONSE, <span class="string">"interfaceName"</span> + <span class="string">":"</span> + rpcRequest.getMethodName());</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rpcResponse.getCode() == <span class="keyword">null</span> || !rpcResponse.getCode().equals(RpcResponseCodeEnum.SUCCESS.getCode())) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE, <span class="string">"interfaceName"</span> + <span class="string">":"</span> + rpcRequest.getMethodName());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">sendRequest</span><span class="params">(RpcRequest rpcRequest)</span> </span>{</span><br><span class="line">    <span class="comment">// 构造返回Future</span></span><br><span class="line">    CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; resultFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">    <span class="comment">// 通过负载均衡获取服务端地址</span></span><br><span class="line">    InetSocketAddress inetSocketAddress = serviceDiscovery.lookupService(rpcRequest);</span><br><span class="line">    <span class="comment">// Channel复用，获取之前连接过的或者断线重连得Netty Channel</span></span><br><span class="line">    Channel channel = getChannel(inetSocketAddress);</span><br><span class="line">    <span class="keyword">if</span> (channel.isActive()) {</span><br><span class="line">        <span class="comment">// 将请求放入未完成请求的Map缓存中,key为请求的唯一ID, value存放异步回调Future</span></span><br><span class="line">        pendingRpcRequests.put(rpcRequest.getRequestId(), resultFuture);</span><br><span class="line">        RpcMessage rpcMessage = RpcMessage.builder().data(rpcRequest)</span><br><span class="line">                .codec(SerializerTypeEnum.HESSIAN.getCode())</span><br><span class="line">                .compress(CompressTypeEnum.GZIP.getCode())</span><br><span class="line">                .requestId(REQUEST_ID.getAndIncrement())</span><br><span class="line">                .messageType(RpcConstants.REQUEST_TYPE).build();</span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        channel.writeAndFlush(rpcMessage).addListener(<span class="keyword">new</span> ChannelFutureListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">                <span class="keyword">if</span> (future.isSuccess()) {</span><br><span class="line">                    log.info(<span class="string">"client send message: [{}]"</span>, rpcMessage);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    future.channel().close();</span><br><span class="line">                    resultFuture.completeExceptionally(future.cause());</span><br><span class="line">                    log.error(<span class="string">"Send failed:"</span>, future.cause());</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> resultFuture;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="Channel-复用与重连"><a href="#Channel-复用与重连" class="headerlink" title="Channel 复用与重连"></a>Channel 复用与重连</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取和指定地址连接的 channel，Channel复用，不用每次请求都重新连接</span></span><br><span class="line"><span class="comment"> * 如果获取不到，则新建连接（重连）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inetSocketAddress 待连接scoket地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: {<span class="doctag">@link</span> Channel} 获取到的连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Channel <span class="title">getChannel</span><span class="params">(InetSocketAddress inetSocketAddress)</span> </span>{</span><br><span class="line">    Channel channel = channelProvider.get(inetSocketAddress);</span><br><span class="line">    <span class="keyword">if</span> (channel == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="comment">// 阻塞等待，获取连接成功的channel</span></span><br><span class="line">        CompletableFuture&lt;Channel&gt; completableFuture = <span class="keyword">new</span> CompletableFuture&lt;&gt;();</span><br><span class="line">        channel = doConnect(completableFuture,inetSocketAddress, MAX_RETRY).get();</span><br><span class="line">        channelProvider.set(inetSocketAddress, channel);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> channel;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 与服务端建立连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;Channel&gt; <span class="title">doConnect</span><span class="params">(CompletableFuture&lt;Channel&gt; completableFuture,InetSocketAddress inetSocketAddress, <span class="keyword">int</span> retry)</span> </span>{</span><br><span class="line">    bootstrap.connect(inetSocketAddress).addListener(future -&gt; {</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) {</span><br><span class="line">            log.info(<span class="string">"The client has connected [{}] successful!"</span>, inetSocketAddress.toString());</span><br><span class="line">            completableFuture.complete(((ChannelFuture) future).channel());</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (retry == <span class="number">0</span>) {</span><br><span class="line">            log.error(<span class="string">"the number of retries expired, connect fail. address:"</span>, inetSocketAddress);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 当前是第几次重连</span></span><br><span class="line">            <span class="keyword">int</span> now = MAX_RETRY - retry + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 本次重连的时间间隔</span></span><br><span class="line">            <span class="keyword">int</span> delay = <span class="number">1</span> &lt;&lt; now;</span><br><span class="line">            log.warn(<span class="string">"connect fail, attempt to reconnect. retry:"</span> + now);</span><br><span class="line">            bootstrap.config().group().schedule(() -&gt;</span><br><span class="line">                    doConnect(completableFuture,inetSocketAddress, retry - <span class="number">1</span>), delay, TimeUnit.SECONDS);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span> completableFuture;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Client-的-Pipline-流水线"><a href="#Client-的-Pipline-流水线" class="headerlink" title="Client 的 Pipline 流水线"></a>Client 的 Pipline 流水线</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceDiscovery serviceDiscovery;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelProvider channelProvider;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Bootstrap bootstrap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventLoopGroup eventLoopGroup;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PendingRpcRequests pendingRpcRequests;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> NettyClient instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程安全的懒汉单例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NettyClient <span class="title">getInstance</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span> (NettyClient.class) {</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {</span><br><span class="line">                    instance = <span class="keyword">new</span> NettyClient();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyClient</span><span class="params">()</span> </span>{</span><br><span class="line">        eventLoopGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        bootstrap.group(eventLoopGroup)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))</span><br><span class="line">                <span class="comment">// 连接超时时间</span></span><br><span class="line">                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">5000</span>)</span><br><span class="line">                <span class="comment">// TCP 底层心跳机制</span></span><br><span class="line">                .option(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">//要求高实时性，有数据发送时就马上发送，就设置为 true 关闭，如果需要减少发送次数减少网络交互，就设置为 false 开启</span></span><br><span class="line">                .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> RpcEncoder());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> Spliter());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> RpcDecoder());</span><br><span class="line">                        ch.pipeline().addLast(<span class="keyword">new</span> NettyClientHandler());</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">        <span class="keyword">this</span>.channelProvider = SingletonFactory.getInstance(ChannelProvider.class);</span><br><span class="line">        <span class="keyword">this</span>.serviceDiscovery = ExtensionLoader.getExtensionLoader(ServiceDiscovery.class).getExtension(<span class="string">"zk"</span>);</span><br><span class="line">        <span class="keyword">this</span>.pendingRpcRequests = SingletonFactory.getInstance(PendingRpcRequests.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Client-接受响应的逻辑处理"><a href="#Client-接受响应的逻辑处理" class="headerlink" title="Client 接受响应的逻辑处理"></a>Client 接受响应的逻辑处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从服务端读到消息时的业务逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, RpcMessage rpcMessage)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    log.info(<span class="string">"client receive msg: [{}]"</span>, rpcMessage);</span><br><span class="line">    <span class="keyword">byte</span> messageType = rpcMessage.getMessageType();</span><br><span class="line">    <span class="keyword">if</span> (messageType == RpcConstants.HEARTBEAT_RESPONSE_TYPE) {</span><br><span class="line">        log.info(<span class="string">"heart receive[{}]"</span>, rpcMessage.getData());</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (messageType == RpcConstants.RESPONSE_TYPE) {</span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = (RpcResponse&lt;Object&gt;) rpcMessage.getData();</span><br><span class="line">        <span class="comment">// 调用结果相应 绑定到对应的请求</span></span><br><span class="line">        pendingRpcRequests.complete(rpcResponse);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 未收到回复的请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2022/4/25 22:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PendingRpcRequests</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt;&gt; PENDING_RESPONSE_FUTURES = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String requestId, CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; future)</span> </span>{</span><br><span class="line">        PENDING_RESPONSE_FUTURES.put(requestId, future);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将请求与调用结果响应绑定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcResponse 收到服务端发来的调用结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(RpcResponse&lt;Object&gt; rpcResponse)</span> </span>{</span><br><span class="line">        CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; future = PENDING_RESPONSE_FUTURES.remove(rpcResponse.getRequestId());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != future) {</span><br><span class="line">            future.complete(rpcResponse);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="如何将调用的结果-response-和请求-request-绑定呢？"><a href="#如何将调用的结果-response-和请求-request-绑定呢？" class="headerlink" title="如何将调用的结果 response 和请求 request 绑定呢？"></a>如何将调用的结果 response 和请求 request 绑定呢？</h4><p>1、 通过 channel 的 Attributekey 绑定</p><ol start="2"><li>通 CompletableFuture 包装返回结，使用 request 和 response 统一的 ID 作为 key，服务端收到请求之后，将 RequestId 原封不动写到响应结果中。客户端收到响应结果后，拿出 RequestId 找到对应的 Future 并写入结果。</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651247120029-4999acb6-a108-4367-b27b-7e91713e8139.png#clientId=u094a13e3-2a73-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3f547007&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1764&amp;originWidth=3168&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=566555&amp;status=done&amp;style=none&amp;taskId=u2d03d89b-e2a9-479b-bc3f-99dceb92cfe&amp;title=" alt="image.png"></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://juejin.cn/book/6844733738119593991">Netty 入门与实战：仿写微信 IM 即时通讯系统</a><br>Netty、Redis、Zookeeper 高并发实战</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零、如何实现一个轻量级RPC框架？</title>
      <link href="/2022/05/12/yuque/ling-ru-he-shi-xian-yi-ge-qing-liang-ji-rpc-kuang-jia/"/>
      <url>/2022/05/12/yuque/ling-ru-he-shi-xian-yi-ge-qing-liang-ji-rpc-kuang-jia/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>零实现一个轻量级 RPC 框架-系列文章<br>Github: <a href="https://github.com/DongZhouGu/XRpc">https://github.com/DongZhouGu/XRpc</a></p></blockquote><h2 id="什么是-RPC"><a href="#什么是-RPC" class="headerlink" title="什么是 RPC?"></a>什么是 RPC?</h2><p>RPC，即 Remote Procedure Call（远程过程调用）, 在计算机科学中已经存在了超过四十年时间，由于微服务风潮带来的热度，RPC 技术如今依旧被开发人员关注。RPC 出现的最初目的，就是为了让计算机能够<strong>跟调用本地方法一样去调用远程方法。</strong>RPC 可基于 HTTP 或 TCP 协议，Web Service 就是基于 HTTP 协议的 RPC，它具有良好的跨平台性，但其性能却不如基于 TCP 协议的 RPC。</p><h2 id="为什么需要-RPC"><a href="#为什么需要-RPC" class="headerlink" title="为什么需要 RPC?"></a>为什么需要 RPC?</h2><ul><li>单一应用下，逻辑简单，用户较少，流量不大，所有的服务都在单体下，这种情况下并不需要 RPC。</li><li>当我们的系统访问量增大、业务增多时，我们会发现一台单机运行此系统已经无法承受。此时，我们可以将业务拆分成几个互不关联的应用，分别部署在各自机器上，以划清逻辑并减小压力。此时，我们也可以不需要 RPC，因为应用之间是互不关联的。</li><li>发现一些公共的业务逻辑需要抽离出来，组成独立的 service 应用部署在一些机器上，其他的服务都与 service 应用交互，这时，就需要高效的应用间的通讯手段来完成远程服务调用。</li></ul><h2 id="构建一个-RPC-需要什么？"><a href="#构建一个-RPC-需要什么？" class="headerlink" title="构建一个 RPC 需要什么？"></a>构建一个 RPC 需要什么？</h2><p>三方面会直接影响 RPC 的性能，<strong>一是传输方式，二是序列化，三是 IO。</strong></p><ul><li>TCP 是传输层协议，HTTP 是应用层协议，而传输层较应用层更加底层，在数据传输方面，越底层越快，HTTP 还封装了冗余的头部信息，因此，在一般情况下，TCP 一定比 HTTP 快。</li><li>就序列化而言，Java 提供了默认的序列化方式，但在高并发的情况下，这种方式将会带来一些性能上的瓶颈，于是市面上出现了一系列优秀的序列化框架，比如：Protobuf、Kryo、Hessian、Jackson 等，它们可以取代 Java 默认的序列化，从而提供更高效的性能。</li><li>为了支持高并发，传统的阻塞式 IO 显然不太合适，因此我们需要异步的 IO，即 NIO。Java 提供了 NIO 的解决方案，但实现繁琐，相比之下，Netty 作为一个高性能、可拓展的异步事件驱动的通信框架，大大简化了网络编程。</li></ul><p>同时，我们在调用远程服务时，如何知道远程服务到底在分布式下的哪一台机器上呢？因此，我们还需要<strong>服务注册与发现功能</strong>，让客户端来自动发现当前可用的服务，并调用这些服务。这需要一种服务注册表（Service Registry）的组件，让它来注册分布式环境下所有的服务地址（包括：主机名与端口号）。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651118558445-f03c704c-04ca-4017-975c-0e09b046ad70.png#clientId=u751c5a9d-f8ad-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u61ac2caa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1128&amp;originWidth=2272&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=240388&amp;status=done&amp;style=none&amp;taskId=u4a7bb34d-0c76-4977-bab7-99130d1e0e0&amp;title=" alt="image.png"></p><h2 id="RPC-的调用流程"><a href="#RPC-的调用流程" class="headerlink" title="RPC 的调用流程"></a>RPC 的调用流程</h2><p>在一次 RPC 调用过程中</p><ul><li>客户端远程调用服务时，使用动态代理，对调用过程增强‘</li><li>客户端首先会将调用的类名、方法名、参数名、参数值等信息，序列化成二进制流；</li><li>然后客户端将二进制流，通过网络（注册中心拿到服务端地址）发送给服务端；</li><li>服务端接收到二进制流之后，将它反序列化，得到需要调用的类名、方法名、参数名和参数值，再通过反射方式，调用对应的方法得到返回值；</li><li>服务端将返回值序列化，再通过网络发送给客户端；</li><li>客户端对结果反序列化之后，就可以得到调用的结果了。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651121917231-3717ea5f-be6a-4122-bd7f-b8803f2e15d1.png#clientId=u751c5a9d-f8ad-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ubd646143&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=808&amp;originWidth=3248&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=210827&amp;status=done&amp;style=none&amp;taskId=uce058c59-55fc-407e-814b-7a59ed6066f&amp;title=" alt="image.png"></p><h2 id="常用的的-RPC-框架"><a href="#常用的的-RPC-框架" class="headerlink" title="常用的的 RPC 框架"></a>常用的的 RPC 框架</h2><p>目前常用的 RPC 框架如下：</p><ul><li><strong>Thrift：</strong>thrift 是一个软件框架，用来进行可扩展且跨语言的服务的开发。它结合了功能强大的软件堆栈和代码生成引擎，以构建在 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml 这些编程语言间无缝结合的、高效的服务。</li><li>*<em>gRPC: *</em> 一开始由 google 开发，是一款语言中立、平台中立、开源的远程过程调用(RPC)系统，采用 HTTP2 协议和 ProtoBuf。</li><li><strong>Dubbo：</strong>Dubbo 是一个分布式服务框架，以及 SOA 治理方案。其功能主要包括：高性能 NIO 通讯及多协议集成，服务动态寻址与路由，软负载均衡与容错，依赖分析与降级等。 Dubbo 是阿里巴巴内部的 SOA 服务化治理方案的核心框架，Dubbo 自 2011 年开源后，已被许多非阿里系公司使用。</li><li><strong>Spring Cloud：</strong> 基于 Spring Boot，基于 HTTP 协议的 REST 接口调用，为微服务体系开发中的架构问题，提供了一整套的解决方案——服务注册与发现，服务消费，服务保护与熔断，网关，分布式调用追踪，分布式配置管理等。</li></ul><h2 id="Dubbo-使用案例"><a href="#Dubbo-使用案例" class="headerlink" title="Dubbo 使用案例"></a>Dubbo 使用案例</h2><p>官网：<a href="https://dubbo.apache.org/zh/docs/quick-start/">https://dubbo.apache.org/zh/docs/quick-start/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/1164521/1651151777712-9460d64a-8d34-432b-a807-54680604efd7.png#clientId=udb73b80e-419d-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ufcc0c4c2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=824&amp;originWidth=1060&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=52796&amp;status=done&amp;style=none&amp;taskId=u890f2942-b593-4c43-b373-93b6dbff035&amp;title=" alt="image.png"></p><ul><li>服务提供者（Provider) : 暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者(Consumer) : 调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>注册中心(Registry) : 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li><li>监控中心(Monitor) : 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li></ul><h3 id="定义服务接口"><a href="#定义服务接口" class="headerlink" title="定义服务接口"></a>定义服务接口</h3><p>DemoService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.dubbo.samples.basic.api;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>{</span><br><span class="line">     <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="在服务提供方实现接口"><a href="#在服务提供方实现接口" class="headerlink" title="在服务提供方实现接口"></a>在服务提供方实现接口</h3><p>DemoServiceImpl.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServiceImpl</span> <span class="keyword">implements</span> <span class="title">DemoService</span> </span>{</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>{</span><br><span class="line">         System.out.println(<span class="string">"["</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">"] Hello "</span> + name +</span><br><span class="line">                 <span class="string">", request from consumer: "</span> + RpcContext.getContext().getRemoteAddress());</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">", response from provider: "</span> + RpcContext.getContext().getLocalAddress();</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><h3 id="引用远程服务"><a href="#引用远程服务" class="headerlink" title="引用远程服务"></a>引用远程服务</h3><p>consumer.xml：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:reference id=<span class="string">"demoService"</span> check=<span class="string">"true"</span> <span class="class"><span class="keyword">interface</span></span>=<span class="string">"org.apache.dubbo.samples.basic.api.DemoService"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="加载-Spring-配置，并调用远程服务"><a href="#加载-Spring-配置，并调用远程服务" class="headerlink" title="加载 Spring 配置，并调用远程服务"></a>加载 Spring 配置，并调用远程服务</h3><p>Consumer.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">     ...</span><br><span class="line">     DemoService demoService = (DemoService) context.getBean(<span class="string">"demoService"</span>);</span><br><span class="line">     String hello = demoService.sayHello(<span class="string">"world"</span>);</span><br><span class="line">     System.out.println(hello);</span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>可以发现，我们需要抽取公共的 service-api，在 Provider 也就是 RPC Server 提供方具体实现，在 Consumer 也就是 RPC Client 中直接调用，此时的 demoService 已经是被代理过的对象，当调用 demoService.sayHello(“world”)时，会去注册中心拿到 RPC Server 的 IP+Port，然后通过网络通信去 RPC Server 拿到方法调用的结果。</p><h2 id="所以我们该如何实现-RPC"><a href="#所以我们该如何实现-RPC" class="headerlink" title="所以我们该如何实现 RPC?"></a>所以我们该如何实现 RPC?</h2><p>根据上面的介绍，我们已经大概了解 RPC 是什么以及 RPC 中涉及到的点。下面我们通过一些问题来考虑我们从零实现一个 RPC 框架到底需要做些什么。</p><h4 id="1-如何获取可用的远程服务器"><a href="#1-如何获取可用的远程服务器" class="headerlink" title="1. 如何获取可用的远程服务器"></a>1. 如何获取可用的远程服务器</h4><p>换句话说，也就是服务注册与发现，可以使用 Zookeeper 作为注册中心， ZooKeeper 将数据保存在内存中，性能很高。 在读多写少的场景中尤其适用，因为写操作会导致所有的服务器间同步状态。服务注册与发现是典型的读多写少的协调服务场景。 Zookeeper 是一个典型的 CP 系统，在服务选举或者集群半数机器宕机时是不可用状态，相对于服务发现中主流的 AP 系统来说，可用性稍低。除此之外，还可以使用 Nacos、Consul、Eureka、Redis 等，需要提供切换及用户自定义注册中心的功能。</p><h4 id="2-如何表示数据"><a href="#2-如何表示数据" class="headerlink" title="2. 如何表示数据"></a>2. 如何表示数据</h4><p>也就是序列化、反序列化。在网络中，所有的数据都将会被转化为字节进行传送，所以为了能够使参数对象在网络中进行传输，需要对这些参数进行序列化和反序列化操作。<br>序列化：把对象转换为字节序列的过程称为对象的序列化，也就是编码的过程。<br>反序列化：把字节序列恢复为对象的过程称为对象的反序列化，也就是解码的过程。<br>目前比较高效的开源序列化框架：如 Kryo、Hessian、FastJson 和 Protobuf 等，需要提供切换及用户自定义序列化算法的功能。</p><h4 id="3-如何传递数据"><a href="#3-如何传递数据" class="headerlink" title="3. 如何传递数据"></a>3. 如何传递数据</h4><p>出于并发性能的考虑，传统的阻塞式 IO 显然不太合适，因此我们需要异步的 IO，即 NIO。 Java 提供了 NIO 的解决方案，Java 7 也提供了更优秀的 NIO.2 支持。 可以选择 Netty 或者 MINA 来解决 NIO 数据传输的问题。</p><h4 id="4-服务端如何确定并调用目标方法"><a href="#4-服务端如何确定并调用目标方法" class="headerlink" title="4. 服务端如何确定并调用目标方法"></a>4. 服务端如何确定并调用目标方法</h4><p>代理，用于客户端代理，客户端调用服务接口，实际上是一个网络请求的过程,屏蔽程方法调用的底层细节。可以使用 JDK 提供的原生的动态代理机制，也可以使用开源的：CGLib 代理，Javassist 字节码生成技术。</p><h3 id="实现要点"><a href="#实现要点" class="headerlink" title="实现要点"></a>实现要点</h3><ul><li>基于 NIO 的 Netty 网络通讯，实现 Channel 复用、心跳保活</li><li>自定义通信协议，增加 Netty 编解码器，解决 TCP 粘包/拆包问题。</li><li>支持 ProtoBuf、Kryo、Hessian2 序列化，反序列化，经测试 Kryo 效率最高，默认 Kyro</li><li>支持 Gzip 压缩，可在配置文件配置是否启用包压缩，已经压缩算法，减少数据包的大小。</li><li>支持 Zookeeper 和 Nacos 的服务注册发现，启动后将服务信息发布到注册中心，客户端发现并监听服务信息。</li><li>客户端实现了基于轮询、随机和一致性哈希负载均衡算法，快速失败和重试的容错策略</li><li>自定义 RpcFuture，客户端支持同步和异步调用，设置回调方法，返回调用响应后执行回调。</li><li>基于 SPI 的模块化管理，更加方便扩展模块，集成 Spring 通过注解注册服务，SpringBoot 自动装载配置</li></ul><h3 id="待优化点"><a href="#待优化点" class="headerlink" title="待优化点"></a>待优化点</h3><ul><li>动态代理使用 Javassist 生成代码，直接调用</li><li>支持 Eureka、Consul 等注册中心</li><li>调用鉴权、服务监控中心</li><li>编写更完整的测试</li><li>…</li></ul><p>###</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XPRC </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot-聊天室Websockt</title>
      <link href="/2022/05/12/yuque/springboot-liao-tian-shi-websockt/"/>
      <url>/2022/05/12/yuque/springboot-liao-tian-shi-websockt/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633519434602-d2e3e65f-8acd-4745-b88d-19cb3031f1a0.png#clientId=u80eddcb8-b1bd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=lMtz7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=952&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=71697&amp;status=done&amp;style=none&amp;taskId=u17f8143a-ef63-4124-9f5e-1e15678a885&amp;title=" alt="image.png"></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="WebSocket-配置类"><a href="#WebSocket-配置类" class="headerlink" title="WebSocket 配置类"></a>WebSocket 配置类</h2><p>注册 WebSocket 扫描类到容器中（注册该对象主要用于扫描带有@ServerEndpoint 的类，如果使用外置的 tomcat 就不需要该对象）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketStompConfig</span> </span>{</span><br><span class="line">    <span class="comment">//这个bean的注册,用于扫描带有@ServerEndpoint的注解成为websocket  ,如果你使用外置的tomcat就不需要该配置文件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="编写-WebSocket-服务类（类似-Controller-接受处理前端的请求）"><a href="#编写-WebSocket-服务类（类似-Controller-接受处理前端的请求）" class="headerlink" title="编写 WebSocket 服务类（类似 Controller,接受处理前端的请求）"></a>编写 WebSocket 服务类（类似 Controller,接受处理前端的请求）</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServerEndpoint("/websocket")</span> <span class="comment">//映射路径，类时配置Controller的映射路径</span></span><br><span class="line"><span class="meta">@Component</span><span class="comment">//添加到容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String,WebSocketServer&gt; webSocketMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();  <span class="comment">//线程安全的Map集合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法*/</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session,<span class="meta">@PathParam("userId")</span> String userId)</span> </span>{<span class="comment">//@PathParam是拿到请求url中带来的参数</span></span><br><span class="line">        System.out.println(userId+<span class="string">"连接服务器"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(Session session)</span> </span>{</span><br><span class="line">         System.out.println(session.getId()+<span class="string">"断开连接"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息*/</span></span><br><span class="line">   <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            JSONObject jsonObject = JSON.parseObject(message);</span><br><span class="line">            String id=jsonObject.getString(<span class="string">"toUserId"</span>);</span><br><span class="line">            Session toSession=sessionMap.get(id);</span><br><span class="line">            <span class="keyword">if</span> (toSession!=<span class="keyword">null</span>){</span><br><span class="line">                toSession.getBasicRemote().sendText(message);<span class="comment">//推送消息给客户端</span></span><br><span class="line">            }<span class="keyword">else</span> {</span><br><span class="line">                session.getBasicRemote().sendText(<span class="string">"该用户不在线"</span>);<span class="comment">//推送消息给客户端</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>{</span><br><span class="line">        log.error(<span class="string">"用户错误:"</span>+<span class="keyword">this</span>.userId+<span class="string">",原因:"</span>+error.getMessage());</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结：</strong><br>    1、添加依赖<br>    2、将扫描类注册到容器中<br>    3、写 WebSocket 的服务类（类似 Controller）(这里是重点)</p><h4 id="一、类上用到注解"><a href="#一、类上用到注解" class="headerlink" title="一、类上用到注解"></a>一、类上用到注解</h4><blockquote><p>1、@ServerEndpoint<br>作用范围：类<br>功能：使用了该注解，就代表类成为了 WebSocket 服务类，相当于 Controller<br>参数：value      //该属性值写的就是映射路径</p></blockquote><blockquote><p>2、@Component<br>WebSocket 服务类需要添加到容器中</p></blockquote><h4 id="二、方法绑定事件使用的注解"><a href="#二、方法绑定事件使用的注解" class="headerlink" title="二、方法绑定事件使用的注解"></a>二、方法绑定事件使用的注解</h4><blockquote><p>1、@OnOpen<br>作用范围：方法上<br>功能：方法上添加该注解后，每次有客户端连接当前服务器，就会执行该方法</p><p>2、@OnClose<br>作用范围：方法上<br>功能：方法上添加该注解后，每次有客户端断开与当前服务类的连接时，就会执行该方法</p><p>3、@OnMessage<br>作用范围：方法上<br>功能：方法上添加该注解后，每次有客户端发送消息给当前服务类时，就会执行该方法</p><p>4、@OnError·<br>作用范围：方法上<br>功能：方法上添加该注解后，每次有客户端断开与当前服务类的连接出错时，就会执行该方法</p></blockquote><h4 id="三、使用到的对象"><a href="#三、使用到的对象" class="headerlink" title="三、使用到的对象"></a>三、使用到的对象</h4><p>Session<br>作用：每个客户端连接服务类，都会产生一个 Session 对象，客户端与服务器之间进行通信就是用该对象</p><h4 id="四、参数绑定（和-Springmvc-的参数绑定差不多）"><a href="#四、参数绑定（和-Springmvc-的参数绑定差不多）" class="headerlink" title="四、参数绑定（和 Springmvc 的参数绑定差不多）"></a>四、参数绑定（和 Springmvc 的参数绑定差不多）</h4><blockquote><p>1、有什么用？<br>可以绑定 Session 对象，这样就可以知道当前事件是哪个客户端触发的<br>例如：<br>用户 1 发送消息到服务端<br>用户 1 断开与服务器的连接</p><p>2、什么时候可以用<br>当方法上使用类绑定事件注解，就可以使用参数绑定</p><p>3、可以绑定的参数的类型：<br>1、Session    每个客户端连接服务器特有的对象<br>2、String      在@OnMessage 方法里绑定，可以得到客户端发来的消息</p></blockquote><h4 id="五、服务器推送消息与断开连接"><a href="#五、服务器推送消息与断开连接" class="headerlink" title="五、服务器推送消息与断开连接"></a>五、服务器推送消息与断开连接</h4><blockquote><p>1、推送消息<br>session.getBasicRemote().sendText(“内容”);</p><p>2、断开连接<br>session.close();</p></blockquote><p>注意：Session 对象是哪个客户端的，那么消息就是消息就是推送给谁的；关闭连接也是</p><h2 id="聊天室实现"><a href="#聊天室实现" class="headerlink" title="聊天室实现"></a>聊天室实现</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.dto.ChatRecordDTO;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.dto.RecallMessageDTO;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.dto.WebsocketMessageDTO;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.entity.ChatRecord;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.enums.FilePathEnum;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.mapper.ChatRecordMapper;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.strategy.context.UploadStrategyContext;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.utils.BeanCopyUtils;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.utils.HTMLUtils;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.utils.IpUtils;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.vo.VoiceVO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.HandshakeRequest;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpointConfig;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.dzgu.myblog.enums.ChatTypeEnum.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.dzgu.myblog.enums.FilePathEnum.VOICE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: websocket服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/14 13:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@ServerEndpoint(value = "/websocket",configurator = WebSocketServiceImpl.ChatConfigurator.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServiceImpl</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChatRecordMapper chatRecordMapper;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UploadStrategyContext uploadStrategyContext;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户session集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServiceImpl&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChatRecordMapper</span><span class="params">(ChatRecordMapper chatRecordMapper)</span> </span>{</span><br><span class="line">        WebSocketServiceImpl.chatRecordMapper = chatRecordMapper;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadStrategyContext</span><span class="params">(UploadStrategyContext uploadStrategyContext)</span> </span>{</span><br><span class="line">        WebSocketServiceImpl.uploadStrategyContext = uploadStrategyContext;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户端真实ip</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatConfigurator</span> <span class="keyword">extends</span> <span class="title">ServerEndpointConfig</span>.<span class="title">Configurator</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String HEADER_NAME = <span class="string">"X-Real-IP"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyHandshake</span><span class="params">(ServerEndpointConfig sec, HandshakeRequest request, HandshakeResponse response)</span> </span>{</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                String firstFoundHeader = request.getHeaders().get(HEADER_NAME.toLowerCase()).get(<span class="number">0</span>);</span><br><span class="line">                sec.getUserProperties().put(HEADER_NAME, firstFoundHeader);</span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                sec.getUserProperties().put(HEADER_NAME, <span class="string">"未知ip"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session, EndpointConfig endpointConfig)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 加入连接</span></span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 异步更新所有用户显示的在线人数</span></span><br><span class="line">        updateOnlineCount();</span><br><span class="line">        <span class="comment">// 加载历史聊天记录</span></span><br><span class="line">        ChatRecordDTO chatRecordDTO = listChartRecords(endpointConfig);</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        WebsocketMessageDTO messageDTO = WebsocketMessageDTO.builder()</span><br><span class="line">                .type(HISTORY_RECORD.getType())</span><br><span class="line">                .data(chatRecordDTO)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">synchronized</span> (session) {</span><br><span class="line">            session.getBasicRemote().sendText(JSON.toJSONString(messageDTO));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        WebsocketMessageDTO messageDTO = JSON.parseObject(message, WebsocketMessageDTO.class);</span><br><span class="line">        <span class="keyword">switch</span> (Objects.requireNonNull(getChatType(messageDTO.getType()))) {</span><br><span class="line">            <span class="keyword">case</span> SEND_MESSAGE:</span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                ChatRecord chatRecord = JSON.parseObject(JSON.toJSONString(messageDTO.getData()), ChatRecord.class);</span><br><span class="line">                <span class="comment">// 过滤html标签</span></span><br><span class="line">                chatRecord.setContent(HTMLUtils.deleteTag(chatRecord.getContent()));</span><br><span class="line">                chatRecordMapper.insert(chatRecord);</span><br><span class="line">                messageDTO.setData(chatRecord);</span><br><span class="line">                <span class="comment">// 广播消息</span></span><br><span class="line">                broadcastMessage(messageDTO);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RECALL_MESSAGE:</span><br><span class="line">                <span class="comment">// 撤回消息</span></span><br><span class="line">                RecallMessageDTO recallMessage = JSON.parseObject(JSON.toJSONString(messageDTO.getData()), RecallMessageDTO.class);</span><br><span class="line">                <span class="comment">// 删除记录</span></span><br><span class="line">                chatRecordMapper.deleteById(recallMessage.getId());</span><br><span class="line">                <span class="comment">// 广播消息</span></span><br><span class="line">                broadcastMessage(messageDTO);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HEART_BEAT:</span><br><span class="line">                <span class="comment">// 心跳消息</span></span><br><span class="line">                messageDTO.setData(<span class="string">"pong"</span>);</span><br><span class="line">                session.getBasicRemote().sendText(JSON.toJSONString(JSON.toJSONString(messageDTO)));</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 更新在线人数</span></span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        updateOnlineCount();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载历史聊天记录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endpointConfig 配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加载历史聊天记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ChatRecordDTO <span class="title">listChartRecords</span><span class="params">(EndpointConfig endpointConfig)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取聊天历史记录</span></span><br><span class="line">        List&lt;ChatRecord&gt; chatRecordList = chatRecordMapper.selectList(<span class="keyword">new</span> LambdaQueryWrapper&lt;ChatRecord&gt;()</span><br><span class="line">                .ge(ChatRecord::getCreateTime, DateUtil.offsetHour(<span class="keyword">new</span> Date(), -<span class="number">12</span>)));</span><br><span class="line">        <span class="comment">// 获取当前用户ip</span></span><br><span class="line">        String ipAddress = endpointConfig.getUserProperties().get(ChatConfigurator.HEADER_NAME).toString();</span><br><span class="line">        <span class="keyword">return</span> ChatRecordDTO.builder()</span><br><span class="line">                .chatRecordList(chatRecordList)</span><br><span class="line">                .ipAddress(ipAddress)</span><br><span class="line">                .ipSource(IpUtils.getIpSource(ipAddress))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新在线人数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOnlineCount</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//当前在线人数</span></span><br><span class="line">        WebsocketMessageDTO messageDTO = WebsocketMessageDTO.builder()</span><br><span class="line">                .type(ONLINE_COUNT.getType())</span><br><span class="line">                .data(webSocketSet.size())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 广播消息</span></span><br><span class="line">        broadcastMessage(messageDTO);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送语音</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> voiceVO 语音路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendVoice</span><span class="params">(VoiceVO voiceVO)</span> </span>{</span><br><span class="line">        <span class="comment">// 上传语音文件</span></span><br><span class="line">        String content = uploadStrategyContext.executeUploadStrategy(voiceVO.getFile(), FilePathEnum.VOICE.getPath());</span><br><span class="line">        voiceVO.setContent(content);</span><br><span class="line">        <span class="comment">// 保存记录</span></span><br><span class="line">        ChatRecord chatRecord = BeanCopyUtils.copyObject(voiceVO, ChatRecord.class);</span><br><span class="line">        chatRecordMapper.insert(chatRecord);</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        WebsocketMessageDTO messageDTO = WebsocketMessageDTO.builder()</span><br><span class="line">                .type(VOICE_MESSAGE.getType())</span><br><span class="line">                .data(chatRecord)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="comment">// 广播消息</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            broadcastMessage(messageDTO);</span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广播消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageDTO 消息dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException io异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">broadcastMessage</span><span class="params">(WebsocketMessageDTO messageDTO)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServiceImpl webSocketService : webSocketSet) {</span><br><span class="line">            webSocketService.session.getBasicRemote().sendText(JSON.toJSONString(messageDTO));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署博客项目</title>
      <link href="/2022/05/12/yuque/docker-bu-shu-bo-ke-xiang-mu/"/>
      <url>/2022/05/12/yuque/docker-bu-shu-bo-ke-xiang-mu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="后端打包"><a href="#后端打包" class="headerlink" title="后端打包"></a>后端打包</h2><p>参考<code>SpringBoot+Maven多环境部署</code>将后端项目打包</p><h2 id="编写-Dockerfile-文件"><a href="#编写-Dockerfile-文件" class="headerlink" title="编写 Dockerfile 文件"></a>编写 Dockerfile 文件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该镜像需要依赖的基础镜像</span></span><br><span class="line">FROM java:8</span><br><span class="line"><span class="comment"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class="line">ADD myblog-0.0.1-SNAPSHOT.jar /blog.jar</span><br><span class="line"><span class="comment"># 指定docker容器启动时运行jar包</span></span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/blog.jar"</span>]</span><br><span class="line"><span class="comment"># 指定维护者的名字</span></span><br><span class="line">MAINTAINER dzgu</span><br></pre></td></tr></tbody></table></figure><h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><p>可以作为通用脚本来使用的模板脚本，只需改变其中的一些参数即可，具体执行流程为：停止旧服务-&gt;删除旧容器-&gt;删除旧镜像-&gt;打包新镜像-&gt;运行新镜像。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#源jar路径</span></span><br><span class="line">SOURCE_PATH=/mydata/docker</span><br><span class="line"><span class="comment">#docker 镜像/容器名字或者jar名字 这里都命名为这个</span></span><br><span class="line">SERVER_NAME=blog-springboot-0.0.1.jar</span><br><span class="line">TAG=latest</span><br><span class="line">SERVER_PORT=8090</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"删除容器<span class="variable">$SERVER_NAME</span>"</span></span><br><span class="line">docker stop <span class="variable">$SERVER_NAME</span></span><br><span class="line">docker rm <span class="variable">$SERVER_NAME</span></span><br><span class="line"><span class="comment"># 构建docker镜像</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"删除镜像<span class="variable">$SERVER_NAME</span>"</span></span><br><span class="line">docker rmi <span class="variable">$SERVER_NAME</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"开始构建镜像"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SOURCE_PATH</span></span><br><span class="line">docker build -t <span class="variable">$SERVER_NAME</span>:<span class="variable">$TAG</span> .</span><br><span class="line"><span class="comment"># 运行docker容器</span></span><br><span class="line">docker run --name <span class="variable">$SERVER_NAME</span> -e TZ=<span class="string">"Asia/Shanghai"</span> -v /mydata/upload:/mydata/upload -d -p <span class="variable">$SERVER_PORT</span>:<span class="variable">$SERVER_PORT</span> <span class="variable">$SERVER_NAME</span>:<span class="variable">$TAG</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$SERVER_NAME</span>容器创建完成"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-运行后端项目"><a href="#Docker-运行后端项目" class="headerlink" title="Docker 运行后端项目"></a>Docker 运行后端项目</h2><p>进入服务器/mydata/docker 下，构建后端镜像</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mydata/docker</span><br><span class="line">sh ./blog-start.sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1637133130134-e3b3df36-4435-4fdf-aee6-a068a8c01e36.png#clientId=u83ee5584-9d48-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=456&amp;id=u5e176a32&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=456&amp;originWidth=625&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=55334&amp;status=done&amp;style=none&amp;taskId=u27ef4c50-681a-418d-8442-ea04627739d&amp;title=&amp;width=625" alt="image.png"><br><strong>需要重新部署只需重新传 jar 包，执行 sh 脚本即可</strong></p><h2 id="打包前端项目"><a href="#打包前端项目" class="headerlink" title="打包前端项目"></a>打包前端项目</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  run build</span><br></pre></td></tr></tbody></table></figure><h2 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h2><h3 id="有域名"><a href="#有域名" class="headerlink" title="有域名"></a>有域名</h3><p>在/mydata/nginx 下创建 nginx.conf 文件，格式如下</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    client_max_body_size     50m;</span><br><span class="line">    client_body_buffer_size  10m;</span><br><span class="line">    client_header_timeout    1m;</span><br><span class="line">    client_body_timeout      1m;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length  1k;</span><br><span class="line">    gzip_buffers     4 16k;</span><br><span class="line">    gzip_comp_level  4;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  spring.dzgu.top;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   /mydata/vue/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">location ^~ /api/ {</span><br><span class="line">            proxy_pass http://你的ip:8090/;</span><br><span class="line">    proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  admin.dzgu.top;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   /mydata/vue/admin;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">location ^~ /api/ {</span><br><span class="line">            proxy_pass http://你的ip:8090/;</span><br><span class="line">    proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  ws://ws.dzgu.top;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">          proxy_pass http://你的ip:8090/websocket;</span><br><span class="line">          proxy_http_version 1.1;</span><br><span class="line">          proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">          proxy_set_header Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">          proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">          proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  static.dzgu.top;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">          root /mydata/upload/;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>我前台和后台时分为两个域名，所以写了两个 server，前端项目路径为之前传输的路径，其他两个为文件上传域名和 websocket 转发域名。</strong><br>docker 启动 nginx 服务</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx --restart=always -p 80:80 -d -v /mydata/nginx/nginx.conf:/etc/nginx/nginx.conf -v /mydata/vue:/mydata/vue -v /mydata/upload:/mydata/upload -d nginx</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="无域名"><a href="#无域名" class="headerlink" title="无域名"></a>无域名</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">events {</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    client_max_body_size     50m;</span><br><span class="line">    client_body_buffer_size  10m;</span><br><span class="line">    client_header_timeout    1m;</span><br><span class="line">    client_body_timeout      1m;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length  1k;</span><br><span class="line">    gzip_buffers     4 16k;</span><br><span class="line">    gzip_comp_level  4;</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  你的ip;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   /mydata/vue/blog;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">location ^~ /api/ {</span><br><span class="line">            proxy_pass http://你的ip:8090/;</span><br><span class="line">    proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">        listen       81;</span><br><span class="line">        server_name  你的ip;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">            root   /mydata/vue/admin;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">location ^~ /api/ {</span><br><span class="line">            proxy_pass http://你的ip:8090/;</span><br><span class="line">    proxy_set_header   Host             <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">        listen       82;</span><br><span class="line">        server_name  你的ip;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">          proxy_pass http://你的ip:8090/websocket;</span><br><span class="line">          proxy_http_version 1.1;</span><br><span class="line">          proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">          proxy_set_header Connection <span class="string">"Upgrade"</span>;</span><br><span class="line">          proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">          proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">server {</span><br><span class="line">        listen       83;</span><br><span class="line">        server_name  你的ip;</span><br><span class="line"></span><br><span class="line">        location / {</span><br><span class="line">          <span class="built_in">alias</span> /mydata/upload/;</span><br><span class="line">          autoindex on;</span><br><span class="line">          autoindex_exact_size on;</span><br><span class="line">          autoindex_localtime on;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>docker 启动 nginx 服务</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx --restart=always -p 80:80 -p 81:81 -p 82:82 -p 83:83 -d -v /mydata/nginx/nginx.conf:/etc/nginx/nginx.conf -v /mydata/vue:/mydata/vue -v /mydata/upload:/mydata/upload -d nginx</span><br></pre></td></tr></tbody></table></figure><p><strong>ps：需要通过 ip + 端口号访问项目</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-定时任务</title>
      <link href="/2022/05/12/yuque/springboot-ding-shi-ren-wu/"/>
      <url>/2022/05/12/yuque/springboot-ding-shi-ren-wu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>在编写 Spring Boot 应用中经常会遇到这样的场景，比如：需要定时地发送一些短信、邮件之类的操作，也可能会定时地检查和监控一些标志、参数等。</p><h3 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h3><p>在 Spring Boot 中编写定时任务是非常简单的事，下面通过实例介绍如何在 Spring Boot 中创建定时任务，实现每过 5 秒输出一下当前时间。</p><ul><li>在 Spring Boot 的主类中加入<code>@EnableScheduling</code>注解，启用定时任务的配置</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>创建定时任务实现类</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledTasks</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 5000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTime</span><span class="params">()</span> </span>{</span><br><span class="line">        log.info(<span class="string">"现在时间："</span> + dateFormat.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>运行程序，控制台中可以看到类似如下输出，定时任务开始正常运作了。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">56.413</span>  INFO <span class="number">34836</span> --- [           main] c.d.chapter71.Chapter71Application       : Started Chapter71Application in <span class="number">1.457</span> seconds (JVM running <span class="keyword">for</span> <span class="number">1.835</span>)</span><br><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">01.411</span>  INFO <span class="number">34836</span> --- [   scheduling-<span class="number">1</span>] com.didispace.chapter71.ScheduledTasks   : 现在时间：<span class="number">14</span>:<span class="number">57</span>:<span class="number">01</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">06.412</span>  INFO <span class="number">34836</span> --- [   scheduling-<span class="number">1</span>] com.didispace.chapter71.ScheduledTasks   : 现在时间：<span class="number">14</span>:<span class="number">57</span>:<span class="number">06</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">11.413</span>  INFO <span class="number">34836</span> --- [   scheduling-<span class="number">1</span>] com.didispace.chapter71.ScheduledTasks   : 现在时间：<span class="number">14</span>:<span class="number">57</span>:<span class="number">11</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">07</span>-<span class="number">13</span> <span class="number">14</span>:<span class="number">57</span>:<span class="number">16.413</span>  INFO <span class="number">34836</span> --- [   scheduling-<span class="number">1</span>] com.didispace.chapter71.ScheduledTasks   : 现在时间：<span class="number">14</span>:<span class="number">57</span>:<span class="number">16</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Scheduled详解"><a href="#Scheduled详解" class="headerlink" title="@Scheduled详解"></a><code>@Scheduled</code>详解</h3><p>在上面的入门例子中，使用了<code>@Scheduled(fixedRate = 5000)</code>注解来定义每过 5 秒执行的任务。对于<code>@Scheduled</code>的使用，从源码里看看有哪些配置：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable(Schedules.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scheduled {</span><br><span class="line"></span><br><span class="line">    String CRON_DISABLED = ScheduledTaskRegistrar.CRON_DISABLED;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">cron</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">zone</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">fixedDelay</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">fixedDelayString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">fixedRate</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">fixedRateString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">initialDelay</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">initialDelayString</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这些具体配置信息的含义如下：</p><ul><li><code>cron</code>：通过<code>cron</code>表达式来配置执行规则</li><li><code>zone</code>：cron 表达式解析时使用的时区</li><li><code>fixedDelay</code>：上一次执行结束到下一次执行开始的间隔时间（单位：ms）</li><li><code>fixedDelayString</code>：上一次任务执行结束到下一次执行开始的间隔时间，使用<code>java.time.Duration#parse</code>解析</li><li><code>fixedRate</code>：以固定间隔执行任务，即上一次任务执行开始到下一次执行开始的间隔时间（单位：ms），若在调度任务执行时，上一次任务还未执行完毕，会加入 worker 队列，等待上一次执行完成后立即执行下一次任务</li><li><code>fixedRateString</code>：与<code>fixedRate</code>逻辑一致,只是使用<code>java.time.Duration#parse</code>解析</li><li><code>initialDelay</code>：首次任务执行的延迟时间</li><li><code>initialDelayString</code>：首次任务执行的延迟时间,使用<code>java.time.Duration#parse</code>解析</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-Elasticsearch搜索</title>
      <link href="/2022/05/12/yuque/springboot-elasticsearch-sou-suo/"/>
      <url>/2022/05/12/yuque/springboot-elasticsearch-sou-suo/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、ElasticSearch-简介"><a href="#一、ElasticSearch-简介" class="headerlink" title="一、ElasticSearch 简介"></a>一、ElasticSearch 简介</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>ElasticSearch 是一个基于 Lucene 的搜索服务器。它提供了一个分布式多员工能力的全文搜索引擎，基于 RESTful web 接口。Elasticsearch 是用 Java 语言开发的，并作为 Apache 许可条款下的开放源码发布，是一种流行的企业级搜索引擎。<br>ElasticSearch 用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。</p><h3 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h3><ul><li>分布式的文档存储引擎</li><li>分布式的搜索引擎和分析引擎</li><li>分布式，支持 PB 级数据</li></ul><h3 id="3、使用场景"><a href="#3、使用场景" class="headerlink" title="3、使用场景"></a>3、使用场景</h3><ul><li>搜索领域：如百度、谷歌，全文检索等。</li><li>门户网站：访问统计、文章点赞、留言评论等。</li><li>广告推广：记录员工行为数据、消费趋势、员工群体进行定制推广等。</li><li>信息采集：记录应用的埋点数据、访问日志数据等，方便大数据进行分析。</li></ul><h2 id="二、ElasticSearch-基础概念"><a href="#二、ElasticSearch-基础概念" class="headerlink" title="二、ElasticSearch 基础概念"></a>二、ElasticSearch 基础概念</h2><h3 id="1、ElaticSearch-和-DB-的关系"><a href="#1、ElaticSearch-和-DB-的关系" class="headerlink" title="1、ElaticSearch 和 DB 的关系"></a>1、ElaticSearch 和 DB 的关系</h3><p>在 Elasticsearch 中，文档归属于一种类型 type，而这些类型存在于索引 index 中，可以列一些简单的不同点，来类比传统关系型数据库：</p><ul><li>Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</li><li>Elasticsearch -&gt; Indices -&gt; Types -&gt; Documents -&gt; Fields</li></ul><p>Elasticsearch 集群可以包含多个索引 indices，每一个索引可以包含多个类型 types，每一个类型包含多个文档 documents，然后每个文档包含多个字段 Fields。而在 DB 中可以有多个数据库 Databases，每个库中可以有多张表 Tables，没个表中又包含多行 Rows，每行包含多列 Columns。</p><table><thead><tr><th><strong>ES</strong></th><th><strong>MySql</strong></th></tr></thead><tbody><tr><td>字段</td><td>列</td></tr><tr><td>文档</td><td>一行数据</td></tr><tr><td>类型（已废弃）</td><td>表</td></tr><tr><td>索引</td><td>数据库</td></tr></tbody></table><h3 id="2、索引"><a href="#2、索引" class="headerlink" title="2、索引"></a>2、索引</h3><h4 id="索引基本概念（indices）"><a href="#索引基本概念（indices）" class="headerlink" title="索引基本概念（indices）"></a>索引基本概念（indices）</h4><p>索引是含义相同属性的文档集合，是 ElasticSearch 的一个逻辑存储，可以理解为关系型数据库中的数据库，ElasticSearch 可以把索引数据存放到一台服务器上，也可以 sharding 后存到多台服务器上，每个索引有一个或多个分片，每个分片可以有多个副本。</p><h4 id="索引类型（index-type）"><a href="#索引类型（index-type）" class="headerlink" title="索引类型（index_type）"></a>索引类型（index_type）</h4><p>索引可以定义一个或多个类型，文档必须属于一个类型。在 ElasticSearch 中，一个索引对象可以存储多个不同用途的对象，通过索引类型可以区分单个索引中的不同对象，可以理解为关系型数据库中的表。每个索引类型可以有不同的结构，但是不同的索引类型不能为相同的属性设置不同的类型。</p><h3 id="3、文档（document）"><a href="#3、文档（document）" class="headerlink" title="3、文档（document）"></a>3、<strong>文档（</strong>document<strong>）</strong></h3><p>文档是可以被索引的基本数据单位。存储在 ElasticSearch 中的主要实体叫文档 document，可以理解为关系型数据库中表的一行记录。每个文档由多个字段构成，ElasticSearch 是一个非结构化的数据库，每个文档可以有不同的字段，并且有一个唯一的标识符。</p><h3 id="4、映射（mapping）"><a href="#4、映射（mapping）" class="headerlink" title="4、映射（mapping）"></a>4、<strong>映射</strong>（mapping）</h3><p>ElasticSearch 的 Mapping 非常类似于静态语言中的数据类型：声明一个变量为 int 类型的变量，以后这个变量都只能存储 int 类型的数据。同样的，一个 number 类型的 mapping 字段只能存储 number 类型的数据。<br>同语言的数据类型相比，Mapping 还有一些其他的含义，Mapping 不仅告诉 ElasticSearch 一个 Field 中是什么类型的值， 它还告诉 ElasticSearch 如何索引数据以及数据是否能被搜索到。<br>ElaticSearch 默认是动态创建索引和索引类型的 Mapping 的。这就相当于无需定义 Solr 中的 Schema，无需指定各个字段的索引规则就可以索引文件，很方便。但有时方便就代表着不灵活。比如，ElasticSearch 默认一个字段是要做分词的，但有时要搜索匹配整个字段却不行。如有统计工作要记录每个城市出现的次数。对于 name 字段，若记录 new york 文本，ElasticSearch 可能会把它拆分成 new 和 york 这两个词，分别计算这个两个单词的次数，而不是期望的 new york。</p><h2 id="三、Spring-Data-Elasticsearch"><a href="#三、Spring-Data-Elasticsearch" class="headerlink" title="三、Spring Data Elasticsearch"></a>三、Spring Data Elasticsearch</h2><p>Spring Data Elasticsearch 是 Spring 提供的一种以 Spring Data 风格来操作数据存储的方式，它可以避免编写大量的样板代码。<br>Spring Data 的官网：<a href="https://spring.io/projects/spring-data">https://spring.io/projects/spring-data</a></p><h3 id="1、常用注解"><a href="#1、常用注解" class="headerlink" title="1、常用注解"></a>1、常用注解</h3><p>映射：Spring Data 通过注解来声明字段的映射属性，有下面的三个注解：</p><ul><li><code>@Document</code> 作用在类，标记实体类为文档对象，一般有四个属性<ul><li>indexName：对应索引库名称</li><li>type：对应在索引库中的类型</li><li>shards：分片数量，默认 5</li><li>replicas：副本数量，默认 1</li></ul></li><li><code>@Id</code> 作用在成员变量，标记一个字段作为 id 主键</li><li><code>@Field</code> 作用在成员变量，标记为文档的字段，并指定字段映射属性：<ul><li>type：字段类型，取值是枚举：FieldType</li><li>index：是否索引，布尔类型，默认是 true</li><li>store：是否存储，布尔类型，默认是 false</li><li>analyzer：分词器名称：ik_max_word</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(indexName = "article")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleSearchDTO</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = "ik_max_word")</span></span><br><span class="line">    <span class="keyword">private</span> String articleTitle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = "ik_max_word")</span></span><br><span class="line">    <span class="keyword">private</span> String articleContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2、ElasticsearchRestTemplate-用法"><a href="#2、ElasticsearchRestTemplate-用法" class="headerlink" title="2、ElasticsearchRestTemplate 用法"></a>2、ElasticsearchRestTemplate 用法</h3><p>在 ElasticsearchTemplate 中，执行查询的大多都是 query 开头，而 query 方法，第一个参数是 Query 的实现类</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636972524680-5bb4d687-ad46-4688-8b8e-21e725daf3f3.png#clientId=ue4dd3315-1894-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u57c79f3a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=456&amp;originWidth=684&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=43364&amp;status=done&amp;style=none&amp;taskId=u1e99038f-94b7-4cd6-b953-8943545dd13&amp;title=" alt="image.png"><br>源码中，NativeSearchQuery 的构造方法中，参数是 QueryBuilder</p><p>这个又是什么？<br>从名字分析，Query 查询，builder 构建，很清楚的分析出来，QueryBuilder 用来构建查询条件，过滤条件。就好比 SQL 语句后面 where name = “张三” 跟这个是一个意思。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636972583036-61ad1049-9b29-4aea-bac2-10015a891d4c.png#clientId=ue4dd3315-1894-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u7645850f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=287&amp;originWidth=994&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=39968&amp;status=done&amp;style=none&amp;taskId=u9078a908-0db8-45eb-be7c-be6edbd1aff&amp;title=" alt="image.png"><br>分析到这里基本上就差不多了，<strong>这里只是说简单使用</strong>，Spring 中提供了一个类 QueryBuilders ，里面有很多方法来完成各种各样的 QueryBuilder 的构建，字符串型的，Boolean 型的，match，Term 等。</p><p>##</p><h2 id="四、整合-Elasticsearch-实现博客搜索"><a href="#四、整合-Elasticsearch-实现博客搜索" class="headerlink" title="四、整合 Elasticsearch 实现博客搜索"></a>四、整合 Elasticsearch 实现博客搜索</h2><h3 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--Elasticsearch相关依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2、修改-SpringBoot-配置文件"><a href="#2、修改-SpringBoot-配置文件" class="headerlink" title="2、修改 SpringBoot 配置文件"></a>2、修改 SpringBoot 配置文件</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  elasticsearch:</span><br><span class="line">    rest:</span><br><span class="line">      uris: http:<span class="comment">//localhost:9200</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3、搜索实现类"><a href="#3、搜索实现类" class="headerlink" title="3、搜索实现类"></a>3、搜索实现类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service("esSearchStrategyImpl")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsSearchStrategyImpl</span> <span class="keyword">implements</span> <span class="title">SearchStrategy</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate elasticsearchRestTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ArticleSearchDTO&gt; <span class="title">searchArticle</span><span class="params">(String keywords)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(keywords)){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>  search(buildQuery(keywords));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索文章构造</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keywords 关键字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> es条件构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> NativeSearchQueryBuilder <span class="title">buildQuery</span><span class="params">(String keywords)</span> </span>{</span><br><span class="line">        <span class="comment">// 条件构造器</span></span><br><span class="line">        NativeSearchQueryBuilder nativeSearchQueryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder();</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 根据关键词搜索文章标题或内容</span></span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.boolQuery().should(QueryBuilders.matchQuery(<span class="string">"articleTitle"</span>, keywords))</span><br><span class="line">                        .should(QueryBuilders.matchQuery(<span class="string">"articleContent"</span>, keywords)))</span><br><span class="line">                .must(QueryBuilders.termQuery(<span class="string">"isDelete"</span>, FALSE))</span><br><span class="line">                .must(QueryBuilders.termQuery(<span class="string">"status"</span>, PUBLIC.getStatus()));</span><br><span class="line">        nativeSearchQueryBuilder.withQuery(boolQueryBuilder);</span><br><span class="line">        <span class="keyword">return</span> nativeSearchQueryBuilder;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章搜索结果高亮</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nativeSearchQueryBuilder es条件构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 搜索结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ArticleSearchDTO&gt; <span class="title">search</span><span class="params">(NativeSearchQueryBuilder nativeSearchQueryBuilder)</span> </span>{</span><br><span class="line">        <span class="comment">// 添加文章标题高亮</span></span><br><span class="line">        HighlightBuilder.Field titleField = <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"articleTitle"</span>);</span><br><span class="line">        titleField.preTags(PRE_TAG);</span><br><span class="line">        titleField.postTags(POST_TAG);</span><br><span class="line">        <span class="comment">// 添加文章内容高亮</span></span><br><span class="line">        HighlightBuilder.Field contentField = <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"articleContent"</span>);</span><br><span class="line">        contentField.preTags(PRE_TAG);</span><br><span class="line">        contentField.postTags(POST_TAG);</span><br><span class="line">        contentField.fragmentSize(<span class="number">200</span>);</span><br><span class="line">        nativeSearchQueryBuilder.withHighlightFields(titleField, contentField);</span><br><span class="line">        <span class="comment">// 搜索</span></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            SearchHits&lt;ArticleSearchDTO&gt; search = elasticsearchRestTemplate.search(nativeSearchQueryBuilder.build(), ArticleSearchDTO.class);</span><br><span class="line">            <span class="keyword">return</span> search.getSearchHits().stream().map(hit -&gt; {</span><br><span class="line">                ArticleSearchDTO article = hit.getContent();</span><br><span class="line">                <span class="comment">// 获取文章标题高亮数据</span></span><br><span class="line">                List&lt;String&gt; titleHighLightList = hit.getHighlightFields().get(<span class="string">"articleTitle"</span>);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(titleHighLightList)) {</span><br><span class="line">                    <span class="comment">// 替换标题数据</span></span><br><span class="line">                    article.setArticleTitle(titleHighLightList.get(<span class="number">0</span>));</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 获取文章内容高亮数据</span></span><br><span class="line">                List&lt;String&gt; contentHighLightList = hit.getHighlightFields().get(<span class="string">"articleContent"</span>);</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(contentHighLightList)) {</span><br><span class="line">                    <span class="comment">// 替换内容数据</span></span><br><span class="line">                    article.setArticleContent(contentHighLightList.get(contentHighLightList.size() - <span class="number">1</span>));</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> article;</span><br><span class="line">            }).collect(Collectors.toList());</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、使用-Maxwell-同步数据库与-Elasticsearch"><a href="#4、使用-Maxwell-同步数据库与-Elasticsearch" class="headerlink" title="4、使用 Maxwell 同步数据库与 Elasticsearch"></a>4、使用 Maxwell 同步数据库与 Elasticsearch</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = MAXWELL_QUEUE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxWellConsumer</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchMapper elasticsearchMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取监听信息</span></span><br><span class="line">        MaxwellDataDTO maxwellDataDTO = JSON.parseObject(<span class="keyword">new</span> String(data), MaxwellDataDTO.class);</span><br><span class="line">        <span class="comment">// 获取文章数据</span></span><br><span class="line">        Article article = JSON.parseObject(JSON.toJSONString(maxwellDataDTO.getData()), Article.class);</span><br><span class="line">        <span class="comment">// 判断操作类型</span></span><br><span class="line">        <span class="keyword">switch</span> (maxwellDataDTO.getType()) {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"insert"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"update"</span>:</span><br><span class="line">                <span class="comment">// 更新es文章</span></span><br><span class="line">                elasticsearchMapper.save(BeanCopyUtils.copyObject(article, ArticleSearchDTO.class));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"delete"</span>:</span><br><span class="line">                <span class="comment">// 删除文章</span></span><br><span class="line">                elasticsearchMapper.deleteById(article.getId());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="添加-ElasticsearchMapper-接口用于操作-Elasticsearch"><a href="#添加-ElasticsearchMapper-接口用于操作-Elasticsearch" class="headerlink" title="添加 ElasticsearchMapper 接口用于操作 Elasticsearch"></a>添加 ElasticsearchMapper 接口用于操作 Elasticsearch</h3><p><strong>继承 ElasticsearchRepository 接口，这样就拥有了一些基本的 Elasticsearch 数据操作方法，同时定义了一个衍生查询方法。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ElasticsearchMapper</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">ArticleSearchDTO</span>,<span class="title">Integer</span>&gt; </span>{</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-整合Redis</title>
      <link href="/2022/05/12/yuque/springboot-zheng-he-redis/"/>
      <url>/2022/05/12/yuque/springboot-zheng-he-redis/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Redis-概述"><a href="#Redis-概述" class="headerlink" title="Redis 概述"></a>Redis 概述</h2><h3 id="什么是-Redis"><a href="#什么是-Redis" class="headerlink" title="什么是 Redis"></a>什么是 Redis</h3><p>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD 许可）高性能非关系型（NoSQL）的键值对数据库。</p><p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、散列表、集合、有序集合。<br>与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10 万次读写操作，是已知性能最快的 Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA 脚本、LRU 驱动事件、多种集群方案。</p><h3 id="Redis-有哪些优缺点"><a href="#Redis-有哪些优缺点" class="headerlink" title="Redis 有哪些优缺点"></a>Redis 有哪些优缺点</h3><p><strong>优点</strong></p><ul><li>读写性能优异， Redis 能读的速度是 110000 次 / s，写的速度是 81000 次 / s。</li><li>支持数据持久化，支持 AOF 和 RDB 两种持久化方式。</li><li>数据结构丰富，除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。</li><li>支持主从复制，主机会自动将数据同步到从机，可以进行读写分离。</li><li>支持事务，Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。</li></ul><p><strong>缺点</strong></p><ul><li>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</li><li>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</li><li>Redis 不具备自动容错和恢复功能，主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。</li><li>主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。</li></ul><h3 id="为什么要用-Redis-为什么要用缓存"><a href="#为什么要用-Redis-为什么要用缓存" class="headerlink" title="为什么要用 Redis / 为什么要用缓存"></a>为什么要用 Redis / 为什么要用缓存</h3><p>主要从 “高性能” 和“高并发”这两点来看待这个问题。</p><p><strong>高性能</strong><br>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。再将该用户访问的数据存在缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636973753521-274030b3-f92a-4e7e-843b-6db3854ef87b.png#clientId=uff29a0a4-33a2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=469&amp;id=u52e619ea&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=469&amp;originWidth=729&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=42583&amp;status=done&amp;style=none&amp;taskId=ue8fd5520-cd97-4787-b102-8a5f1d64c08&amp;title=&amp;width=729" alt="image.png"><br><strong>高并发</strong><br>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636973805416-b6e075b4-8a37-4000-bec0-0cc959b7155b.png#clientId=uff29a0a4-33a2-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=472&amp;id=u003dc9ff&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=472&amp;originWidth=559&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=44975&amp;status=done&amp;style=none&amp;taskId=u2809f529-5cb4-405a-85ea-656e2cb4355&amp;title=&amp;width=559" alt="image.png"></p><p>##</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-application-yml"><a href="#配置-application-yml" class="headerlink" title="配置 application.yml"></a>配置 application.yml</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    database: <span class="number">0</span></span><br><span class="line">    host: localhost</span><br><span class="line">    port: <span class="number">6379</span></span><br></pre></td></tr></tbody></table></figure><h2 id="添加配置类"><a href="#添加配置类" class="headerlink" title="添加配置类"></a>添加配置类</h2><ul><li>redisTemplate 默认使用了 jdk 序列化方式存储了 kv</li><li>于是我们要自行对 redistTemplate 进行配置，方便我们的使用</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>{</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Redis-模板类"><a href="#Redis-模板类" class="headerlink" title="Redis 模板类"></a>Redis 模板类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Distance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.GeoResults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis操作接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/7 16:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisService</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">del</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys key值集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">del</span><span class="params">(List&lt;String&gt; keys)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getExpire</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hasKey</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta delta值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta delta值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递减后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回内部key的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">hGet</span><span class="params">(String key, String hashKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   内部key的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time    过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   内部key的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回hashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">hGetAll</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  hashMap值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map hashMap值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, ?&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hDel</span><span class="params">(String key, Object... hashKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hHasKey</span><span class="params">(String key, String hashKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta   递增条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta   递增条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递减后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset添加分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Double}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zIncr</span><span class="params">(String key, Object value, Double score)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset减少分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Double}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zDecr</span><span class="params">(String key, Object value, Double score)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset根据分数排名获取指定元素信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Map&lt;Object, Double&gt;}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;Object, Double&gt; <span class="title">zReverseRangeWithScore</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取zset指定元素分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Double}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zScore</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取zset所有分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Map}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;Object, Double&gt; <span class="title">zAllScore</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Object&gt; <span class="title">sMembers</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sAdd</span><span class="params">(String key, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回添加的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sAddExpire</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">sIsMember</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sSize</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除掉的数据量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sRemove</span><span class="params">(String key, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查询的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lSize</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">lIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPush</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPush</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPushAll</span><span class="params">(String key, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPushAll</span><span class="params">(String key, Long time, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 总量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向bitmap中新增值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b      状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">bitAdd</span><span class="params">(String key, <span class="keyword">int</span> offset, <span class="keyword">boolean</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从bitmap中获取偏移量的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">bitGet</span><span class="params">(String key, <span class="keyword">int</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bitmap的key值总和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 总和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">bitCount</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bitmap范围值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit  范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 开始偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long类型集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Long&gt; <span class="title">bitField</span><span class="params">(String key, <span class="keyword">int</span> limit, <span class="keyword">int</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有bitmap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 以二进制字节数组返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">byte</span>[] bitGetAll(String key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向hyperlog中添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Long}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hyperAdd</span><span class="params">(String key, Object... value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hyperlog元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Long} 元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hyperGet</span><span class="params">(String... key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hyperlog数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hyperDel</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加坐标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x    x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y    y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 地点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">geoAdd</span><span class="params">(String key, Double x, Double y, String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市名称获取坐标集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place 地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 坐标集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Point&gt; <span class="title">geoGetPointList</span><span class="params">(String key, Object... place)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个城市之间的距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeOne 地点1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeTow 地点2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Distance <span class="title">geoCalculationDistance</span><span class="params">(String key, String placeOne, String placeTow)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取附该地点附近的其他地点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place    地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> distance 附近的范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit    查几条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sort     排序规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回附近的地点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; geoNearByPlace(String key, String place, Distance distance, <span class="keyword">long</span> limit, Sort.Direction sort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取地点的hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place 地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">geoGetHash</span><span class="params">(String key, String... place)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Distance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.GeoResults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/7 17:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">RedisService</span> </span>{</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">del</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">del</span><span class="params">(List&lt;String&gt; keys)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getExpire</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hasKey</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hGet</span><span class="params">(String key, String hashKey)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">hGetAll</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, ?&gt; map)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hDel</span><span class="params">(String key, Object... hashKey)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hHasKey</span><span class="params">(String key, String hashKey)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zIncr</span><span class="params">(String key, Object value, Double score)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, score);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zDecr</span><span class="params">(String key, Object value, Double score)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, -score);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Double&gt; <span class="title">zReverseRangeWithScore</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end)</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zScore</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Double&gt; <span class="title">zAllScore</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(redisTemplate.opsForZSet().rangeWithScores(key, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sMembers</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sAdd</span><span class="params">(String key, Object... values)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sAddExpire</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>{</span><br><span class="line">        Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">sIsMember</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sSize</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sRemove</span><span class="params">(String key, Object... values)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lSize</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPush</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPush</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        Long index = redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPushAll</span><span class="params">(String key, Object... values)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> </span>{</span><br><span class="line">        Long count = redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">bitAdd</span><span class="params">(String key, <span class="keyword">int</span> offset, <span class="keyword">boolean</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setBit(key, offset, b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">bitGet</span><span class="params">(String key, <span class="keyword">int</span> offset)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().getBit(key, offset);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">bitCount</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">bitField</span><span class="params">(String key, <span class="keyword">int</span> limit, <span class="keyword">int</span> offset)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;List&lt;Long&gt;&gt;) con -&gt;</span><br><span class="line">                con.bitField(key.getBytes(),</span><br><span class="line">                        BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(limit)).valueAt(offset)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] bitGetAll(String key) {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;<span class="keyword">byte</span>[]&gt;) con -&gt; con.get(key.getBytes()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hyperAdd</span><span class="params">(String key, Object... value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().add(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hyperGet</span><span class="params">(String... key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().size(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hyperDel</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHyperLogLog().delete(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">geoAdd</span><span class="params">(String key, Double x, Double y, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo().add(key, <span class="keyword">new</span> Point(x, y), name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Point&gt; <span class="title">geoGetPointList</span><span class="params">(String key, Object... place)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo().position(key, place);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Distance <span class="title">geoCalculationDistance</span><span class="params">(String key, String placeOne, String placeTow)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .distance(key, placeOne, placeTow, RedisGeoCommands.DistanceUnit.KILOMETERS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; geoNearByPlace(String key, String place, Distance distance, <span class="keyword">long</span> limit, Sort.Direction sort) {</span><br><span class="line">        RedisGeoCommands.GeoRadiusCommandArgs args = RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().includeCoordinates();</span><br><span class="line">        <span class="comment">// 判断排序方式</span></span><br><span class="line">        <span class="keyword">if</span> (Sort.Direction.ASC == sort) {</span><br><span class="line">            args.sortAscending();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            args.sortDescending();</span><br><span class="line">        }</span><br><span class="line">        args.limit(limit);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .radius(key, place, distance, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">geoGetHash</span><span class="params">(String key, String... place)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .hash(key, place);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>#</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式消息中间件-概述</title>
      <link href="/2022/05/12/yuque/fen-bu-shi-xiao-xi-zhong-jian-jian-gai-shu/"/>
      <url>/2022/05/12/yuque/fen-bu-shi-xiao-xi-zhong-jian-jian-gai-shu/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="1-单体架构"><a href="#1-单体架构" class="headerlink" title="1. 单体架构"></a>1. 单体架构</h3><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396258585-0239087f-0b1a-4857-b9a9-affc60b0d8f6.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=383&amp;id=GZIW3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1049&amp;originWidth=1161&amp;originalType=binary%E2%88%B6=1&amp;size=260550&amp;status=done&amp;style=none&amp;width=424" alt="image.png"></p><h3 id="2-分布式系统架构"><a href="#2-分布式系统架构" class="headerlink" title="2. 分布式系统架构"></a>2. 分布式系统架构</h3><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396283321-50816017-863c-4241-a341-d7d25f7cdcfc.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_33%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=461&amp;id=cp1en&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1036&amp;originWidth=1145&amp;originalType=binary%E2%88%B6=1&amp;size=359146&amp;status=done&amp;style=none&amp;width=510" alt="image.png"></p><h3 id="3-基于消息中间件的分布式系统架构"><a href="#3-基于消息中间件的分布式系统架构" class="headerlink" title="3. 基于消息中间件的分布式系统架构"></a>3. 基于消息中间件的分布式系统架构</h3><hr><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396308260-9ff5a260-d40a-4d10-92f6-413299e01f62.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=718&amp;id=gO2pd&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=718&amp;originWidth=1252&amp;originalType=binary%E2%88%B6=1&amp;size=130796&amp;status=done&amp;style=none&amp;width=1252" alt="image.png"></p><h3 id="4-消息中间件概述"><a href="#4-消息中间件概述" class="headerlink" title="4. 消息中间件概述"></a>4. 消息中间件概述</h3><hr><h4 id="1-什么是消息中间件"><a href="#1-什么是消息中间件" class="headerlink" title="1. 什么是消息中间件"></a>1. 什么是消息中间件</h4><ul><li>利用高效可靠的消息传递机制进行平台无关的数据交流。</li><li>并基于数据通信来进行分布式系统的集成。</li><li>通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信。</li></ul><h4 id="2-消息中间件的应用场景"><a href="#2-消息中间件的应用场景" class="headerlink" title="2. 消息中间件的应用场景"></a>2. 消息中间件的应用场景</h4><ul><li>跨系统数据传递。</li><li>高并发流量削峰。</li><li>数据异步处理。</li><li>…</li></ul><h4 id="3-常用的消息中间件"><a href="#3-常用的消息中间件" class="headerlink" title="3. 常用的消息中间件"></a>3. 常用的消息中间件</h4><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>Kafka</li><li>RocketMQ</li></ul><h3 id="5-消息中间件核心设计"><a href="#5-消息中间件核心设计" class="headerlink" title="5. 消息中间件核心设计"></a>5. 消息中间件核心设计</h3><hr><h4 id="1-本质"><a href="#1-本质" class="headerlink" title="1. 本质"></a>1. 本质</h4><ul><li>一种具有接收数据、保存数据、发送数据等功能的网络应用。</li><li>和一般网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般都高于普通程序。</li></ul><h4 id="2-5-大核心组成"><a href="#2-5-大核心组成" class="headerlink" title="2. 5 大核心组成"></a>2. 5 大核心组成</h4><ul><li>协议</li><li>持久化机制</li><li>消息分发机制</li><li>高可用设计</li><li>高可靠设计</li></ul><h3 id="6-协议"><a href="#6-协议" class="headerlink" title="6. 协议"></a>6. 协议</h3><hr><h4 id="1-协议是什么"><a href="#1-协议是什么" class="headerlink" title="1. 协议是什么"></a>1. 协议是什么</h4><ul><li>协议是计算机之间通信时共同遵守的一组约定，都遵守相同的约定，计算机之间才能相互交流。</li><li>是对数据格式和计算机之间交互数据时必须遵守的规则的正式描述。</li><li>协议三要素：<ul><li>语法：即数据与控制信息的结构或格式；</li><li>语义：即需要发出何种控制信息，完成何种动作以及做出何种响应；</li><li>时序（同步）：即事件实现顺序的详细说明。</li></ul></li></ul><h4 id="2-常见协议"><a href="#2-常见协议" class="headerlink" title="2. 常见协议"></a>2. 常见协议</h4><ul><li>HTTP 三要素举例：<ul><li>语法：http 规定了请求报文和响应报文的具体格式。</li><li>语义：客户端主动发起的操作称为请求。</li><li>时序：一个请求对应一个响应。</li></ul></li><li>消息中间件常用的协议：<ul><li>OpenWire</li><li>AMQP</li><li>MQTT</li><li>Kafka</li><li>OpenMessage</li></ul></li></ul><h4 id="3-AMQP"><a href="#3-AMQP" class="headerlink" title="3. AMQP"></a>3. AMQP</h4><ul><li>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议。</li><li>04 年 JPMorgan Chase（摩根大通集团）联合其他公司共同设计。</li><li>特性：事务支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势。</li><li>RabbitMQ、ActiveMQ</li></ul><h4 id="4-MQTT"><a href="#4-MQTT" class="headerlink" title="4. MQTT"></a>4. MQTT</h4><ul><li>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输是 IBM 开发的一个即时通讯协议，物联网系统架构中的重要组成部分。</li><li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计。</li><li>适用场景：适用于计算能力有限、低带宽、网络不稳定的场景。</li><li>RabbitMQ、ActiveMQ</li></ul><h4 id="5-OpenMessage"><a href="#5-OpenMessage" class="headerlink" title="5. OpenMessage"></a>5. OpenMessage</h4><ul><li>OpenMessage 是近一两年由阿里发起，与雅虎、滴滴出行、Streamlio 等公司共同参与创立的分布式消息中间件、流处理领域的应用开发标准。</li><li>是国内首个在全球范围内发起的分布式消息领域国际标准。</li><li>特性：结构简单、解析快、有事务设计、有持久化设计。</li><li>Apache、RocketMQ</li></ul><h4 id="6-Kafka-协议"><a href="#6-Kafka-协议" class="headerlink" title="6. Kafka 协议"></a>6. Kafka 协议</h4><ul><li>Kafka 协议是基于 TCP 的二进制协议。消息内部是通过长度来分隔，由一些基本数据类型组成。</li><li>特性：结构简单、解析快、无事物设计、有持久化设计。</li><li>Kafka</li></ul><h3 id="7-持久化"><a href="#7-持久化" class="headerlink" title="7. 持久化"></a>7. 持久化</h3><hr><h4 id="1-持久化是什么"><a href="#1-持久化是什么" class="headerlink" title="1. 持久化是什么"></a>1. 持久化是什么</h4><ul><li>简单来说就是将数据存入磁盘，而不是存在内存中随服务重启而消失，使数据能够永久保存叫持久化。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396333033-fc08090e-5631-4f4c-8933-b276a7dc4911.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=547&amp;id=UxJtQ&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=547&amp;originWidth=1262&amp;originalType=binary%E2%88%B6=1&amp;size=142826&amp;status=done&amp;style=none&amp;width=1262" alt="image.png"></p><h4 id="2-常用持久化方式"><a href="#2-常用持久化方式" class="headerlink" title="2. 常用持久化方式"></a>2. 常用持久化方式</h4><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>文件系统</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>数据库</td><td>支持</td><td>/</td><td>/</td><td>/</td></tr></tbody></table><h3 id="8-消息分发"><a href="#8-消息分发" class="headerlink" title="8. 消息分发"></a>8. 消息分发</h3><hr><h4 id="1-为什么要有消息分发策略"><a href="#1-为什么要有消息分发策略" class="headerlink" title="1.为什么要有消息分发策略"></a>1.为什么要有消息分发策略</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396347464-f2c4265a-688c-4ab0-a0d5-47025e327473.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_35%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=676&amp;id=OStmW&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=676&amp;originWidth=1212&amp;originalType=binary%E2%88%B6=1&amp;size=213602&amp;status=done&amp;style=none&amp;width=1212" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396364530-f541dffd-f525-4e7c-befc-86ee118c31ca.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_35%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=474&amp;id=yGASi&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=474&amp;originWidth=1232&amp;originalType=binary%E2%88%B6=1&amp;size=128234&amp;status=done&amp;style=none&amp;width=1232" alt="image.png"></p><h4 id="2-常见的消息中间件分发策略"><a href="#2-常见的消息中间件分发策略" class="headerlink" title="2. 常见的消息中间件分发策略"></a>2. 常见的消息中间件分发策略</h4><table><thead><tr><th></th><th>ActiveMQ</th><th>RabbitMQ</th><th>Kafka</th><th>RocketMQ</th></tr></thead><tbody><tr><td>发布订阅</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>轮询分发</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>公平分发</td><td>/</td><td>支持</td><td>支持</td><td>/</td></tr><tr><td>重发</td><td>支持</td><td>支持</td><td>/</td><td>支持</td></tr><tr><td>消息拉取</td><td>/</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="9-高可用"><a href="#9-高可用" class="headerlink" title="9. 高可用"></a>9. 高可用</h3><hr><ul><li>高可用性是指产品在规定的条件和规定的时刻或时刻区间内处于可执行规定功能状态的能力。</li><li>当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</li></ul><h4 id="1-Master-Slave-主从共享数据的部署方式"><a href="#1-Master-Slave-主从共享数据的部署方式" class="headerlink" title="1. Master-Slave 主从共享数据的部署方式"></a>1. Master-Slave 主从共享数据的部署方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396385662-04581646-0dc6-4dab-bc14-91a13c784a1d.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_35%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=605&amp;id=ci0Kv&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=605&amp;originWidth=1211&amp;originalType=binary%E2%88%B6=1&amp;size=109739&amp;status=done&amp;style=none&amp;width=1211" alt="image.png"></p><h4 id="2-Master-Slave-主从同步的部署方式"><a href="#2-Master-Slave-主从同步的部署方式" class="headerlink" title="2. Master-Slave 主从同步的部署方式"></a>2. Master-Slave 主从同步的部署方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396397997-7ab168d1-2b21-4cbf-a99d-1c7aaae7e995.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_35%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=308&amp;id=EXbFI&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=589&amp;originWidth=1222&amp;originalType=binary%E2%88%B6=1&amp;size=143008&amp;status=done&amp;style=none&amp;width=640" alt="image.png"></p><h4 id="3-Broker-Cluster-多主集群同步部署方式"><a href="#3-Broker-Cluster-多主集群同步部署方式" class="headerlink" title="3. Broker-Cluster 多主集群同步部署方式"></a>3. Broker-Cluster 多主集群同步部署方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396419606-4efc1fa1-6b64-4be3-81ec-309ce66095ec.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_34%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=302&amp;id=lQjku&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=575&amp;originWidth=1190&amp;originalType=binary%E2%88%B6=1&amp;size=139127&amp;status=done&amp;style=none&amp;width=624" alt="image.png"></p><h4 id="4-Broker-Cluster-多主集群转发部署方式"><a href="#4-Broker-Cluster-多主集群转发部署方式" class="headerlink" title="4. Broker-Cluster 多主集群转发部署方式"></a>4. Broker-Cluster 多主集群转发部署方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396435302-cbba647f-9d28-4203-8a85-afb5c2d438f3.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_30%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=336&amp;id=lm8cI&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=635&amp;originWidth=1050&amp;originalType=binary%E2%88%B6=1&amp;size=118559&amp;status=done&amp;style=none&amp;width=556" alt="image.png"></p><h4 id="5-Master-Slave-与-Broker-Cluster-结合"><a href="#5-Master-Slave-与-Broker-Cluster-结合" class="headerlink" title="5. Master-Slave 与 Broker-Cluster 结合"></a>5. Master-Slave 与 Broker-Cluster 结合</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1206640/1589396454927-1a6b00f4-e95d-4365-ad46-bc1ef24e1957.png?x-oss-process=image%2Fwatermark%2Ctype_d3F5LW1pY3JvaGVp%2Csize_36%2Ctext_5Y2O5aSP57Sr56m5%2Ccolor_FFFFFF%2Cshadow_50%2Ct_80%2Cg_se%2Cx_10%2Cy_10#height=610&amp;id=FhmEW&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=610&amp;originWidth=1248&amp;originalType=binary%E2%88%B6=1&amp;size=180812&amp;status=done&amp;style=none&amp;width=1248" alt="image.png"></p><h3 id="10-高可靠"><a href="#10-高可靠" class="headerlink" title="10. 高可靠"></a>10. 高可靠</h3><hr><ul><li>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。</li><li>在高并发业务场景下，如果不能保证系统的可靠性，那造成的损失将会非常严重。</li><li>保证消息中间件的高可靠性，可以从以下几方面考虑：<ul><li>消息传输可靠：通过协议来保证系统间数据解析的正确性。</li><li>消息存储可靠：通过持久化来保证消息的存储可靠性。</li></ul></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>服务解耦：服务拆分之后如何通信？强依赖还是弱依赖？<ul><li>强依赖：服务之间互相调用</li><li>弱依赖：就使用 mq 来通知调用</li></ul></li><li>削峰填谷：流量很大的场景下，如何对应用服务进行抗压；削峰填谷的意思是：将高峰和低峰时期的速率做一个均衡，如下游服务处理缓慢，就可以将请求缓存起来，慢速的去消费</li><li>异步化缓冲：有些业务逻辑可以异步化操作，只需要做到 *<em>最终一致性 *</em>即可</li></ul><h2 id="应用思考点"><a href="#应用思考点" class="headerlink" title="应用思考点"></a>应用思考点</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/651749/1632664075614-b69e5061-e315-4a0e-a4cc-6275a9b236be.png#clientId=u883f18f5-762e-4&amp;from=paste&amp;height=398&amp;id=u630ee111&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=796&amp;originWidth=1768&amp;originalType=binary%E2%88%B6=1&amp;size=541760&amp;status=done&amp;style=none&amp;taskId=u4f5c061b-d7b9-48a1-8048-c3dc7e71f76&amp;width=884" alt="image.png"></p><ul><li>生产端可靠性投递：消息发出去了，一定要与数据库保证一个原子性</li><li>消费端冥等：生产端要做到可靠性投递，可能会投递多次</li></ul><p>以上两点，笔者在这里目前无法理解是个什么意思</p><p>另外是 mq 本身的问题：</p><ul><li>高可用</li><li>低延迟：在高压情况下，消息低延迟</li><li>消息可靠性：投递到了消息队列中，如何保证消息不丢失；如磁盘发生损坏，有没有其他的解决方案</li><li>堆积能力：在高峰情况下，消息能堆积多少</li><li>可扩展性：是否支持天然的无感知扩容</li></ul><p>在选型的时候，需要针对您当前的业务需求来考虑，以上的各种点，是否能满足您的业务需求</p><h2 id="业界主流的分布式消息队列"><a href="#业界主流的分布式消息队列" class="headerlink" title="业界主流的分布式消息队列"></a>业界主流的分布式消息队列</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/651749/1632664225849-6169538f-5058-4eed-909a-bb8b395d542a.png#clientId=u883f18f5-762e-4&amp;from=paste&amp;height=434&amp;id=u7a7248b4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=868&amp;originWidth=1320&amp;originalType=binary%E2%88%B6=1&amp;size=188787&amp;status=done&amp;style=none&amp;taskId=u4616789e-12ab-4b33-a65d-da9d17a3ff6&amp;width=660" alt="image.png"></p><ul><li>Active：阿帕奇旗下的</li><li>Rabbit：</li><li>Rocket：阿里巴巴捐给阿帕奇的，支持分布式事务</li><li>Kafka：搞吞吐量、海量数据的存储</li></ul><p>##</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-缓存工作原理</title>
      <link href="/2022/05/12/yuque/mybatis-huan-cun-gong-zuo-yuan-li/"/>
      <url>/2022/05/12/yuque/mybatis-huan-cun-gong-zuo-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在计算机的世界中，缓存无处不在，操作系统有操作系统的缓存，数据库也会有数据库的缓存，各种中间件如 Redis 也是用来充当缓存的作用，编程语言中又可以利用内存来作为缓存。自然的，作为一款优秀的 ORM 框架，MyBatis 中又岂能少得了缓存！</p><h2 id="MyBatis-缓存"><a href="#MyBatis-缓存" class="headerlink" title="MyBatis 缓存"></a>MyBatis 缓存</h2><p>MyBatis 中的缓存相关类都在 cache 包下面，而且定义了一个顶级接口 Cache，默认只有一个实现类 PerpetualCache，PerpetualCache 中是内部维护了一个 HashMap 来实现缓存。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636610029120-6e6c68a3-e066-44e9-86e5-7962ede0cae5.png#clientId=u89089fd1-5c4a-4&amp;from=paste&amp;height=717&amp;id=u2ad9d323&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=717&amp;originWidth=1594&amp;originalType=binary%E2%88%B6=1&amp;size=162677&amp;status=done&amp;style=none&amp;taskId=u2974b4a0-1b3a-4748-b95c-3b6c4908139&amp;width=1594" alt="image.png"><br>需要注意的是 decorators 包下面的所有类也实现了 Cache 接口，那么为什么我还是要说 Cache 只有一个实现类呢？其实看名字就知道了，这个包里面全部是装饰器，也就是说这其实是装饰器模式的一种实现。我们随意打开一个查看<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636610248027-aca88735-8b85-4d71-915d-ffa6c9549e46.png#clientId=u89089fd1-5c4a-4&amp;from=paste&amp;height=697&amp;id=uae93a540&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=697&amp;originWidth=1060&amp;originalType=binary%E2%88%B6=1&amp;size=119868&amp;status=done&amp;style=none&amp;taskId=uac9936a3-646d-464d-88a6-c4c3a1e97c2&amp;width=1060" alt="image.png"><br>可以看到，最终都是调用了 delegate 来实现，只是将部分功能做了增强，<strong>其本身都需要依赖 Cache 的唯一实现类 PerpetualCache(因为装饰器内需要传入 Cache 对象，故而只能传入 PerpetualCache 对象，因为接口是无法直接 new 出来传进去的)</strong>。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636612022446-bcb70f6a-fb76-4f21-a6d7-db20875c2e7d.png#clientId=u7efd2f44-45b5-4&amp;from=paste&amp;id=u2cb5d1cc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=435&amp;originWidth=907&amp;originalType=url%E2%88%B6=1&amp;size=74934&amp;status=done&amp;style=none&amp;taskId=u1d856e11-9887-486b-beb7-3f067bd2ef1" alt="image.png"><br>在 MyBatis 中存在两种缓存，即<strong>一级缓存</strong>和<strong>二级缓存</strong>。</p><h2 id="Mybatis-的一级缓存"><a href="#Mybatis-的一级缓存" class="headerlink" title="Mybatis 的一级缓存"></a>Mybatis 的一级缓存</h2><p>先说 Mybatis 的一级缓存，因为这是如果不手动配置，他是自己默认开启的一级缓存，一级缓存只是相对于同一个 SqlSession 而言，跨 SqlSession 是无效的。参数和 SQL 完全一样的情况下，使用同一个 SqlSession 对象调用一个 Mapper 方法，往往只执行一次 SQL，因为使用 SelSession 第一次查询后，MyBatis 会将其放在缓存中，以后再查询的时候，如果没有声明需要刷新，并且缓存没有超时的情况下，SqlSession 都会取出当前缓存的数据，而不会再次发送 SQL 到数据库。<br>来画个图表示一下一级缓存<br><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1622446679184-9514bf6b-d910-4f7a-90ea-74950821bc06.png#clientId=u541c90c5-bf34-4&amp;from=ui&amp;id=u9fb1d643&amp;margin=%5Bobject%20Object%5D&amp;name=2021-05-31-15-32-44-989511.png&amp;originHeight=430&amp;originWidth=1075&amp;originalType=binary%E2%88%B6=1&amp;size=6761&amp;status=done&amp;style=shadow&amp;taskId=ub5118806-0a4d-4913-9e66-bd0931c0e8f" alt="2021-05-31-15-32-44-989511.png"><br>那面试官肯定会说，直接从数据库查不就行了，为啥要一级缓存呢？<br>当使用 MyBatis 开启一次和数据库的会话时, MyBatis 会创建出一个 SqlSession 对象表示一次与数据库之间的信息传递，在执行 SQL 语句的过程中,们可能会反复执行完全相同的查询语句，如果不采取一些措施，每一次查询都会查询一次数据库,而如果在极短的时间内做了很多次相同的查询操作，那么这些查询返回的结果很可能相同。为了减轻数据库的开销，所以 Mybatis 默认开启了一级缓存。<br>SqlSession 一级缓存的工作流程：</p><ol><li>对于某个查询，根据 statementId,params,rowBounds 来构建一个 key 值，根据这个 key 值去缓存 Cache 中取出对应的 key 值存储的缓存结果</li><li>判断从 Cache 中根据特定的 key 值取的数据数据是否为空，即是否命中；</li><li>如果命中，则直接将缓存结果返回；</li><li>如果没命中：<ol><li>去数据库中查询数据，得到查询结果；</li><li>将 key 和查询到的结果分别作为 key,value 对存储到 Cache 中；</li><li>将查询结果返回；</li></ol></li></ol><p>一级缓存的不足：<br>使用一级缓存的时候，因为缓存不能跨会话共享，不同的会话之间对于相同的数据可能有不一样的缓存。在有多个会话或者分布式环境下，会存在脏数据的问题。如果要解决这个问题，就要用到二级缓存。MyBatis 一级缓存（MyBaits 称其为 Local Cache）无法关闭，但是有两种级别可选：</p><ol><li>session 级别的缓存，在同一个 sqlSession 内，对同样的查询将不再查询数据库，直接从缓存中。</li><li>statement 级别的缓存，避坑： 为了避免这个问题，可以将一级缓存的级别设为 statement 级别的，这样每次查询结束都会清掉一级缓存。</li></ol><h2 id="Mybatis-的二级缓存"><a href="#Mybatis-的二级缓存" class="headerlink" title="Mybatis 的二级缓存"></a>Mybatis 的二级缓存</h2><p>二级缓存是用来解决一级缓存不能跨会话共享的问题的，范围是 namespace 级别的，可以被多个 SqlSession 共享（只要是同一个接口里面的相同方法，都可以共享），生命周期和应用同步。如果你的 MyBatis 使用了二级缓存，并且你的 Mapper 和 select 语句也配置使用了二级缓存，那么在执行 select 查询的时候，MyBatis 会先从二级缓存中取输入，其次才是一级缓存，即 MyBatis 查询数据的顺序是：二级缓存 —&gt; 一级缓存 —&gt; 数据库。<br>作为一个作用范围更广的缓存，它肯定是在 SqlSession 的外层，否则不可能被多个 SqlSession 共享。而一级缓存是在 SqlSession 内部的，所以第一个问题，肯定是工作在一级缓存之前，也就是只有取不到二级缓存的情况下才到一个会话中去取一级缓存。第二个问题，二级缓存放在哪个对象中维护呢？ 要跨会话共享的话，SqlSession 本身和它里面的 BaseExecutor 已经满足不了需求了，那我们应该在 BaseExecutor 之外创建一个对象。<br>实际上 MyBatis 用了一个装饰器的类来维护，就是 CachingExecutor。如果启用了二级缓存，MyBatis 在创建 Executor 对象的时候会对 Executor 进行装饰。CachingExecutor 对于查询请求，会判断二级缓存是否有缓存结果，如果有就直接返回，如果没有委派交给真正的查询器 Executor 实现类，比如 SimpleExecutor 来执行查询，再走到一级缓存的流程。最后会把结果缓存起来，并且返回给用户。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636612367861-0453ea8c-1430-483c-b438-11136eaa9053.png#clientId=u7efd2f44-45b5-4&amp;from=paste&amp;id=u31b04a6a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=236&amp;originWidth=483&amp;originalType=url%E2%88%B6=1&amp;size=21719&amp;status=done&amp;style=none&amp;taskId=u34380706-967e-48fb-9a8d-56fdac8667f" alt="image.png"></p><p>Mybatis 的二级缓存一般如果不对他进行设置，他是不会开启的，那怎么能够开启二级缓存呢？<br>1.MyBatis 配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span> = <span class="string">"cacheEnabled"</span> <span class="attr">value</span> = <span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>2.MyBatis 要求返回的 POJO 必须是可序列化的<br>3.Mapper 的 xml 配置文件中加入 标签</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache type=<span class="string">"org.apache.ibatis.cache.impl.PerpetualCache"</span></span><br><span class="line">    size=<span class="string">"1024"</span></span><br><span class="line">eviction=<span class="string">"LRU"</span></span><br><span class="line">flushInterval=<span class="string">"120000"</span></span><br><span class="line">readOnly=<span class="string">"false"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure><p>基本上就是这样。这个简单语句的效果如下:</p><ul><li>映射语句文件中的所有 select 语句的结果将会被缓存。</li><li>映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。</li><li>缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。</li><li>缓存不会定时进行刷新（也就是说，没有刷新间隔）。</li><li>缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。</li><li>缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。</li></ul><p>这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。可用的清除策略有：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeAliasRegistry.registerAlias(<span class="string">"PERPETUAL"</span>, PerpetualCache.class);</span><br><span class="line">typeAliasRegistry.registerAlias(<span class="string">"FIFO"</span>, FifoCache.class);</span><br><span class="line">typeAliasRegistry.registerAlias(<span class="string">"LRU"</span>, LruCache.class);</span><br><span class="line">typeAliasRegistry.registerAlias(<span class="string">"SOFT"</span>, SoftCache.class);</span><br><span class="line">typeAliasRegistry.registerAlias(<span class="string">"WEAK"</span>, WeakCache.class);</span><br></pre></td></tr></tbody></table></figure><ul><li>PERPETUAL : 选择 PERPETUAL 来命名缓存，暗示这是一个最底层的缓存，数据一旦存储进来，永不清除.好像这种缓存不怎么受待见。</li><li>FIFO : 先进先出：按对象进入缓存的顺序来移除它们</li><li>LRU : 最近最少使用的：移除最长时间不被使用的对象。</li><li>SOFT : 软引用：移除基于垃圾回收器状态和软引用规则的对象。</li><li>WEAK : 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</li></ul><p>大家虽然看着 PERPETUAL 排在了第一位，但是它可不是默认的，在 Mybatis 的缓存策略里面，默认的是 LRU 。<br>PERPETUAL :<br>源代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerpetualCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PerpetualCache</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看着是不是有点眼熟，它怎么就只是包装了 HashMap ?<br>既然使用 HashMap，那么必然就会有 Key，那么他们的 Key 是怎么设计的?<br>CacheKey:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheKey</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1146682552656046210L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> CacheKey NULL_CACHE_KEY = <span class="keyword">new</span> NullCacheKey();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_MULTIPLYER = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_HASHCODE = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> multiplier;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> hashcode; <span class="comment">//用于表示CacheKey的哈希码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> checksum; <span class="comment">//总和校验，当出现复合key的时候，分布计算每个key的哈希码，然后求总和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;<span class="comment">//当出现复合key的时候，计算key的总个数</span></span><br><span class="line">    <span class="comment">// 8/21/2017 - Sonarlint flags this as needing to be marked transient.  While true if content is not serializable, this is not always true and thus should not be marked transient.</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; updateList;<span class="comment">//当出现复合key的时候，保存每个key</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至于内部如何初始化，如何进行操作，有兴趣的可以去阅读一下源码，导入个源码包，打开自己看一下。<br>FIFO: 先进先出缓冲淘汰策略</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FifoCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate; <span class="comment">//被装饰的Cache对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Object&gt; keyList;<span class="comment">//用于记录key 进入缓存的先后顺序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//记录了缓存页的上限，超过该值需要清理缓存（FIFO）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FifoCache</span><span class="params">(Cache delegate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.keyList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">1024</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在 FIFO 淘汰策略中使用了 Java 中的 Deque,而 Deque 一种常用的数据结构，可以将队列看做是一种特殊的线性表，该结构遵循的先进先出原则。Java 中，LinkedList 实现了 Queue 接口,因为 LinkedList 进行插入、删除操作效率较高。<br>看完这个源码的时候，是不是就感觉源码其实也没有那么难看懂，里面都是已经掌握好的知识，只不过中间做了一些操作，进行了一些封装。<br>LRU : 最近最少使用的缓存策略<br>需要看的源码则是在 Mybatis 中的源码，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LruCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; keyMap;</span><br><span class="line">    <span class="keyword">private</span> Object eldestKey;<span class="comment">//记录最少被使用的缓存项key</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LruCache</span><span class="params">(Cache delegate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        setSize(<span class="number">1024</span>);<span class="comment">//重新设置缓存的大小，会重置KeyMap 字段 如果到达上限 则更新eldestKey</span></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>{</span><br><span class="line">        delegate.putObject(key, value);</span><br><span class="line">        <span class="comment">// 删除最近未使用的key</span></span><br><span class="line">        cycleKeyList(key);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SOFT: 基于垃圾回收器状态和软引用规则的对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>{</span><br><span class="line">    <span class="comment">//在SoftCache 中，最近使用的一部分缓存项不会被GC回收，这就是通过将其value添加到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Object&gt; hardLinksToAvoidGarbageCollection;</span><br><span class="line">    <span class="comment">//引用队列，用于记录GC回收的缓存项所对应的SoftEntry对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReferenceQueue&lt;Object&gt; queueOfGarbageCollectedEntries;</span><br><span class="line">    <span class="comment">//底层被修饰的Cache 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line">    <span class="comment">//连接的个数，默认是256</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numberOfHardLinks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SoftCache</span><span class="params">(Cache delegate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.numberOfHardLinks = <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">this</span>.hardLinksToAvoidGarbageCollection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.queueOfGarbageCollectedEntries = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>{</span><br><span class="line">        <span class="comment">// 清除被GC回收的缓存项</span></span><br><span class="line">        removeGarbageCollectedItems();</span><br><span class="line">        <span class="comment">// 向缓存中添加缓存项</span></span><br><span class="line">        delegate.putObject(key, <span class="keyword">new</span> SoftEntry(key, value, queueOfGarbageCollectedEntries));</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>{</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 查找对应的缓存项</span></span><br><span class="line">        <span class="meta">@SuppressWarnings("unchecked")</span> <span class="comment">// assumed delegate cache is totally managed by this cache</span></span><br><span class="line">        SoftReference&lt;Object&gt; softReference = (SoftReference&lt;Object&gt;) delegate.getObject(key);</span><br><span class="line">        <span class="keyword">if</span> (softReference != <span class="keyword">null</span>) {</span><br><span class="line">            result = softReference.get();</span><br><span class="line">            <span class="comment">// 已经被GC 回收</span></span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) {</span><br><span class="line">                <span class="comment">// 从缓存中清除对应的缓存项</span></span><br><span class="line">                delegate.removeObject(key);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// See #586 (and #335) modifications need more than a read lock</span></span><br><span class="line">                <span class="keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) {</span><br><span class="line">                    hardLinksToAvoidGarbageCollection.addFirst(result);</span><br><span class="line">                    <span class="keyword">if</span> (hardLinksToAvoidGarbageCollection.size() &gt; numberOfHardLinks) {</span><br><span class="line">                        hardLinksToAvoidGarbageCollection.removeLast();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) {</span><br><span class="line">            <span class="comment">// 清理强引用集合</span></span><br><span class="line">            hardLinksToAvoidGarbageCollection.clear();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 清理被GC回收的缓存项</span></span><br><span class="line">        removeGarbageCollectedItems();</span><br><span class="line">        delegate.clear();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//其中指向key的引用是强引用，而指向value的引用是弱引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SoftEntry</span> <span class="keyword">extends</span> <span class="title">SoftReference</span>&lt;<span class="title">Object</span>&gt; </span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Object key;</span><br><span class="line"></span><br><span class="line">        SoftEntry(Object key, Object value, ReferenceQueue&lt;Object&gt; garbageCollectionQueue) {</span><br><span class="line">            <span class="keyword">super</span>(value, garbageCollectionQueue);</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>WEAK : 基于垃圾收集器状态和弱引用规则的对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeakCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;Object&gt; hardLinksToAvoidGarbageCollection;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReferenceQueue&lt;Object&gt; queueOfGarbageCollectedEntries;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Cache delegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numberOfHardLinks;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeakCache</span><span class="params">(Cache delegate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">        <span class="keyword">this</span>.numberOfHardLinks = <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">this</span>.hardLinksToAvoidGarbageCollection = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.queueOfGarbageCollectedEntries = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>WeakCache 在实现上与 SoftCache 几乎相同，只是把引用对象由 SoftReference 软引用换成了 WeakReference 弱引用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-动态SQL</title>
      <link href="/2022/05/12/yuque/mybatis-dong-tai-sql/"/>
      <url>/2022/05/12/yuque/mybatis-dong-tai-sql/</url>
      
        <content type="html"><![CDATA[<p>在 Structs 流行的时代 OGNL 可是必会的数据渲染技术。它全称 Object Graph Navigation Language，作用是降低对数据层访问的难度，它拥有类型转换、访问对象方法、操作集合对象等功能。目前已经很少通过 OGNL 来访问数据层了，目前国内大部分的 ORM 框架是 Mybatis，而 Mybatis 中的动态 SQL 技术运用了 OGNL。</p><h2 id="Mybatis-中的-OGNL"><a href="#Mybatis-中的-OGNL" class="headerlink" title="Mybatis 中的 OGNL"></a>Mybatis 中的 OGNL</h2><p>不少人在 Mybatis 的 Mapper 文件中写过这样的判断：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"field!='' and field!= null"</span>&gt;</span></span><br><span class="line">  and some_col = #{field}</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当 field 不为空字符并且不为 null 的情况下增加一个查询条件。其中 test 就是一个 OGNL 表达式。Mybatis 中的 OGNL 表达式主要有两种用途。</p><h3 id="条件断言"><a href="#条件断言" class="headerlink" title="条件断言"></a>条件断言</h3><p>这种是最常用的。执行动态 SQL 的条件断言，常用的有这些表达式：</p><ul><li><code>b1 or b2</code> 条件 或</li><li><code>b1 and b2</code> 条件 与</li><li><code>!b1</code> 取反，也可以写作 not b1</li><li><code>b1 == b2,b1 eq b2</code> 判断两个值相等</li><li><code>b1 != b2,b1 neq b2</code> 判断两个值不想等</li><li><code>b1 lt b2</code> 判断 b1 小于（less than）b2</li><li><code>b1 gt b2</code> 判断 b1 小于（greater than）b2</li><li><code>b1 lte b2</code>：判断 b1 小于等于 b2</li><li><code>b1 gte b2</code>：判断 b1 大于等于 b2</li><li><code>b1 in b2</code> 判断 b2 包含 b1</li><li><code>b1 not in b2</code> 判断 b2 不包含 b1</li></ul><p>这些表达式经常和 test 配合。</p><h3 id="四则运算赋值"><a href="#四则运算赋值" class="headerlink" title="四则运算赋值"></a>四则运算赋值</h3><p>还有一些表达式用来赋值或者增强属性。经常用来做模糊搜索的 <code>bind</code>标签：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">"nameLike"</span> <span class="attr">value</span>=<span class="string">"'%'+ name + '%'"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里的<code>value</code>也属于 OGNL 表达式 <code>e1+e2</code>，字符串是拼接，数字的话就是加法运算，可以引申出肯定还有：</p><ul><li><code>e1*e2</code> 乘法</li><li><code>e1/e2</code> 除法</li><li><code>e1-e2</code> 减法</li><li><code>e1%e2</code> 取模</li></ul><h3 id="类的内置方法"><a href="#类的内置方法" class="headerlink" title="类的内置方法"></a>类的内置方法</h3><p>其实 Mybatis 的 Mapper.xml 中还可以使用对象的内置方法，比如需要判断一个<code>java.util.Collection</code>集合是否为空，可以这么写：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"collection!=null and collection.size()&gt; 0"</span>&gt;</span></span><br><span class="line">  and some_col = #{some_val}</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里就使用了对象的内置方法<code>Collection.size()</code>。<br>还可以调用自定义对象<code>CollectionUtils</code>的静态方法来判断集合是否为空：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionUtils</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNotEmpty</span><span class="params">( Collection&lt;?&gt; collection)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (collection != <span class="keyword">null</span> &amp;&amp; !collection.isEmpty());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么上面的<code>&lt;if&gt;</code>判断改为:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"@cn.fcant.util.CollectionUtils@isNotEmpty(collection)"</span>&gt;</span></span><br><span class="line">  and some_col = #{some_val}</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里要带上类的全限定名。</p><h3 id="取值操作"><a href="#取值操作" class="headerlink" title="取值操作"></a>取值操作</h3><p>取值操作的话，如果是对象直接<code>e.property</code>，如果是集合或者<code>Map</code>可以<code>e[index|key]</code>，通过索引或者键名来取值。分别举个例子：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 对象取属性</span><br><span class="line">user.username</span><br><span class="line"># 集合取元素</span><br><span class="line">array[1]</span><br><span class="line"># map 取值</span><br><span class="line">map['username']</span><br></pre></td></tr></tbody></table></figure><p>其实静态属性也能取值调用，跟上面的静态方法类似：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@cn</span>.fcant.Cache<span class="meta">@user</span></span><br></pre></td></tr></tbody></table></figure><p>对应 Java 代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User user = <span class="keyword">new</span> User (<span class="string">"Fcant"</span>) ;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h3><p>上面的取值除了可以做判断还可以用来 SQL 参数赋值：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 常用的赋值方式 --&gt;</span></span><br><span class="line">  username = #{username}</span><br><span class="line">  <span class="comment">&lt;!-- $ 也可以赋值 --&gt;</span></span><br><span class="line">  and user_id =${userId}</span><br><span class="line">  <span class="comment">&lt;!-- 对象取属性 --&gt;</span></span><br><span class="line">  and id = ${user.id}</span><br><span class="line">  <span class="comment">&lt;!-- Math.abs  双@简写 --&gt;</span></span><br><span class="line">  and age = ${@@abs(-12345678)}</span><br><span class="line">  <span class="comment">&lt;!-- 调用枚举 --&gt;</span></span><br><span class="line">  and gender =${@cn.fcant.GenderEnum@MALE.ordinal()}</span><br><span class="line">  and id=${@cn.fcant.Cache@user.userId}</span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>通过<code>${}</code>符号可以用 OGNL 表达式给 SQL 参数赋值。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-使用PageHelper分页</title>
      <link href="/2022/05/12/yuque/mybatis-shi-yong-pagehelper-fen-ye/"/>
      <url>/2022/05/12/yuque/mybatis-shi-yong-pagehelper-fen-ye/</url>
      
        <content type="html"><![CDATA[<h2 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h2><p>只引入 PageHelper 不会自动适配 SpringBoot 失效，还需要整合依赖 pagehelper-spring-boot-autoconfigure</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pagehelper分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mybatis-plus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="2、配置文件配置相应的参数"><a href="#2、配置文件配置相应的参数" class="headerlink" title="2、配置文件配置相应的参数"></a>2、配置文件配置相应的参数</h2><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">auto-dialect:</span> <span class="string">on</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">support-methods-arguments:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page-size-zero:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></tbody></table></figure><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect 属性来指定分页插件是否开启断言。</span></span><br><span class="line"><span class="string">pagehelper.helper-dialect=on</span></span><br><span class="line"><span class="comment">#分页合理化参数，默认值为 false 。当该参数设置为 true 时， pageNum&lt;=0 时会查询第一页， pageNum&gt;pages （超过总数时），会查询最后一页。</span></span><br><span class="line"><span class="string">pagehelper.reasonable=true</span></span><br><span class="line"><span class="comment">#支持通过Mapper接口参数传递page参数,默认值为falset</span></span><br><span class="line"><span class="string">pagehelper.support-methods-arguments=true</span></span><br><span class="line"><span class="comment">#默认值为 false ，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit =0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。</span></span><br><span class="line"><span class="string">pagehelper.pageSizeZero=true</span></span><br><span class="line"><span class="comment">#为了支持 startPage(Object params) 方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值</span></span><br><span class="line"><span class="string">pagehelper.params=count=countSql</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看后台文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conditionVO 条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> ApiResponse&lt;PageResult&lt;ArticleBackDTO&gt;&gt;} 后台文章列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@ApiOperation(value = "查看后台文章")</span></span><br><span class="line"><span class="meta">@GetMapping("/admin/articles")</span></span><br><span class="line"><span class="keyword">public</span> ApiResponse&lt;PageResult&lt;ArticleBackDTO&gt;&gt; listArticleBacks(ConditionVO conditionVO) {</span><br><span class="line">    <span class="keyword">return</span> ApiResponse.ok(articleService.listArticleBacks(conditionVO));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageResult&lt;ArticleBackDTO&gt; <span class="title">listArticleBacks</span><span class="params">(ConditionVO condition)</span> </span>{</span><br><span class="line">    <span class="comment">// 查询文章总量</span></span><br><span class="line">    Integer count = articleMapper.countArticleBacks(condition);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 查询后台文章</span></span><br><span class="line">    PageHelper.startPage(condition.getCurrent(), condition.getSize());</span><br><span class="line">    List&lt;ArticleBackDTO&gt; articleBackDTOList = articleMapper.listArticleBacks(condition);</span><br><span class="line">    <span class="comment">// 查询文章点赞量和浏览量</span></span><br><span class="line">    Map&lt;Object, Double&gt; viewsCountMap = redisService.zAllScore(ARTICLE_VIEWS_COUNT);</span><br><span class="line">    Map&lt;String, Object&gt; likeCountMap = redisService.hGetAll(ARTICLE_LIKE_COUNT);</span><br><span class="line">    <span class="comment">// 封装点赞量和浏览量</span></span><br><span class="line">    articleBackDTOList.forEach(item -&gt; {</span><br><span class="line">        Double viewsCount = viewsCountMap.get(item.getId());</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(viewsCount)) {</span><br><span class="line">            item.setViewsCount(viewsCount.intValue());</span><br><span class="line">        }</span><br><span class="line">        item.setLikeCount((Integer) likeCountMap.get(item.getId().toString()));</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageResult&lt;&gt;(articleBackDTOList, count);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4、使用提示"><a href="#4、使用提示" class="headerlink" title="4、使用提示"></a>4、使用提示</h2><ul><li>只有紧跟在<code>PageHelper.startPage()</code>方法后的第一个 Mybatis 的查询（Select）方法会被分页。</li><li>请不要在系统中配置多个分页插件(使用 Spring 时,mybatis-config.xml 和 Spring 配置方式，请选择其中一种，不要同时配置多个分页插件)！</li><li>对于带有 for update 的 sql，会抛出运行时异常，对于这样的 sql 建议手动分页，毕竟这样的 sql 需要重视。</li><li>由于嵌套结果方式会导致结果集被折叠，因此分页查询的结果在折叠后总数会减少，所以无法保证分页结果数量正确。</li></ul><h2 id="5-源码分析"><a href="#5-源码分析" class="headerlink" title="5. 源码分析"></a>5. 源码分析</h2><p>我们先来看看 startPage 方法。进入此方法，发现一堆方法重载，最后进入真正的 <code>startPage</code> 方法，有 5 个参数，如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum      页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize     每页显示数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count        是否进行count查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reasonable   分页合理化,null时用默认配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSizeZero true且pageSize=0时返回全部结果，false时分页,null时用默认配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">Page&lt;E&gt; <span class="title">startPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, <span class="keyword">boolean</span> count, Boolean reasonable, Boolean pageSizeZero)</span> </span>{</span><br><span class="line">    Page&lt;E&gt; page = <span class="keyword">new</span> Page&lt;E&gt;(pageNum, pageSize, count);</span><br><span class="line">    page.setReasonable(reasonable);</span><br><span class="line">    page.setPageSizeZero(pageSizeZero);</span><br><span class="line">    <span class="comment">//当已经执行过orderBy的时候</span></span><br><span class="line">    Page&lt;E&gt; oldPage = getLocalPage();</span><br><span class="line">    <span class="keyword">if</span> (oldPage != <span class="keyword">null</span> &amp;&amp; oldPage.isOrderByOnly()) {</span><br><span class="line">        page.setOrderBy(oldPage.getOrderBy());</span><br><span class="line">    }</span><br><span class="line">    setLocalPage(page);</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>getLocalPage</code> 和<code>setLocalPage</code> 方法做了什么操作？</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础分页方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuzh</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PageMethod</span> </span>{</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Page&gt; LOCAL_PAGE = <span class="keyword">new</span> ThreadLocal&lt;Page&gt;();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">boolean</span> DEFAULT_COUNT = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 Page 参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLocalPage</span><span class="params">(Page page)</span> </span>{</span><br><span class="line">        LOCAL_PAGE.set(page);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Page 参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Page&lt;T&gt; <span class="title">getLocalPage</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> LOCAL_PAGE.get();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除本地变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearPage</span><span class="params">()</span> </span>{</span><br><span class="line">        LOCAL_PAGE.remove();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取任意查询方法的count总数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> select</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">count</span><span class="params">(ISelect select)</span> </span>{</span><br><span class="line">        Page&lt;?&gt; page = startPage(<span class="number">1</span>, -<span class="number">1</span>, <span class="keyword">true</span>);</span><br><span class="line">        select.doSelect();</span><br><span class="line">        <span class="keyword">return</span> page.getTotal();</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>原来是将 page 放入了 <code>ThreadLocal&lt;Page&gt;</code> 中。<code>ThreadLocal</code>是每个线程独有的变量，与其他线程不影响，是放置 page 的好地方。<code>setLocalPage</code>之后，一定有地方 <code>getLocalPage</code></p><h3 id="Spring-Boot-为我们做了什么"><a href="#Spring-Boot-为我们做了什么" class="headerlink" title="Spring Boot 为我们做了什么"></a>Spring Boot 为我们做了什么</h3><p>我们找到 PageHelper 的自动配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(SqlSessionFactory.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(PageHelperProperties.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(MybatisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageHelperAutoConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SqlSessionFactory&gt; sqlSessionFactoryList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPageInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        PageInterceptor interceptor = <span class="keyword">new</span> PageInterceptor();</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//先把一般方式配置的属性放进去</span></span><br><span class="line">        properties.putAll(pageHelperProperties());</span><br><span class="line">        <span class="comment">//在把特殊配置放进去，由于close-conn 利用上面方式时，属性名就是 close-conn 而不是 closeConn，所以需要额外的一步</span></span><br><span class="line">        properties.putAll(<span class="keyword">this</span>.properties.getProperties());</span><br><span class="line">        interceptor.setProperties(properties);</span><br><span class="line">        <span class="keyword">for</span> (SqlSessionFactory sqlSessionFactory : sqlSessionFactoryList) {</span><br><span class="line">            <span class="comment">// 添加inteceptor到 mybatis 中</span></span><br><span class="line">            sqlSessionFactory.getConfiguration().addInterceptor(interceptor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>我们会发现，Spring Boot 在启动的时候会调用 <code>addPageInterceptor()</code>方法，为所有的 <code>SqlSessionFactory</code>添加 PageHelper 的拦截器。<br>分页插件的使用，首先是在 Mybatis 里面配置了分页拦截器（PageInterceptor），即在执行相关 SQL 之前会拦截做一点事情，所以应该就是在执行<code>selectList</code>的时候，会自动为 SQL 加上<code>limit 1,8</code>。</p><h3 id="PageHelper-实际拦截-SQL"><a href="#PageHelper-实际拦截-SQL" class="headerlink" title="PageHelper 实际拦截 SQL"></a>PageHelper 实际拦截 SQL</h3><p>Mybatis 拦截器可以对下面 4 种对象进行拦截：</p><table><thead><tr><th><strong>拦截对象</strong></th><th><strong>拦截方法</strong></th><th><strong>方法作用</strong></th></tr></thead><tbody><tr><td><strong>Executor</strong></td><td>update</td><td>对应 insert,delete,update 语句</td></tr><tr><td></td><td>query</td><td>对应 select 语句</td></tr><tr><td></td><td>flushStatements</td><td>刷新 Statement</td></tr><tr><td></td><td>commit</td><td>提交事务</td></tr><tr><td></td><td>rollback</td><td>回滚事务</td></tr><tr><td></td><td>getTransaction</td><td>获取事务</td></tr><tr><td></td><td>close</td><td>关闭事务</td></tr><tr><td></td><td>isClosed</td><td>判断事务是否关闭</td></tr><tr><td><strong>StatementHandler</strong></td><td>prepare</td><td>预编译 SQL</td></tr><tr><td></td><td>parameterize</td><td>设置参数</td></tr><tr><td></td><td>batch</td><td>批处理</td></tr><tr><td></td><td>update</td><td>对应 insert,delete,update 语句</td></tr><tr><td></td><td>query</td><td>对应 select 语句</td></tr><tr><td><strong>ParameterHandler</strong></td><td>getParameterObject</td><td>获取参数</td></tr><tr><td></td><td>setParameters</td><td>设置参数</td></tr><tr><td><strong>ResultSetHandler</strong></td><td>handleResultSets</td><td>处理结果集</td></tr><tr><td></td><td>handleOutputParameters</td><td>处理存储过程出参</td></tr></tbody></table><ul><li>Executor：mybatis 的内部执行器，作为调度核心负责调用 StatementHandler 操作数据库，并把结果集通过 ResultSetHandler 进行自动映射</li><li>StatementHandler： 封装了 JDBC Statement 操作，是 sql 语法的构建器，负责和数据库进行交互执行 sql 语句</li><li>ParameterHandler：作为处理 sql 参数设置的对象，主要实现读取参数和对 PreparedStatement 的参数进行赋值</li><li>ResultSetHandler：处理 Statement 执行完成后返回结果集的接口对象，mybatis 通过它把 ResultSet 集合映射成实体对象</li></ul><p>而 PageHelper 就是拦截 Excutor 的 query 方法，来看一下在 stater 中自动加载的 PageInterceptor interceptor = new PageInterceptor();分页拦截器源码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(</span></span><br><span class="line"><span class="meta">        {</span></span><br><span class="line"><span class="meta">                @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}),</span></span><br><span class="line"><span class="meta">                @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class}),</span></span><br><span class="line"><span class="meta">        }</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Dialect dialect;</span><br><span class="line">    <span class="keyword">private</span> String countSuffix = <span class="string">"_COUNT"</span>;</span><br><span class="line">    <span class="keyword">protected</span> Cache&lt;String, MappedStatement&gt; msCountMap = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> String default_dialect_class = <span class="string">"com.github.pagehelper.PageHelper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Object[] args = invocation.getArgs();</span><br><span class="line">            MappedStatement ms = (MappedStatement) args[<span class="number">0</span>];</span><br><span class="line">            Object parameter = args[<span class="number">1</span>];</span><br><span class="line">            RowBounds rowBounds = (RowBounds) args[<span class="number">2</span>];</span><br><span class="line">            ResultHandler resultHandler = (ResultHandler) args[<span class="number">3</span>];</span><br><span class="line">            Executor executor = (Executor) invocation.getTarget();</span><br><span class="line">            CacheKey cacheKey;</span><br><span class="line">            BoundSql boundSql;</span><br><span class="line">            <span class="comment">//由于逻辑关系，只会进入一次</span></span><br><span class="line">            <span class="keyword">if</span> (args.length == <span class="number">4</span>) {</span><br><span class="line">                <span class="comment">//4 个参数时</span></span><br><span class="line">                boundSql = ms.getBoundSql(parameter);</span><br><span class="line">                cacheKey = executor.createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//6 个参数时</span></span><br><span class="line">                cacheKey = (CacheKey) args[<span class="number">4</span>];</span><br><span class="line">                boundSql = (BoundSql) args[<span class="number">5</span>];</span><br><span class="line">            }</span><br><span class="line">            checkDialectExists();</span><br><span class="line">            <span class="comment">//对 boundSql 的拦截处理</span></span><br><span class="line">            <span class="keyword">if</span> (dialect <span class="keyword">instanceof</span> BoundSqlInterceptor.Chain) {</span><br><span class="line">                boundSql = ((BoundSqlInterceptor.Chain) dialect).doBoundSql(BoundSqlInterceptor.Type.ORIGINAL, boundSql, cacheKey);</span><br><span class="line">            }</span><br><span class="line">            List resultList;</span><br><span class="line">            <span class="comment">//调用方法判断是否需要进行分页，如果不需要，直接返回结果</span></span><br><span class="line">            <span class="keyword">if</span> (!dialect.skip(ms, parameter, rowBounds)) {</span><br><span class="line">                <span class="comment">//判断是否需要进行 count 查询</span></span><br><span class="line">                <span class="keyword">if</span> (dialect.beforeCount(ms, parameter, rowBounds)) {</span><br><span class="line">                    <span class="comment">//查询总数</span></span><br><span class="line">                    Long count = count(executor, ms, parameter, rowBounds, <span class="keyword">null</span>, boundSql);</span><br><span class="line">                    <span class="comment">//处理查询总数，返回 true 时继续分页查询，false 时直接返回</span></span><br><span class="line">                    <span class="keyword">if</span> (!dialect.afterCount(count, parameter, rowBounds)) {</span><br><span class="line">                        <span class="comment">//当查询总数为 0 时，直接返回空的结果</span></span><br><span class="line">                        <span class="keyword">return</span> dialect.afterPage(<span class="keyword">new</span> ArrayList(), parameter, rowBounds);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                resultList = ExecutorUtil.pageQuery(dialect, executor,</span><br><span class="line">                        ms, parameter, rowBounds, resultHandler, boundSql, cacheKey);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">//rowBounds用参数值，不使用分页插件处理时，仍然支持默认的内存分页</span></span><br><span class="line">                resultList = executor.query(ms, parameter, rowBounds, resultHandler, cacheKey, boundSql);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> dialect.afterPage(resultList, parameter, rowBounds);</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span>(dialect != <span class="keyword">null</span>){</span><br><span class="line">                dialect.afterAll();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>其中<code>resultList = ExecutorUtil.pageQuery(。。。);</code>是关键代码，继续看<br>转到 ExecutorUtil 抽象类的<code>pageQuery</code>方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">pageQuery</span><span class="params">(Dialect dialect, Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql, CacheKey cacheKey)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">    <span class="keyword">if</span>(!dialect.beforePage(ms, parameter, rowBounds)) {</span><br><span class="line">        <span class="keyword">return</span> executor.query(ms, parameter, RowBounds.DEFAULT, resultHandler, cacheKey, boundSql);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        parameter = dialect.processParameterObject(ms, parameter, boundSql, cacheKey);</span><br><span class="line">        String pageSql = dialect.getPageSql(ms, boundSql, parameter, rowBounds, cacheKey);</span><br><span class="line">        BoundSql pageBoundSql = <span class="keyword">new</span> BoundSql(ms.getConfiguration(), pageSql, boundSql.getParameterMappings(), parameter);</span><br><span class="line">        Map&lt;String, Object&gt; additionalParameters = getAdditionalParameter(boundSql);</span><br><span class="line">        Iterator var12 = additionalParameters.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var12.hasNext()) {</span><br><span class="line">            String key = (String)var12.next();</span><br><span class="line">            pageBoundSql.setAdditionalParameter(key, additionalParameters.get(key));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> executor.query(ms, parameter, RowBounds.DEFAULT, resultHandler, cacheKey, pageBoundSql);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在抽象类 AbstractHelperDialect 的<code>getPageSql</code>获取到对应的 Page 对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPageSql</span><span class="params">(MappedStatement ms, BoundSql boundSql, Object parameterObject, RowBounds rowBounds, CacheKey pageKey)</span> </span>{</span><br><span class="line">    String sql = boundSql.getSql();</span><br><span class="line">    Page page = <span class="keyword">this</span>.getLocalPage();</span><br><span class="line">    String orderBy = page.getOrderBy();</span><br><span class="line">    <span class="keyword">if</span>(StringUtil.isNotEmpty(orderBy)) {</span><br><span class="line">        pageKey.update(orderBy);</span><br><span class="line">        sql = OrderByParser.converToOrderBySql(sql, orderBy);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> page.isOrderByOnly()?sql:<span class="keyword">this</span>.getPageSql(sql, page, pageKey);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>进入到 MySqlDialect 类的<code>getPageSql</code>方法进行 SQL 封装，根据 page 对象信息增加 Limit。分页的信息就是这么拼装起来的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPageSql</span><span class="params">(String sql, Page page, CacheKey pageKey)</span> </span>{</span><br><span class="line">    StringBuilder sqlBuilder = <span class="keyword">new</span> StringBuilder(sql.length() + <span class="number">14</span>);</span><br><span class="line">    sqlBuilder.append(sql);</span><br><span class="line">    <span class="keyword">if</span>(page.getStartRow() == <span class="number">0</span>) {</span><br><span class="line">        sqlBuilder.append(<span class="string">" LIMIT ? "</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        sqlBuilder.append(<span class="string">" LIMIT ?, ? "</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> sqlBuilder.toString();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将最后拼装好的 SQL 返回给 DefaultSqlSession 执行查询并返回</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">        <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">    } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">        <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        ErrorContext.instance().reset();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此整个查询过程完成，原来 PageHelper 的分页功能是通过 Limit 拼接 SQL 实现的。</p><p>PageHelper 的分页原理，最核心的部分是实现了 MyBatis 的 Interceptor 接口，从而将分页参数拦截在执行 sql 之前，拼装出分页 sql 到数据库中执行。<br>初始化自动配置的时候，将 PageInterceptor 初始化并加入 MyBatis 拦截器，记录在 interceptorChain 中。<br>执行的时候，PageHelper 首先将 page 需求记录在 <code>ThreadLocal&lt;Page&gt;</code> 中，然后在拦截的时候，从 <code>ThreadLocal&lt;Page&gt;</code> 中取出 page，拼装出分页 sql，然后执行。<br>同时将结果分页信息（包括当前页，每页条数，总页数，总记录数等）设置回 page，让业务代码可以获取。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>PageHelper 作为 GitHub 上现在近 10K 的开源分页框架,也许代码深度和广度不及主流市场框架和技术,虽然在功能的实现和原理上,造轮子的难度不高,源码也很清晰,但是在很大程度上解决了很多基于 MyBatis 的分页技术难题,简化并提示了广大开发者的效率,这才是开发者们在开发的路上应该向往并为之拼搏的方向和道路. 作为受益者,也不应当仅仅是对其进行基本的使用,开发之余,也应该关注一些框架的拓展,对框架的底层有一定程度上的了解,并为之拓展和优化</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 分页 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-拦截器插件例子(敏感信息加密)</title>
      <link href="/2022/05/12/yuque/mybatis-lan-jie-qi-cha-jian-li-zi-min-gan-xin-xi-jia-mi/"/>
      <url>/2022/05/12/yuque/mybatis-lan-jie-qi-cha-jian-li-zi-min-gan-xin-xi-jia-mi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在学习 PageHelper 分页插件的时候，对于其如何和 Mybatis 结合进行拦截，还是有些朦胧，这里通过一个例子实现自定义的 Mtbatis 拦截器插件。</p><h2 id="2、什么是-Mybatis-Plugin"><a href="#2、什么是-Mybatis-Plugin" class="headerlink" title="2、什么是 Mybatis Plugin"></a>2、什么是 Mybatis Plugin</h2><p>在 Mybatis 官方文档中，对于 Mybatis plugin 的的介绍是这样的：<br>MyBatis 允许在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语句执行拦截</span></span><br><span class="line">Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</span><br><span class="line"><span class="comment">// 参数获取、设置时进行拦截</span></span><br><span class="line">ParameterHandler (getParameterObject, setParameters)</span><br><span class="line"><span class="comment">// 对返回结果进行拦截</span></span><br><span class="line">ResultSetHandler (handleResultSets, handleOutputParameters)</span><br><span class="line"><span class="comment">//sql语句拦截</span></span><br><span class="line">StatementHandler (prepare, parameterize, batch, update, query)</span><br></pre></td></tr></tbody></table></figure><p>简而言之，即在执行 sql 的整个周期中，可以任意切入到某一点对 sql 的参数、sql 执行结果集、sql 语句本身等进行切面处理。基于这个特性，便可以使用其需要进行加密的数据进行切面统一加密处理了（分页插件 pageHelper 就是这样实现数据库分页查询的）。</p><h2 id="3、实现基于注解的敏感信息加解密拦截器"><a href="#3、实现基于注解的敏感信息加解密拦截器" class="headerlink" title="3、实现基于注解的敏感信息加解密拦截器"></a>3、实现基于注解的敏感信息加解密拦截器</h2><h3 id="3-1-实现思路"><a href="#3-1-实现思路" class="headerlink" title="3.1 实现思路"></a>3.1 实现思路</h3><p>对于数据的加密与解密，应当存在两个拦截器对数据进行拦截操作，参照官方文档，因此此处应当使用<code>ParameterHandler</code>拦截器对入参进行加密<br>使用<code>ResultSetHandler</code>拦截器对出参进行解密操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1624105454369-373d0309-8056-4cca-bfe5-13ef52f59427.png#clientId=u78ce95a8-0f8e-4&amp;from=ui&amp;id=ucaf1a127&amp;margin=%5Bobject%20Object%5D&amp;name=2021-06-19-20-20-08-703234.png&amp;originHeight=352&amp;originWidth=502&amp;originalType=binary%E2%88%B6=3&amp;size=531401&amp;status=done&amp;style=shadow&amp;taskId=u994f8515-0cb7-4e51-b090-59e521078a2" alt="2021-06-19-20-20-08-703234.png"><br>目标需要加密、解密的字段可能需要灵活变更，此时定义一个注解，对需要加密的字段进行注解，那么便可以配合拦截器对需要的数据进行加密与解密操作了。<br>Mybatis 的<code>interceptor</code>接口有以下方法需要实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主要参数拦截方法</span></span><br><span class="line">    <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mybatis插件链</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>{<span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义插件配置文件方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>{}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-定义需要加密解密的敏感信息注解"><a href="#3-2-定义需要加密解密的敏感信息注解" class="headerlink" title="3.2 定义需要加密解密的敏感信息注解"></a>3.2 定义需要加密解密的敏感信息注解</h3><p>定义注解敏感信息类（如实体类 POJO\PO）的注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解敏感信息类的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target({ ElementType.TYPE })</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SensitiveData {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>定义注解敏感信息类中敏感字段的注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注解敏感信息类中敏感字段的注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target({ ElementType.Field })</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SensitiveField {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-定义加密接口及其实现类"><a href="#3-3-定义加密接口及其实现类" class="headerlink" title="3.3 定义加密接口及其实现类"></a>3.3 定义加密接口及其实现类</h3><p>定义加密接口，方便以后拓展加密方法（如 AES 加密算法拓展支持 PBE 算法，只需要注入时指定一下便可）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EncryptUtil</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> declaredFields paramsObject所声明的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramsObject   mapper中paramsType的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException 字段不可访问异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">encrypt</span><span class="params">(Field[] declaredFields, T paramsObject)</span> <span class="keyword">throws</span> IllegalAccessException</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>EncryptUtil 的 AES 加密实现类，此处 AESUtil 为自封装的 AES 加密工具，需要的小伙伴可以自行封装，本文不提供。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESEncrypt</span> <span class="keyword">implements</span> <span class="title">EncryptUtil</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AESUtil aesUtil;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> declaredFields paramsObject所声明的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramsObject   mapper中paramsType的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException 字段不可访问异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">encrypt</span><span class="params">(Field[] declaredFields, T paramsObject)</span> <span class="keyword">throws</span> IllegalAccessException </span>{</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) {</span><br><span class="line">            <span class="comment">//取出所有被EncryptDecryptField注解的字段</span></span><br><span class="line">            SensitiveField sensitiveField = field.getAnnotation(SensitiveField.class);</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(sensitiveField)) {</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                Object object = field.get(paramsObject);</span><br><span class="line">                <span class="comment">//暂时只实现String类型的加密</span></span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) {</span><br><span class="line">                    String value = (String) object;</span><br><span class="line">                    <span class="comment">//加密  这里我使用自定义的AES加密工具</span></span><br><span class="line">                    field.set(paramsObject, aesUtil.encrypt(value));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> paramsObject;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-4-实现入参加密拦截器"><a href="#3-4-实现入参加密拦截器" class="headerlink" title="3.4 实现入参加密拦截器"></a>3.4 实现入参加密拦截器</h3><p>Mybatis 包中的<code>org.apache.ibatis.plugin.Interceptor</code>拦截器接口要求实现以下三个方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//核心拦截逻辑</span></span><br><span class="line">    <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截器链</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>{<span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);}</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义配置文件操作</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>{ }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因此，参考官方文档的示例，自定义一个入参加密拦截器。<br><code>@Intercepts</code> 注解开启拦截器，<code>@Signature</code> 注解定义拦截器的实际类型。<br><code>@Signature</code>中</p><ul><li>type 属性指定当前拦截器使用<code>StatementHandler</code>、<code>ResultSetHandler</code>、<code>ParameterHandler</code>，<code>Executor</code>的一种</li><li><code>method</code> 属性指定使用以上四种类型的具体方法（可进入 class 内部查看其方法）。</li><li>args 属性指定预编译语句</li></ul><p>此处使用了 <code>ParameterHandler.setParamters()</code>方法，拦截 mapper.xml 中<code>paramsType</code>的实例（即在每个含有<code>paramsType</code>属性 mapper 语句中，都执行该拦截器，对<code>paramsType</code>的实例进行拦截处理）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts({</span></span><br><span class="line"><span class="meta">    @Signature(type = ParameterHandler.class, method = "setParameters", args = PreparedStatement.class),</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EncryptDecryptUtil encryptUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptInterceptor</span><span class="params">(EncryptDecryptUtil encryptUtil)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.encryptUtil = encryptUtil;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="comment">//@Signature 指定了 type= parameterHandler 后，这里的 invocation.getTarget() 便是parameterHandler</span></span><br><span class="line">        <span class="comment">//若指定ResultSetHandler ，这里则能强转为ResultSetHandler</span></span><br><span class="line">        ParameterHandler parameterHandler = (ParameterHandler) invocation.getTarget();</span><br><span class="line">        <span class="comment">// 获取参数对像，即 mapper 中 paramsType 的实例</span></span><br><span class="line">        Field parameterField = parameterHandler.getClass().getDeclaredField(<span class="string">"parameterObject"</span>);</span><br><span class="line">        parameterField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//取出实例</span></span><br><span class="line">        Object parameterObject = parameterField.get(parameterHandler);</span><br><span class="line">        <span class="keyword">if</span> (parameterObject != <span class="keyword">null</span>) {</span><br><span class="line">            Class&lt;?&gt; parameterObjectClass = parameterObject.getClass();</span><br><span class="line">            <span class="comment">//校验该实例的类是否被@SensitiveData所注解</span></span><br><span class="line">            SensitiveData sensitiveData = AnnotationUtils.findAnnotation(parameterObjectClass, SensitiveData.class);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(sensitiveData)) {</span><br><span class="line">                <span class="comment">//取出当前当前类所有字段，传入加密方法</span></span><br><span class="line">                Field[] declaredFields = parameterObjectClass.getDeclaredFields();</span><br><span class="line">                encryptUtil.encrypt(declaredFields, parameterObject);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切记配置，否则当前拦截器不会加入拦截器链</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object o)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(o, <span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义配置写入，没有自定义配置的可以直接置空此方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此完成自定义加密拦截加密。</p><h3 id="3-5-定义解密接口及其实现类"><a href="#3-5-定义解密接口及其实现类" class="headerlink" title="3.5 定义解密接口及其实现类"></a>3.5 定义解密接口及其实现类</h3><p>解密接口，其中 result 为 mapper.xml 中<code>resultType</code>的实例。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DecryptUtil</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解密</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> result resultType的实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException 字段不可访问异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">decrypt</span><span class="params">(T result)</span> <span class="keyword">throws</span> IllegalAccessException</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>解密接口 AES 工具解密实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESDecrypt</span> <span class="keyword">implements</span> <span class="title">DecryptUtil</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AESUtil aesUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result resultType的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException 字段不可访问异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">decrypt</span><span class="params">(T result)</span> <span class="keyword">throws</span> IllegalAccessException </span>{</span><br><span class="line">        <span class="comment">//取出resultType的类</span></span><br><span class="line">        Class&lt;?&gt; resultClass = result.getClass();</span><br><span class="line">        Field[] declaredFields = resultClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) {</span><br><span class="line">            <span class="comment">//取出所有被EncryptDecryptField注解的字段</span></span><br><span class="line">            SensitiveField sensitiveField = field.getAnnotation(SensitiveField.class);</span><br><span class="line">            <span class="keyword">if</span> (!Objects.isNull(sensitiveField)) {</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                Object object = field.get(result);</span><br><span class="line">                <span class="comment">//只支持String的解密</span></span><br><span class="line">                <span class="keyword">if</span> (object <span class="keyword">instanceof</span> String) {</span><br><span class="line">                    String value = (String) object;</span><br><span class="line">                    <span class="comment">//对注解的字段进行逐一解密</span></span><br><span class="line">                    field.set(result, aesUtil.decrypt(value));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-定义出参解密拦截器"><a href="#3-6-定义出参解密拦截器" class="headerlink" title="3.6 定义出参解密拦截器"></a>3.6 定义出参解密拦截器</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Intercepts({</span></span><br><span class="line"><span class="meta">    @Signature(type = ResultSetHandler.class, method = "handleResultSets", args = {Statement.class})</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecryptInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DecryptUtil aesDecrypt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">        <span class="comment">//取出查询的结果</span></span><br><span class="line">        Object resultObject = invocation.proceed();</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(resultObject)) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//基于selectList</span></span><br><span class="line">        <span class="keyword">if</span> (resultObject <span class="keyword">instanceof</span> ArrayList) {</span><br><span class="line">            ArrayList resultList = (ArrayList) resultObject;</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(resultList) &amp;&amp; needToDecrypt(resultList.get(<span class="number">0</span>))) {</span><br><span class="line">                <span class="keyword">for</span> (Object result : resultList) {</span><br><span class="line">                    <span class="comment">//逐一解密</span></span><br><span class="line">                    aesDecrypt.decrypt(result);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//基于selectOne</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">if</span> (needToDecrypt(resultObject)) {</span><br><span class="line">                aesDecrypt.decrypt(resultObject);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> resultObject;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">needToDecrypt</span><span class="params">(Object object)</span> </span>{</span><br><span class="line">        Class&lt;?&gt; objectClass = object.getClass();</span><br><span class="line">        SensitiveData sensitiveData = AnnotationUtils.findAnnotation(objectClass, SensitiveData.class);</span><br><span class="line">        <span class="keyword">return</span> Objects.nonNull(sensitiveData);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>至此完成解密拦截器的配置工作。</p><h3 id="3-7-注解实体类中需要加解密的字段"><a href="#3-7-注解实体类中需要加解密的字段" class="headerlink" title="3.7 注解实体类中需要加解密的字段"></a>3.7 注解实体类中需要加解密的字段</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1624105263259-6d57dcde-e5ba-49f4-8591-089b5e6dbb42.png#clientId=u78ce95a8-0f8e-4&amp;from=ui&amp;id=ud0bf06b2&amp;margin=%5Bobject%20Object%5D&amp;name=2021-06-19-20-20-08-848844.png&amp;originHeight=515&amp;originWidth=327&amp;originalType=binary%E2%88%B6=3&amp;size=506626&amp;status=done&amp;style=shadow&amp;taskId=u7b7ddd3b-c121-4950-816c-84dcb13b824" alt="2021-06-19-20-20-08-848844.png"><br>此时在 mapper 中，指定<code>paramType=User resultType=User</code> 便可实现脱离业务层，基于 Mybatis 拦截器的加解密操作。</p><h3 id="3-7-注入插件到拦截链"><a href="#3-7-注入插件到拦截链" class="headerlink" title="3.7 注入插件到拦截链"></a>3.7 注入插件到拦截链</h3><p>这里有两种方式注入</p><h6 id="方式一：直接注入"><a href="#方式一：直接注入" class="headerlink" title="方式一：直接注入"></a>方式一：直接注入</h6><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis-config.xml  注册插件--&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line"> &nbsp; &nbsp;&lt;plugin interceptor=<span class="string">"xxx.EncryptInterceptor"</span>/&gt;</span><br><span class="line">    &nbsp;&lt;plugin interceptor=<span class="string">"xxx.DecryptInterceptor"</span>/&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus-简化开发</title>
      <link href="/2022/05/12/yuque/mybatisplus-jian-hua-kai-fa/"/>
      <url>/2022/05/12/yuque/mybatisplus-jian-hua-kai-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>MybatisPlus 官方文档：<a href="https://baomidou.com/guide/page.html">https://baomidou.com/guide/page.html</a></p><h2 id="Mybatis-Plus-使用流程"><a href="#Mybatis-Plus-使用流程" class="headerlink" title="Mybatis Plus 使用流程"></a>Mybatis Plus 使用流程</h2><h3 id="导入依赖："><a href="#导入依赖：" class="headerlink" title="导入依赖："></a>导入依赖：</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="实现映射："><a href="#实现映射：" class="headerlink" title="实现映射："></a>实现映射：</h3><p>1.对象名称与表的名称一一对应。 2.对象的属性与表中的字段一一对应。</p><p><strong>注解：</strong><br><code>@TableName</code>表名注解</p><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>表名</td></tr><tr><td>schema</td><td>String</td><td>否</td><td>“”</td><td>schema</td></tr><tr><td>keepGlobalPrefix</td><td>boolean</td><td>否</td><td>false</td><td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td></tr><tr><td>resultMap</td><td>String</td><td>否</td><td>“”</td><td>xml 中 resultMap 的 id</td></tr><tr><td>autoResultMap</td><td>boolean</td><td>否</td><td>false</td><td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td></tr><tr><td>excludeProperty</td><td>String[]</td><td>否</td><td>{}</td><td>需要排除的属性名(@since 3.3.1)</td></tr></tbody></table><p><code>@TableId</code>主键注解</p><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>主键字段名</td></tr><tr><td>type</td><td>Enum</td><td>否</td><td>IdType.NONE</td><td>主键类型</td></tr></tbody></table><p><code>@TableField</code>字段注解，非主键</p><table><thead><tr><th>属性</th><th>类型</th><th>必须指定</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>否</td><td>“”</td><td>数据库字段名</td></tr><tr><td>el</td><td>String</td><td>否</td><td>“”</td><td>映射为原生 #{ … } 逻辑,相当于写在 xml 里的 #{ … } 部分</td></tr><tr><td>exist</td><td>boolean</td><td>否</td><td>true</td><td>是否为数据库表字段</td></tr><tr><td>condition</td><td>String</td><td>否</td><td>“”</td><td>字段 where 实体查询比较条件,有值设置则按设置的值为准,<a href="https://github.com/baomidou/mybatis-plus/blob/3.0/mybatis-plus-annotation/src/main/java/com/baomidou/mybatisplus/annotation/SqlCondition.java">参考(opens new window)</a></td></tr><tr><td>update</td><td>String</td><td>否</td><td>“”</td><td>字段 update set 部分注入, 例如：update=”%s+1”：表示更新时会 set version=version+1(该属性优先级高于 el 属性)</td></tr></tbody></table><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 将对象与表进行关联</span></span><br><span class="line"><span class="comment">规则：</span></span><br><span class="line"><span class="comment">    若表名与对象名一致，名称可以省略</span></span><br><span class="line"><span class="comment">    属性名与字段名一致，注解可以省略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName("demo_user")</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//序列化接口的作用：保证对象网络传输有效性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="comment">//2. Id代表主键，主键自增/非空/UUID---生成唯一编号</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO, value = "id")</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//3. 标识属性与字段的映射</span></span><br><span class="line">    <span class="meta">@TableField("name")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@TableField("age")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@TableField("sex")</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="继承特定接口，实现-CRUD-操作"><a href="#继承特定接口，实现-CRUD-操作" class="headerlink" title="继承特定接口，实现 CRUD 操作"></a>继承特定接口，实现 CRUD 操作</h3><p>Myatis Plus 内部准备了一个 BaseMapper 接口，BamsMapper 接口将几乎所有的表操作进行了编写，用户只需要用自己编写的接口继承，即可使用 BaseMapper 接口所提供所有功能。</p><p>规则：<br><em>继承 BaseMapper 接口必须添加泛型对象，否则映射表报错<br>自己创建的接口不要与接口方法重名</em></p><p>代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承BaseMapper接口必须添加泛型对象，否则映射表报错</span></span><br><span class="line"><span class="comment">自己创建的接口不要与接口方法重名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="在-yml-中配置-Mybatis-Plus"><a href="#在-yml-中配置-Mybatis-Plus" class="headerlink" title="在 yml 中配置 Mybatis Plus"></a>在 yml 中配置 Mybatis Plus</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus:</span><br><span class="line">  #别名</span><br><span class="line">  type-aliases-package: com.jt.pojo</span><br><span class="line">  #指定映射文件的位置</span><br><span class="line">  mapper-locations: classpath:mappers/*.xml</span><br><span class="line">  #开启驼峰规则</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>其中查询方法 UserMapper 中的 selectList() 方法的参数为 MP 内置的条件封装器 Wrapper，所以不填写就是无任何条件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    插入操作：</span></span><br><span class="line"><span class="comment">        新增数据：(name="阿富汗",age=40,sex="厉害")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User().setName(<span class="string">"阿富汗"</span>).setAge(<span class="number">40</span>).setSex(<span class="string">"厉害"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">            System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(<span class="string">"失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">            <span class="keyword">for</span> (User user : users) {</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(<span class="string">"失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Mybatis-Plus-的操作原理"><a href="#Mybatis-Plus-的操作原理" class="headerlink" title="Mybatis Plus 的操作原理"></a>Mybatis Plus 的操作原理</h2><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User().setName(<span class="string">"阿富汗"</span>).setAge(<span class="number">40</span>).setSex(<span class="string">"厉害"</span>);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">            System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(<span class="string">"失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>上述代码相当于 SQL 语句：<code>insert into 表名(字段名称) values(属性的值)</code></p><p>其核心为：Mybatis Plus 将常规的操作进行了抽取，并采用公共的接口进行了定义，然后只需要通过接收用户传递的参数进行动态的 SQL 拼接。</p><h3 id="理论流程"><a href="#理论流程" class="headerlink" title="理论流程"></a>理论流程</h3><ol><li>用户调用接口方法，完成 CRUD 操作。<code>userMapper.insert(user);</code></li><li>Mybatis Plus 根据用户传递的对象使用反射获取 User 类。<code>Class userClass = user.getClass();</code></li><li>根据获取的 User 类，使用反射获取 User 类的指定注解，<code>_TableName _tableName = (_TableName_) userClass.getAnnotation(_TableName_._class_);</code></li><li>通过获取的注解来动态的获取注解中的参数，从中获取数据表的表名。<code>String name = tableName.value();</code></li><li>通过 User 类可以获取 User 类的属性，<code>Field[] fields = userClass.getDeclaredFields();</code>获取到 User 类的属性后就可以使用反射获取 User 类属性的注解，<code>Field[] fields = userClass.getDeclaredFields();</code>因为属性为封装后的私有属性，所以需要使用暴力反射。获取到属性的注解后即可得到表中的字段名。</li><li>将获取到的表名与字段名与用户传递的参数进行 SQL 拼接，<code>insert into demo_user(id,age,name,sex) value (user.getId()…)</code>。</li><li>将拼接的 SQL 交由 Mybatis 进行执行，以实现 CRUD 操作。</li></ol><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据对象获取User类</span></span><br><span class="line">Class userClass = user.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据User类获取User类注解</span></span><br><span class="line">TableName tableName = (TableName) userClass.getAnnotation(TableName.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据User类的注解获取表名</span></span><br><span class="line">String name = tableName.value();</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据User类获取属性名称,因为属性私有，所以使用暴力反射</span></span><br><span class="line">Field[] fields = userClass.getDeclaredFields();</span><br><span class="line">String[] tableFields = <span class="keyword">new</span> String[fields.length];</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据属性名获取注解</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) {</span><br><span class="line">    TableField annotation = fields[i].getAnnotation(TableField.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据注解或取字段名</span></span><br><span class="line">    tableFields[i] = annotation.value();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="使用-Mybatis-Plus-进行查询操作"><a href="#使用-Mybatis-Plus-进行查询操作" class="headerlink" title="使用 Mybatis Plus 进行查询操作"></a>使用 Mybatis Plus 进行查询操作</h2><h3 id="主键查询，使用-id-进行查询"><a href="#主键查询，使用-id-进行查询" class="headerlink" title="主键查询，使用 id 进行查询"></a>主键查询，使用 id 进行查询</h3><p>查询所用方法<code>selectById(int id);</code>参数为需要查询的信息的主键 id。</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询id为231的信息,主键查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectById</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> id = <span class="number">232</span>;</span><br><span class="line">        User user = userMapper.selectById(id);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="使用条件构造器进行全部数据查询"><a href="#使用条件构造器进行全部数据查询" class="headerlink" title="使用条件构造器进行全部数据查询"></a>使用条件构造器进行全部数据查询</h3><p>查询方法：<code>userMapper.selectList(QueryWrapper queryWrapper)</code>;其中 queryWapper 为条件构造器，可为 null，为 null 将会查询表中所有数据。</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">            System.out.println(<span class="string">"成功"</span>);</span><br><span class="line">            <span class="keyword">for</span> (User user : users) {</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(<span class="string">"失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—对象封装"><a href="#条件构造器—对象封装" class="headerlink" title="条件构造器—对象封装"></a>条件构造器—对象封装</h3><p>查询 name=”小乔”，sex=“女”的信息。</p><p>QueryWrapper 为条件构造器，用于生成 where 条件。</p><p>流程：</p><ol><li>使用对象封装数据</li></ol><p>User user = new User().setName(“小乔”).setSex(“女”);</p><ol start="2"><li><p>构建条件触发器并使用，使用对象中不为 null 的属性作为 where 查询条件，默认链接符为 and</p><pre><code>where name = '小乔' and sex = '女'</code></pre></li></ol><p>此时参数即为封装的对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询name="小乔"，sex=“女”</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByNameAndBySex</span><span class="params">()</span> </span>{</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;(<span class="keyword">new</span> User().setName(<span class="string">"小乔"</span>).setSex(<span class="string">"女"</span>));</span><br><span class="line">        <span class="comment">//根据条件构造器进行查询</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—逻辑运算符查询"><a href="#条件构造器—逻辑运算符查询" class="headerlink" title="条件构造器—逻辑运算符查询"></a>条件构造器—逻辑运算符查询</h3><table><thead><tr><th><strong>普通运算符</strong></th><th><strong>MybatisPlus 中的运算符</strong></th><th><strong>例子</strong></th></tr></thead><tbody><tr><td>=</td><td>eq</td><td>eq(“name”, “老王”)—&gt;name = ‘老王’</td></tr><tr><td>&gt;</td><td>gt</td><td>gt(“age”, 18)—&gt;age &gt; 18</td></tr><tr><td>&lt;</td><td>lt</td><td>lt(“age”, 18)—&gt;age &lt; 18</td></tr><tr><td>&gt;=</td><td>ge</td><td>ge(“age”, 18)—&gt;age &gt;= 18</td></tr><tr><td>&lt;=</td><td>le</td><td>le(“age”, 18)—&gt;age &lt;= 18</td></tr><tr><td>!=</td><td>ne</td><td>ne(“name”, “老王”)—&gt;name &lt;&gt; ‘老王’</td></tr></tbody></table><p><code>eq(R column, Object val)</code>，<code>lt(R column, Object val)</code>column 为字段名，val 为查询所需要的参数。</p><p>查询 name=”小乔”，sex=“女”的信息，查询 age&lt;18,name = “女<em>“</em></p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span><span class="comment">//查询name="小乔"，sex=“女”</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAgeAndSex</span><span class="params">()</span> </span>{</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">"name"</span>, <span class="string">"小乔"</span>).eq(<span class="string">"sex"</span>, <span class="string">"女"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(<span class="string">"sex"</span>, <span class="string">"女"</span>).lt(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line">        List&lt;User&gt; users1 = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users1) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—Like-关键字"><a href="#条件构造器—Like-关键字" class="headerlink" title="条件构造器—Like 关键字"></a>条件构造器—Like 关键字</h3><p><code>like(R column, Object val)</code>，column 为字段名，val 为模糊查询所需要的参数。</p><ul><li>例: <code>like("name", "王")</code>—&gt;<code>name like '%王%'</code></li></ul><p><em>查询 name 中包含“君”字的数据</em></p><p><em>代码实现：</em></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询name中包含“君”字的数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectLike</span><span class="params">()</span> </span>{</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.like(<span class="string">"name"</span>, <span class="string">"君"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—排序"><a href="#条件构造器—排序" class="headerlink" title="条件构造器—排序"></a>条件构造器—排序</h3><ol><li>orderByAsc 升序排序：<code>orderByAsc(R... columns)</code>，参数为需要排序的字段名。</li></ol><p>例: <code>orderByAsc("id", "name")</code>—&gt;<code>order by id ASC,name ASC</code></p><ol start="2"><li>orderByDesc 降序排序：<code>orderByDesc(R... columns)</code>，参数为需要排序的字段名。</li></ol><p>例:<code>orderByDesc("id", "name")</code>—&gt;<code>order by id DESC,name DESC</code></p><ol start="3"><li>orderBy:<code>orderBy(boolean condition, boolean isAsc, R... columns)</code>，condition 字段表示是否拼接 where 条件，isAsc 表示是否使用升序排序，columns 为需要排序的字段。</li></ol><p>例：<code>orderBy(true, true, "id", "name")</code>—&gt;<code>order by id ASC,name ASC</code></p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询性别为女的信息，并按年龄降序排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectOrderBy</span><span class="params">()</span> </span>{</span><br><span class="line">        QueryWrapper&lt;User&gt; userQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        userQueryWrapper.eq(<span class="string">"sex"</span>, <span class="string">"女"</span>).orderByDesc(<span class="string">"age"</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(userQueryWrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—动态-SQL"><a href="#条件构造器—动态-SQL" class="headerlink" title="条件构造器—动态 SQL"></a>条件构造器—动态 SQL</h3><p>当我们进行条件查询时，又是需要先进行判断，判断字段值是否存在或者是否符合条件，当不存在或者不符合条件时就会出错或查询不到数据。此时需要进行动态的 where 条件拼接，使用条件构造器中的各种方法提供的 condition 参数就可以实现是否拼接 SQL。</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    动态SQL</span></span><br><span class="line"><span class="comment">    若有值则进行where条件拼接，为null则不进行where条件拼接。</span></span><br><span class="line"><span class="comment">    使用condition参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectIsNull</span><span class="params">()</span> </span>{</span><br><span class="line">        String name = <span class="string">"貂蝉"</span>;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> nameFlag = name != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ageFlag = age != <span class="number">0</span>;</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(nameFlag, <span class="string">"name"</span>, name).eq(ageFlag, <span class="string">"age"</span>, age);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">        System.out.println(users);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—in-关键字"><a href="#条件构造器—in-关键字" class="headerlink" title="条件构造器—in 关键字"></a>条件构造器—in 关键字</h3><p><code>in(R column, Collection&lt;?&gt; value)</code>，value 为查询条件的参数。</p><p>in 关键字的两种使用方式：</p><ol><li>IN (value.get(0), value.get(1), …)</li></ol><p><code>in("age",{1,2,3})</code>—&gt;<code>age in (1,2,3)</code></p><ol start="2"><li>IN (v0, v1, …)</li></ol><p><code>in("age", 1, 2, 3)</code>—&gt;<code>age in (1,2,3)</code></p><p>查询 id=1，4，5，6·····的数据</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询id=1，4，5，6·····的数据</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectIn</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//1.方式1</span></span><br><span class="line">        QueryWrapper&lt;User&gt; idQueryWrapper = <span class="keyword">new</span> QueryWrapper&lt;User&gt;().in(<span class="string">"id"</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(idQueryWrapper);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.方式2</span></span><br><span class="line">        ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">4</span>);</span><br><span class="line">        ids.add(<span class="number">5</span>);</span><br><span class="line">        ids.add(<span class="number">6</span>);</span><br><span class="line">        QueryWrapper&lt;User&gt; idQueryWrapper1 = <span class="keyword">new</span> QueryWrapper&lt;User&gt;().in(<span class="string">"id"</span>, ids);</span><br><span class="line">        List&lt;User&gt; users1 = userMapper.selectList(idQueryWrapper1);</span><br><span class="line">        <span class="keyword">for</span> (User user : users1) {</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="条件构造器—查询第一个字段的记录"><a href="#条件构造器—查询第一个字段的记录" class="headerlink" title="条件构造器—查询第一个字段的记录"></a>条件构造器—查询第一个字段的记录</h3><p>根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值<br><code>List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);</code></p><p>查询性别为男的数据，只查询 id 字段</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询性别为男的数据，只查询id字段</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectObjs</span><span class="params">()</span> </span>{</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">"sex"</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line">        List&lt;Object&gt; ids = userMapper.selectObjs(queryWrapper);</span><br><span class="line">        System.out.println(ids);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Mybatis-Plus-更新操作"><a href="#Mybatis-Plus-更新操作" class="headerlink" title="Mybatis Plus 更新操作"></a>Mybatis Plus 更新操作</h2><h3 id="使用主键进行更新"><a href="#使用主键进行更新" class="headerlink" title="使用主键进行更新"></a>使用主键进行更新</h3><p><code>int updateById(@Param(Constants.ENTITY) T entity);</code>方法为<code>updateById()</code>其中参数为实体对象，即 set 条件。</p><p>将 id 为 234 的数据改为”车臣“，age=10，sex=男。</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将id为234的数据改为”车臣“，age=10，sex=男</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User().setId(<span class="number">234</span>).setName(<span class="string">"车臣"</span>).setAge(<span class="number">10</span>).setSex(<span class="string">"男"</span>);</span><br><span class="line">        userMapper.updateById(user);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="根据条件选择器条件进行更新"><a href="#根据条件选择器条件进行更新" class="headerlink" title="根据条件选择器条件进行更新"></a>根据条件选择器条件进行更新</h3><p>方法为<code>update()</code>,<code>int update(@Param(Constants.ENTITY) T updateEntity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; whereWrapper);</code>有两个参数，第一个参数为 set 条件，第二个参数为条件选择器，根据条件选择器的 where 条件进行数据更新。</p><p>将 name=”阿富汗“ 改为 塔利班，age=40,sex=”911”</p><p>代码实现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMP</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将name=”阿富汗“ 改为 塔利班，age=40,sex="9/11"</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate1</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User().setName(<span class="string">"塔利班"</span>).setAge(<span class="number">40</span>).setSex(<span class="string">"911"</span>);</span><br><span class="line">        UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> UpdateWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"name"</span>, <span class="string">"阿富汗"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        update(arg1,arg2)</span></span><br><span class="line"><span class="comment">        arg1为set即更新后的数据</span></span><br><span class="line"><span class="comment">        arg2为条件构造器，即where条件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        userMapper.update(user, wrapper);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Mybatis-Plus-分页查询"><a href="#Mybatis-Plus-分页查询" class="headerlink" title="Mybatis Plus 分页查询"></a>Mybatis Plus 分页查询</h2><p>Mybatis Plus 分页查询需要定义分页对象，<code>IPage&lt;User&gt; page=new Page&lt;&gt;();</code>其中 Page&lt;&gt;需要传递两个参数，第一个参数为需要查询的记录起始条数，第二个参数为需要查询的记录条数。例如使用 sql 语句进行分页查询时，第一个参数为查询的起始记录，第二个参数为查询的记录数量。</p><p>使用<code>selectPage()</code>进行分页查询，其参数为分页对象。</p><p>代码实现：<br>pojo</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName("user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BasePojo</span> </span>{</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PageResult 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String query;</span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> Object rows;<span class="comment">//查询得到的记录列表</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>service 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult <span class="title">getUserList</span><span class="params">(PageResult pageResult)</span> </span>{</span><br><span class="line">        <span class="comment">//分页对象</span></span><br><span class="line">        IPage&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(pageResult.getPageNum(), pageResult.getPageSize());</span><br><span class="line">        <span class="comment">//条件构造器</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(StringUtils.hasLength(pageResult.getQuery()), <span class="string">"username"</span>, pageResult.getQuery());</span><br><span class="line">        page = userMapper.selectPage(page, queryWrapper);</span><br><span class="line">        pageResult.setTotal(page.getTotal()).setRows(page.getRecords());</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="Mybatis-Plus-自动填充功能"><a href="#Mybatis-Plus-自动填充功能" class="headerlink" title="Mybatis Plus 自动填充功能"></a>Mybatis Plus 自动填充功能</h2><p>Mybatis Plus 可以对数据表中的属性进行自动填充，例如入库时间，更新时间等</p><p>使用 Mybatis Plus 的自动填充功能需要在 pojo 中需要使用自动填充的字段索映射的属性中添加注解,<code>@TableField(fill = FieldFill.INSERT)</code>，其中 fill 有 4 个属性分别为<code>DEFAULT</code>(默认不处理),<br><code>INSERT</code>(插入填充字段),<code>UPDATE</code>(更新填充字段),<code>INSERT_UPDATE</code>(插入和更新填充字段)。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePojo</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>{</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date created;<span class="comment">//表示入库时需要赋值</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updated;<span class="comment">//表示入库/更新时赋值.</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>定义配置类，实现<code>**MetaObjectHandler**</code>接口，使得<code>@TableField</code>属性中的配置生效。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="comment">//metaObject代表默认配置</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"created"</span>, <span class="keyword">new</span> Date(), metaObject);<span class="comment">//表示created字段将会自动填充</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updated"</span>, <span class="keyword">new</span> Date(), metaObject);<span class="comment">//表示updated字段将会自动填充</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updated"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity-权限控制</title>
      <link href="/2022/05/12/yuque/springsecurity-quan-xian-kong-zhi/"/>
      <url>/2022/05/12/yuque/springsecurity-quan-xian-kong-zhi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633519434602-d2e3e65f-8acd-4745-b88d-19cb3031f1a0.png#clientId=u80eddcb8-b1bd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ud36dbb38&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=952&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=71697&amp;status=done&amp;style=none&amp;taskId=u17f8143a-ef63-4124-9f5e-1e15678a885&amp;title=" alt="image.png"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a><br>实际应用系统中，为了安全起见，一般都必备用户认证（登录）和权限控制的功能，以识别用户是否合法，以及根据权限来控制用户是否能够执行某项操作。<br>Spring Security 是一个安全相关的框架，能够与 Spring 项目无缝整合，本文主要是介绍 Spring Security 默认的用户认证和权限控制的使用方法和原理，但不涉及到自定义实现。<br><a href="https://blog.csdn.net/weixin_44516305/article/details/88868791">Spring Security 用户认证和权限控制（自定义实现）</a>这篇文章专门讲解用户认证和权限控制相关的自定义实现。<br>（1）用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。<strong>通俗点说就是系统认为用户是否能登录</strong><br>（2）用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。通俗点讲就是系统判断用户是否有权限去做某些事情。</p><h2 id="同款产品对比"><a href="#同款产品对比" class="headerlink" title="同款产品对比"></a>同款产品对比</h2><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><p>Spring 技术栈的组成部分。通过提供完整可扩展的认证和授权支持保护你的应用程序。<br>SpringSecurity 特点：</p><ul><li>和 Spring 无缝整合。</li><li>全面的权限控制。</li><li>专门为 Web 开发而设计。<ul><li>旧版本不能脱离 Web 环境使用。</li><li>新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独引入核心模块就可以脱离 Web 环境。</li></ul></li><li>重量级。</li></ul><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>Apache 旗下的轻量级权限控制框架。<br>特点：</p><ul><li>轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。</li><li>通用性。<ul><li>好处：不局限于 Web 环境，可以脱离 Web 环境使用。</li><li>缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。</li></ul></li></ul><p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。<br>相对于 Shiro，在 SSM 中整合 Spring Security 都是比较麻烦的操作，所以，SpringSecurity 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有 Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。<br>自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了自动化配置方案，可以使用更少的配置来使用 SpringSecurity。因此，一般来说，常见的安全管理技术栈的组合是这样的：</p><ul><li>SSM + Shiro</li><li>Spring Boot/Spring Cloud + SpringSecurity</li></ul><p><strong>以上只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的。</strong></p><h2 id="Security-如何工作"><a href="#Security-如何工作" class="headerlink" title="Security 如何工作"></a>Security 如何工作</h2><h3 id="SpringSecurity-本质"><a href="#SpringSecurity-本质" class="headerlink" title="SpringSecurity 本质"></a>SpringSecurity 本质</h3><blockquote><p>本质是一个过滤器链</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633616092529-8983178e-e874-4e52-ae74-e539b5fd8b16.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uc94af561&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=488&amp;originWidth=1358&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=286557&amp;status=done&amp;style=none&amp;taskId=u03423407-b3e5-4589-91c3-34f1f6415de&amp;title=" alt="image.png"><br>代码底层流程：<br>重点看三个过滤器：<br><strong>FilterSecurityInterceptor</strong><br><strong>ExceptionTranslationFilter</strong><br><strong>UsernamePasswordAuthenticationFilter</strong><br><strong>FilterSecurityInterceptor</strong>:：是一个方法级的权限过滤器, 基本位于过滤链的最底部<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608918746-dfe9e318-ac6c-42a0-a908-6a08df313359.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ud8178b1f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=669&amp;originWidth=936&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=58659&amp;status=done&amp;style=none&amp;taskId=u95307270-3adb-4cb1-80c6-fb7f3fc1a07&amp;title=" alt="image.png"><br><strong>super.beforeInvocation(fi) 表示查看之前的 filter 是否通过。</strong><br><strong>fi.getChain().doFilter(fi.getRequest(), fi.getResponse());表示真正的调用后台的服务。</strong><br><strong>ExceptionTranslationFilter</strong>:：是个异常过滤器，用来处理在认证授权过程中抛出的异常<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608918879-207a5e37-e60d-481e-bdc5-7d12e336361f.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u60b00ecb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=600&amp;originWidth=900&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=48502&amp;status=done&amp;style=none&amp;taskId=u1f1076fa-385a-431f-9896-10b1bf648d4&amp;title=" alt="image.png"><br>*<em>UsernamePasswordAuthenticationFilter *</em>：对/login 的 POST 请求做拦截，校验表单中用户 名，密码。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608918859-f792a484-cc20-42ea-abea-c08d301e5016.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uf15a02c8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=541&amp;originWidth=792&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=33593&amp;status=done&amp;style=none&amp;taskId=u39247c52-1d5a-4f6a-85db-4053fcb5324&amp;title=" alt="image.png"></p><h3 id="SpringSecurity-过滤器启动原理"><a href="#SpringSecurity-过滤器启动原理" class="headerlink" title="SpringSecurity 过滤器启动原理"></a>SpringSecurity 过滤器启动原理</h3><p>1.使用 springsecurity 配置过滤器（DelegatingFilterProxy）； 2.该类的 doFilter 方法会通过 initDelegate(wac)先获取到过滤器 bean(FilterChainProxy)，通过他去初始化其他的 filter（delegate.init(this.getFilterConfig());）；<br>3.FilterChainProxy 的 doFilter 方法会通过 getFilters(fwRequest)方法获取到 WebApplicationContext 配置中的所有配置过的的 filter； 4.紧接着开始往后加载其他的 filter<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608918901-b1b531d1-64de-4e84-9252-751e7d630a05.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u40381b78&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=859&amp;originWidth=1373&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=81025&amp;status=done&amp;style=none&amp;taskId=u6feb09f2-fcd8-4a28-86f0-0afb0da484a&amp;title=" alt="image.png"></p><h3 id="UserDetailsService-接口讲解"><a href="#UserDetailsService-接口讲解" class="headerlink" title="UserDetailsService 接口讲解"></a>UserDetailsService 接口讲解</h3><p>当什么也没有配置的时候，账号和密码是由 Spring Security 定义生成的。而在实际项目中 账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制认证逻辑。<br>如果需要自定义逻辑时，只需要实现 UserDetailsService 接口即可。接口定义如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608918767-3bfa72b3-1d2b-42ad-937d-88e70c89702b.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uba774778&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=525&amp;originWidth=1043&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=47572&amp;status=done&amp;style=none&amp;taskId=u9e5aa64d-a94e-4dd6-a8e6-fe099409746&amp;title=" alt="image.png"></p><p><strong>返回值 UserDetails</strong><br>这个类是系统默认的用户”<strong>主体</strong>“</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示获取登录用户所有权限</span></span><br><span class="line">Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"><span class="comment">// 表示获取密码</span></span><br><span class="line"><span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 表示获取用户名</span></span><br><span class="line"><span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 表示判断账户是否过期</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 表示判断账户是否被锁定</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 表示凭证{密码}是否过期</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 表示当前用户是否可用</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608920141-2849e0f0-b48c-4bb3-bd70-241930b49b3c.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uc110a26e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=183&amp;originWidth=466&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=21018&amp;status=done&amp;style=none&amp;taskId=ua88694a9-17ae-4c46-b5ab-c691096eb51&amp;title=" alt="image.png"></p><p>以后我们只需要使用 User 这个实体类即可!<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608920129-9a0fd7f2-5108-4c5a-8e4b-83b201db289e.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ue1039596&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=190&amp;originWidth=1265&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=21083&amp;status=done&amp;style=none&amp;taskId=u34b34006-aa7a-4073-bcc9-952dfcc8e4e&amp;title=" alt="image.png"></p><h3 id="PasswordEncoder-接口讲解"><a href="#PasswordEncoder-接口讲解" class="headerlink" title="PasswordEncoder 接口讲解"></a>PasswordEncoder 接口讲解</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示把参数按照特定的解析规则进行解析</span></span><br><span class="line"><span class="function">String <span class="title">encode</span><span class="params">(CharSequence rawPassword)</span></span>;</span><br><span class="line"><span class="comment">// 表示验证从存储中获取的编码密码与编码后提交的原始密码是否匹配。如果密码匹</span></span><br><span class="line">配，则返回 <span class="keyword">true</span>；如果不匹配，则返回 <span class="keyword">false</span>。第一个参数表示需要被解析的密码。第二个</span><br><span class="line">参数表示存储的密码。</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence rawPassword, String encodedPassword)</span></span>;</span><br><span class="line"><span class="comment">// 表示如果解析的密码能够再次进行解析且达到更安全的结果则返回 true，否则返回</span></span><br><span class="line"><span class="keyword">false</span>。默认返回 <span class="keyword">false</span>。</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">upgradeEncoding</span><span class="params">(String encodedPassword)</span> </span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633608920269-17f835c9-7a72-4eb1-89a2-04da6dce469f.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u2e3e505c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=486&amp;originWidth=1167&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=83274&amp;status=done&amp;style=none&amp;taskId=u3b295a24-6bbc-48ff-9a95-2d966b798cd&amp;title=" alt="image.png"></p><p><strong>BCryptPasswordEncoder 是 Spring Security 官方推荐的密码解析器，平时多使用这个解析器。</strong><br><strong>BCryptPasswordEncoder 是对 bcrypt 强散列方法的具体实现。是基于 Hash 算法实现的单向加密。可以通过 strength 控制加密强度，默认 10.</strong><br>查用方法演示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">// 创建密码解析器</span></span><br><span class="line">    BCryptPasswordEncoder bCryptPasswordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    <span class="comment">// 对密码进行加密</span></span><br><span class="line">    String atguigu = bCryptPasswordEncoder.encode(<span class="string">"atguigu"</span>);</span><br><span class="line">    <span class="comment">// 打印加密之后的数据</span></span><br><span class="line">    System.out.println(<span class="string">"加密之后数据：\t"</span>+atguigu);</span><br><span class="line">    <span class="comment">//判断原字符加密后和加密之前是否匹配</span></span><br><span class="line">    <span class="keyword">boolean</span> result = bCryptPasswordEncoder.matches(<span class="string">"atguigu"</span>, atguigu);</span><br><span class="line">    <span class="comment">// 打印比较结果</span></span><br><span class="line">    System.out.println(<span class="string">"比较结果：\t"</span>+result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="集成-Security"><a href="#集成-Security" class="headerlink" title="集成 Security"></a>集成 Security</h2><p>在 SpringBoot 的基础上添加依赖即可</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633610300498-257a8d42-e414-4117-b36d-4e3b43e8feb1.png#clientId=u0fadcac1-10f9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u91330602&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1241&amp;originWidth=1368&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=139468&amp;status=done&amp;style=none&amp;taskId=uae7f1e42-71e5-4bad-9dd6-ced72e67c5f&amp;title=" alt="image.png"><br>使用 Spring Security 为的就是写最少的代码，实现更多的功能，在定制化 Spring Security，核心思路就是：重写某个功能，然后配置。</p><ul><li>比如你要查自己的用户表做登录，那就实现 UserDetailsService 接口；</li><li>比如前后端分离项目，登录成功和失败后返回 json，那就实现 AuthenticationFailureHandler/AuthenticationSuccessHandler 接口；</li><li>比如扩展 token 存放位置，那就实现 HttpSessionIdResolver 接口；</li><li>等等…</li></ul><p>最后，将上述做的更改配置到 security 里。套路就是这个套路，下边咱们实战一下。</p><h2 id="用户登录认证逻辑"><a href="#用户登录认证逻辑" class="headerlink" title="用户登录认证逻辑"></a>用户登录认证逻辑</h2><p>从数据库中查出登录用户的信息（如密码）、角色、权限等，然后返回一个 UserDetails 类型的实体，security 会自动根据密码和用户相关状态（是否锁定、是否启停、是否过期等）判断用户登录成功或者失败。</p><h3 id="1、创建自定义-UserDetailsService"><a href="#1、创建自定义-UserDetailsService" class="headerlink" title="1、创建自定义 UserDetailsService"></a>1、创建自定义 UserDetailsService</h3><p>这是实现自定义用户认证的核心逻辑，loadUserByUsername(String username)的参数就是登录时提交的用户名，返回类型是一个叫 UserDetails 的接口，需要在这里构造出他的一个实现类 User，这是 Spring security 提供的用户信息实体。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>{</span><br><span class="line">        <span class="comment">//需要构造出 org.springframework.security.core.userdetails.User 对象并返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2、准备-sql"><a href="#2、准备-sql" class="headerlink" title="2、准备 sql"></a>2、准备 sql</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1635919934209-76ca691b-2cb1-4d68-bfa0-be2039779cc7.png#clientId=ue4643a22-b1e3-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=416&amp;id=u2ac59249&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=416&amp;originWidth=592&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=25099&amp;status=done&amp;style=none&amp;taskId=uc2701962-8e04-4965-acbb-04b75f9d8a6&amp;title=&amp;width=592" alt="image.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure <span class="keyword">for</span> tb_user_auth</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `tb_user_auth`;</span><br><span class="line">CREATE TABLE `tb_user_auth`  (</span><br><span class="line">  `id` <span class="keyword">int</span> NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `user_info_id` <span class="keyword">int</span> NOT NULL COMMENT <span class="string">'用户信息id'</span>,</span><br><span class="line">  `username` varchar(<span class="number">50</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT <span class="string">'用户名'</span>,</span><br><span class="line">  `password` varchar(<span class="number">100</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT <span class="string">'密码'</span>,</span><br><span class="line">  `login_type` tinyint(<span class="number">1</span>) NOT NULL COMMENT <span class="string">'登录类型'</span>,</span><br><span class="line">  `ip_address` varchar(<span class="number">50</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT <span class="string">'用户登录ip'</span>,</span><br><span class="line">  `ip_source` varchar(<span class="number">50</span>) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT <span class="string">'ip来源'</span>,</span><br><span class="line">  `create_time` datetime NOT NULL COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `update_time` datetime NULL DEFAULT NULL COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  `last_login_time` datetime NULL DEFAULT NULL COMMENT <span class="string">'上次登录时间'</span>,</span><br><span class="line">  <span class="function">PRIMARY <span class="title">KEY</span> <span class="params">(`id`)</span> USING BTREE,</span></span><br><span class="line"><span class="function">  UNIQUE INDEX `username`<span class="params">(`username`)</span> USING BTREE</span></span><br><span class="line"><span class="function">) ENGINE </span>= InnoDB AUTO_INCREMENT = <span class="number">2</span> CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of tb_user_auth</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `tb_user_auth` VALUES (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'admin@qq.com'</span>, <span class="string">'$2a$10$AkxkZaqcxEXdiNE1nrgW1.ms3aS9C5ImXMf8swkWUJuFGMqDl.TPW'</span>, <span class="number">1</span>, <span class="string">'127.0.0.1'</span>, <span class="string">''</span>, <span class="string">'2021-08-12 15:43:18'</span>, <span class="string">'2021-10-06 16:44:41'</span>, <span class="string">'2021-10-06 16:44:41'</span>);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="3-使用-MybatisPlus-生成实体类和-mapper"><a href="#3-使用-MybatisPlus-生成实体类和-mapper" class="headerlink" title="3. 使用 MybatisPlus 生成实体类和 mapper"></a>3. 使用 MybatisPlus 生成实体类和 mapper</h3><p>引入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>编写自动生成代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusGenerator</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>{</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">"请输入"</span> + tip + <span class="string">"："</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) {</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) {</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">"请输入正确的"</span> + tip + <span class="string">"！"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">"/src/main/java"</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">"dzgu"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是否自动生成之后打开资源管理器</span></span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//再次生产时是否覆盖文件</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//生成默认生成时IService，变成Service</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);</span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        <span class="comment">//设置data的类型，只是用java.util.data代替</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        <span class="comment">//实体属性 swagger2属性</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=UTC"</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName("public");</span></span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"gudongzhou678"</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">//pc.setModuleName(scanner("模块名"));</span></span><br><span class="line">        pc.setParent(<span class="string">"com.dzgu.myblog"</span>);</span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setServiceImpl(<span class="string">"service.impl"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置生成的mapper</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>{</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">         String templatePath = <span class="string">"/templates/mapper.xml.vm"</span>;</span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>{</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">"/src/main/resources/mapper/"</span> + pc.getModuleName()</span><br><span class="line">                        + <span class="string">"/"</span> + tableInfo.getEntityName() + <span class="string">"Mapper"</span> + StringPool.DOT_XML;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        mpg.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">//驼峰命名</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//strategy.setSuperEntityClass("你自己的父类实体,没有就不用设置!");</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperControllerClass("你自己的父类控制器,没有就不用设置!");</span></span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityColumns("id");</span></span><br><span class="line">        strategy.setInclude(scanner(<span class="string">"表名，多个英文逗号分割"</span>).split(<span class="string">","</span>));</span><br><span class="line">        <span class="comment">//驼峰转连接符</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"tb_"</span>);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-制作登录实现类和自定义-UserDetails"><a href="#4-制作登录实现类和自定义-UserDetails" class="headerlink" title="4. 制作登录实现类和自定义 UserDetails"></a>4. 制作登录实现类和自定义 UserDetails</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsDTO</span> <span class="keyword">implements</span> <span class="title">UserDetails</span>, <span class="title">CredentialsContainer</span> </span>{</span><br><span class="line"></span><br><span class="line">………………</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {</span><br><span class="line">        <span class="comment">// 普通写法</span></span><br><span class="line">        <span class="comment">//List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//for (String role : roleList) {</span></span><br><span class="line">        <span class="comment">//    authorities.add(new SimpleGrantedAuthority(role));</span></span><br><span class="line">        <span class="comment">//}</span></span><br><span class="line">        <span class="comment">//return authorities;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk8函数式编程写法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.roleList.stream()</span><br><span class="line">                .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">                .collect(Collectors.toSet());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.password;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.username;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户是否未过期，过期无法验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定用户是否解锁，锁定的用户无法进行身份验证</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 密码锁定</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.isDisable == FALSE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指示是否已过期的用户的凭据(密码)，过期的凭据防止认证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户是否被启用或禁用。禁用的用户无法进行身份验证。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证完成后，擦除密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eraseCredentials</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setPassword(<span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserAuthMapper userAuthMapper;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank((username))) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"用户名不能为空"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 在数据库中查询用户是否存在</span></span><br><span class="line">        UserAuth userAuth = userAuthMapper.selectOne(<span class="keyword">new</span> LambdaQueryWrapper&lt;UserAuth&gt;()</span><br><span class="line">                .select(UserAuth::getId, UserAuth::getUserInfoId, UserAuth::getUsername, UserAuth::getPassword, UserAuth::getLoginType)</span><br><span class="line">                .eq(UserAuth::getUsername, username));</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(userAuth)) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BizException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 封装登录信息给前台</span></span><br><span class="line">        <span class="keyword">return</span> convertUserDetails(userAuth, request);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装用户登录信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userAuth 用户账号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户登录信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UserDetailsDTO <span class="title">convertUserDetails</span><span class="params">(UserAuth userAuth, HttpServletRequest request)</span> </span>{</span><br><span class="line">        <span class="comment">//.......</span></span><br><span class="line">        <span class="keyword">return</span> UserDetailsDTO.builder()</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-配置-Spring-Security"><a href="#5-配置-Spring-Security" class="headerlink" title="5. 配置 Spring Security"></a>5. 配置 Spring Security</h3><p>5.1 接管 AuthenticationSuccessHandler<br>在登录认证成功后会被调用，一般要记录登录日志，然后把认证之后的用户 authentication 返给前端</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationSuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthMapper userAuthMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前登录用户</span></span><br><span class="line">        UserDetailsDTO principal = (UserDetailsDTO) authentication.getPrincipal();</span><br><span class="line">        UserInfoDTO userInfoDTO = BeanCopyUtils.copyObject(principal, UserInfoDTO.class);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ApiResponse.ok(userInfoDTO)));</span><br><span class="line">        <span class="comment">//登陆成功后 更新用户的登录ip和时间</span></span><br><span class="line">        UserAuth updatedPrincipal = UserAuth.builder()</span><br><span class="line">                .id(principal.getId())</span><br><span class="line">                .ipAddress(principal.getIpAddress())</span><br><span class="line">                .ipSource(principal.getIpSource())</span><br><span class="line">                .lastLoginTime(principal.getLastLoginTime())</span><br><span class="line">                .build();</span><br><span class="line">        userAuthMapper.updateById(updatedPrincipal);</span><br><span class="line">        <span class="comment">//记录登录日志</span></span><br><span class="line">        log.info(<span class="string">"===用户 {} 登录成功，登录ip {} ,登录时间 {}"</span>, principal.getUsername(), principal.getIpAddress(), principal.getLastLoginTime());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5.2 接管 AuthenticationFailHandlerImpl<br>登录失败后，可以根据不同的 AuthenticationException，来区分是为什么登录失败，这里需要有日志打印，然后根据业务需求，返回信息给前端。比如要求是无论什么错误，都返回登录失败，这里简单的返回登陆失败</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFailHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">        String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">        log.warn(<span class="string">"==用户登陆失败:"</span> + requestURI + <span class="string">"=="</span> + e.getMessage());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ApiResponse.fail(requestURI,LOGIN_ERROR)));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5.3 接管 LogoutSuccessHandlerImpl<br>和登录成功、失败类似，记录日志，然后返回前端 json。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutSuccessHandlerImpl</span> <span class="keyword">implements</span> <span class="title">LogoutSuccessHandler</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">        UserAuth userAuth = (UserAuth) authentication.getPrincipal();</span><br><span class="line">        log.warn(<span class="string">"==用户 {} 注销成功"</span>,userAuth.getUsername() );</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ApiResponse.ok()));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>5.4 接管 Spring Security 异常<br>使用 Spring Boot2+ Spring Security 实现用户登录权限控制等操作，但是在用户登录的时候，怎么处理 Spring Security 抛出的异常呢？我们发现使用了@RestControllerAdvice 和@ExceptionHandler 不能处理 Spring Security 抛出的异常，因为 SpringSecurity 默认自带异常处理机制。Spring Security 有两个重要的异常类 ：</p><ul><li>AuthenticationEntryPoint ：认证异常: 匿名用户在认证过程中的异常</li><li>AccessDeniedException ： 鉴权异常,认证用户访问无权限资源时的异常</li></ul><p><strong>接管 AuthenticationEntryPoint 异常</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationEntryPointImpl</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">        String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">        log.warn(<span class="string">"==用户未登录"</span> + requestURI + <span class="string">"=="</span> + e.getMessage());</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ApiResponse.fail(requestURI, AUTHORIZED_ERROR)));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>接管 AccessDeniedHandler 异常</strong><br>AccessDeniedHandler 用于在用户已经登录了，但是访问了其自身没有权限的资源时做出对应的处理。ExceptionTranslationFilter 拥有的 AccessDeniedHandler 默认是 AccessDeniedHandlerImpl，这个默认实现类会根据 errorPage 和状态码来判断，最终决定跳转的页面。对于前后端分离项目，我们需要返回 json 因此接管此个组件。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDeniedHandlerImpl</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span><br><span class="line">        String requestURI = httpServletRequest.getRequestURI();</span><br><span class="line">        String exceptionMsg = httpServletResponse.getHeader(<span class="string">"ServiceException"</span>);</span><br><span class="line">        log.warn(<span class="string">"==用户权限不足访问:"</span> + requestURI + <span class="string">"=="</span> + exceptionMsg);</span><br><span class="line">        httpServletResponse.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(ApiResponse.fail(requestURI, AUTHORIZED_ERROR)));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>5.5 重写鉴权方法<br>标准的 RABC, 权限需要支持动态配置，spring security 默认是在代码里约定好权限，真实的业务场景通常需要可以支持动态配置角色访问权限，即在运行时去配置 url 对应的访问角色。<br>基于 spring security，如何实现这个需求呢？<br>最简单的方法就是自定义一个 Filter 去完成权限判断，但这脱离了 spring security 框架，如何基于 spring security 优雅的实现呢？<br>这里就要提到 <a href="https://www.cnblogs.com/xiaoqi/p/spring-security-rabc.html">spring security 实现动态配置 url 权限的两种方法</a>。<br>首先 自定义 UrlFilterInvocationSecurityMetadataSource 实现 FilterInvocationSecurityMetadataSource 重写 getAttributes()方法 获取访问该 url 所需要的角色权限信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterInvocationSecurityMetadataSourceImpl</span> <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ResourceRoleDTO&gt; resourceRoleList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空接口角色信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearDataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        resourceRoleList = <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回该url所需要的用户权限信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 储存请求url信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 标识不需要任何权限都可以访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException </span>{</span><br><span class="line">        <span class="comment">// 获取用户请求url和method</span></span><br><span class="line">        FilterInvocation fi = (FilterInvocation) object;</span><br><span class="line">        String method = fi.getRequest().getMethod();</span><br><span class="line">        String url = fi.getRequest().getRequestURI();</span><br><span class="line">        <span class="comment">// TODO 查出数据库中所有url列表</span></span><br><span class="line">        <span class="comment">// 如果修改了接口角色关系后重新加载</span></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(resourceRoleList)) {</span><br><span class="line">            resourceRoleList = roleMapper.listResourceRoles();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 获取接口角色信息，若为匿名接口则放行，若无对应角色则禁止</span></span><br><span class="line">        AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">for</span> (ResourceRoleDTO resourceRoleDTO : resourceRoleList) {</span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(resourceRoleDTO.getUrl(), url) &amp;&amp; resourceRoleDTO.getRequestMethod().equals(method)) {</span><br><span class="line">                List&lt;String&gt; roleList = resourceRoleDTO.getRoleList();</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isEmpty(roleList)) {</span><br><span class="line">                    <span class="keyword">return</span> SecurityConfig.createList(<span class="string">"disable"</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 保存该url对应角色权限信息</span></span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(roleList.toArray(<span class="keyword">new</span> String[]{}));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 若无对应角色则禁止</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class.isAssignableFrom(aClass);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>执行完之后到 下一步 AccessDecisionManager 中认证权限</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessDecisionManagerImpl</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 当前登录用户的角色信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 请求url信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collection `FilterInvocationSecurityMetadataSourceImpl`中的getAttributes方法传来的，表示当前请求需要的角色（可能有多个）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AccessDeniedException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InsufficientAuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; collection)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>{</span><br><span class="line">        <span class="comment">// 获取当前用户的角色</span></span><br><span class="line">        List&lt;String&gt; permissionList = authentication.getAuthorities()</span><br><span class="line">                .stream()</span><br><span class="line">                .map(GrantedAuthority::getAuthority)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">for</span> (ConfigAttribute item : collection) {</span><br><span class="line">            <span class="keyword">if</span>(permissionList.contains(item.getAttribute())){</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">"没有操作权限"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute configAttribute)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><a href="https://www.cnblogs.com/xiaoqi/p/spring-security-rabc.html">https://www.cnblogs.com/xiaoqi/p/spring-security-rabc.html</a><br>做了这么多的准备工作后，终于到了配置的时候了，Spring Security 通过建造者模式，使得配置变得简单</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationEntryPointImpl authenticationEntryPoint;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessDeniedHandlerImpl accessDeniedHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandlerImpl authenticationSuccessHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailHandlerImpl authenticationFailHandler;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogoutSuccessHandlerImpl logoutSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入我们接管的  根据请求url获取权限信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterInvocationSecurityMetadataSource <span class="title">securityMetadataSource</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FilterInvocationSecurityMetadataSourceImpl();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 我们接管的权限认证处理AccessDecisionManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessDecisionManager <span class="title">accessDecisionManager</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AccessDecisionManagerImpl();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 SessionRegistry，该 Bean 用于管理 Session 会话并发控制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionRegistry <span class="title">sessionRegistry</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SessionRegistryImpl();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Session 的监听器（注意：如果使用并发 Sessoion 控制，一般都需要配置该监听器）</span></span><br><span class="line"><span class="comment">     * 解决 Session 失效后, SessionRegistry 中 SessionInformation 没有同步失效的问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpSessionEventPublisher <span class="title">httpSessionEventPublisher</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpSessionEventPublisher();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置权限</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置登录注销路径</span></span><br><span class="line">        http.formLogin()</span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">                .successHandler(authenticationSuccessHandler)</span><br><span class="line">                .failureHandler(authenticationFailHandler)</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">                .logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">        <span class="comment">// 配置路由权限信息</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .withObjectPostProcessor(<span class="keyword">new</span> ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() {</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; <span class="function">O <span class="title">postProcess</span><span class="params">(O fsi)</span> </span>{</span><br><span class="line">                        fsi.setSecurityMetadataSource(securityMetadataSource());</span><br><span class="line">                        fsi.setAccessDecisionManager(accessDecisionManager());</span><br><span class="line">                        <span class="keyword">return</span> fsi;</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 关闭跨站请求防护</span></span><br><span class="line">                .csrf().disable().exceptionHandling()</span><br><span class="line">                <span class="comment">// 未登录处理-授权异常</span></span><br><span class="line">                .authenticationEntryPoint(authenticationEntryPoint)</span><br><span class="line">                <span class="comment">// 权限不足处理-权限异常</span></span><br><span class="line">                .accessDeniedHandler(accessDeniedHandler)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 开启 Session 会话管理配置</span></span><br><span class="line">                .sessionManagement()</span><br><span class="line">                <span class="comment">// 设置单用户的 Session 最大并发会话数量，-1 表示不受限制</span></span><br><span class="line">                .maximumSessions(<span class="number">2</span>)</span><br><span class="line">                <span class="comment">// 设置为 true，表示某用户达到最大会话并发数后，新会话请求会被拒绝登录</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 设置所要使用的 sessionRegistry，默认为 SessionRegistryImpl 实现类</span></span><br><span class="line">                .sessionRegistry(sessionRegistry());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里注意 FilterInvocationSecurityMetadataSourceImpl 的使用，和 accessDecisionManager 不一样，ExpressionUrlAuthorizationConfigurer 并没有提供 set 方法设置 FilterSecurityInterceptor FilterInvocationSecurityMetadataSource，how to do?发现一个扩展方法 withObjectPostProcessor，通过该方法自定义一个处理 FilterSecurityInterceptor 类型的 ObjectPostProcessor 就可以修改 FilterSecurityInterceptor。<br><a href="http://itboyhub.com/2021/01/25/spring-security-object-post-processor/">http://itboyhub.com/2021/01/25/spring-security-object-post-processor/</a></p><h3 id="6-测试访问"><a href="#6-测试访问" class="headerlink" title="6. 测试访问"></a>6. 测试访问</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/hi")</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; test01() {</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(<span class="string">"正常访问匿名用户可访问的hi"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/admin")</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; test02() {</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok(<span class="string">"正常访问需要admin权限的页面"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id=""><a href="#" class="headerlink" title=")"></a><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633871882203-1f44ec9d-4100-45d6-a26b-c1127ba0b44c.png#clientId=u4ab21f6f-1dcb-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=491&amp;id=u7b8a2c94&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=491&amp;originWidth=813&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=41137&amp;status=done&amp;style=none&amp;taskId=u2960e7ed-f42f-409c-ac83-dc359bd7b00&amp;title=&amp;width=813" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633871958142-006154e0-d4f3-4ef6-b67e-ef0fb52ece98.png#clientId=u4ab21f6f-1dcb-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=490&amp;id=uc8cbf9ef&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=490&amp;originWidth=837&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=41899&amp;status=done&amp;style=none&amp;taskId=ufb751ef2-5880-4457-9fe5-bd0acd84cfd&amp;title=&amp;width=837" alt="image.png"></h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633872189299-969587dc-ec64-4ef0-a9f4-a28a34c08666.png#clientId=u4ab21f6f-1dcb-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=489&amp;id=u8707c3eb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=489&amp;originWidth=826&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=50868&amp;status=done&amp;style=none&amp;taskId=uf9d386cf-3c9a-4818-bac4-2fe62ffe0c2&amp;title=&amp;width=826" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633872207107-ce09ff59-9791-440b-8d37-42df399644cc.png#clientId=u4ab21f6f-1dcb-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=504&amp;id=ucfa3831a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=504&amp;originWidth=835&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=50836&amp;status=done&amp;style=none&amp;taskId=u97abb0f3-5e13-4e29-97b4-1f2f5309b11&amp;title=&amp;width=835" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633872309455-1cb33293-0bc5-46ad-948b-5a230093dfa5.png#clientId=u4ab21f6f-1dcb-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=495&amp;id=u2e0dee20&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=495&amp;originWidth=811&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=41421&amp;status=done&amp;style=none&amp;taskId=ud156107e-ade1-4381-b670-5f460a0f2af&amp;title=&amp;width=811" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 源码 </tag>
            
            <tag> SpringSecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-全局异常处理</title>
      <link href="/2022/05/12/yuque/springboot-quan-ju-yi-chang-chu-li/"/>
      <url>/2022/05/12/yuque/springboot-quan-ju-yi-chang-chu-li/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633519434602-d2e3e65f-8acd-4745-b88d-19cb3031f1a0.png#clientId=u80eddcb8-b1bd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ud36dbb38&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=952&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=71697&amp;status=done&amp;style=none&amp;taskId=u17f8143a-ef63-4124-9f5e-1e15678a885&amp;title=" alt="image.png"></p><h2 id="为什么需要全局异常处理？"><a href="#为什么需要全局异常处理？" class="headerlink" title="为什么需要全局异常处理？"></a>为什么需要全局异常处理？</h2><p>在日常开发中，为了不抛出异常堆栈信息给前端页面，每次编写 Controller 层代码都要尽可能的 catch 住所有 service 层、dao 层等异常，代码耦合性较高，且不美观，不利于后期维护。<br><strong>这时就需要进行统一的异常处理。</strong><br>为解决该问题，计划将 Controller 层异常信息统一封装处理，且能区分对待 Controller 层方法返回给前端的 String、Map、JSONObject、ModelAndView 等结果类型。</p><h2 id="Springboot-默认是如何做的？"><a href="#Springboot-默认是如何做的？" class="headerlink" title="Springboot 默认是如何做的？"></a>Springboot 默认是如何做的？</h2><p>Spring Boot 提供了一套默认的异常处理机制，一旦程序中出现了异常，Spring Boot 会自动识别客户端的类型（浏览器客户端或机器客户端），并根据客户端的不同，以不同的形式展示异常信息。</p><ol><li>对于浏览器客户端而言，Spring Boot 会响应一个“ whitelabel”错误视图，以 HTML 格式呈现错误信息，如图：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633524710846-ae14ebab-d96f-437a-bf4c-e973c7234f21.png#clientId=u80eddcb8-b1bd-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ub002c4d4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=251&amp;originWidth=848&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=24240&amp;status=done&amp;style=none&amp;taskId=u1f8d2e48-08a5-4825-ac4d-685578b177e&amp;title=" alt="image.png"></p><ol start="2"><li>对于机器客户端而言，Spring Boot 将生成 JSON 响应，来展示异常消息：</li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2021-07-12T07:05:29.885+00:00"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Not Found"</span>,</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"No message available"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/m1ain.html"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述/error 错误页面路径可以理解为 SpringBoot 默认为我们写了一个模版错误页面，然后默认还写了一个 Controller，该 Controller 中包含一个/error 请求地址映射指向该错误页面。当 SpringBoot 的错误处理机制捕获到请求异常之后，则会将用户的原请求携带上错误信息，然后转发到这个/error 页面，页面再显示错误的相关信息。<br>虽然 SpringBoot 提供了默认的错误显示页面，但是仅使用该默认错误页面会存在大量的局限性：</p><ul><li>该页面比较简陋，对于用户而言并不友好；</li><li>500 错误暴露了服务器的详细出错原因，存在严重安全隐患；</li><li>在前后端分离的项目中，客户端需要的不是页面，而是 JSON 数据。</li></ul><h2 id="如何自定义？"><a href="#如何自定义？" class="headerlink" title="如何自定义？"></a>如何自定义？</h2><p>基于上述 SpringBoot 默认错误处理机制存在的局限性和问题，在 SpringBoot 中，<code>@ControllerAdvice</code>即可开启全局异常处理，使用该注解表示开启了全局异常的捕获，我们只需在自定义一个方法使用<code>@ExceptionHandler</code>注解然后定义捕获异常的类型即可对这些捕获的异常进行统一的处理。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice</span><br><span class="line">public class ControllerHandlers(){</span><br><span class="line"> @ExceptionHandler</span><br><span class="line">    public String errorHandler(Exception e){</span><br><span class="line">        return <span class="attr">"error"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>控制器通知还有一个兄弟，<code>@RestControllerAdvice</code>，如果用了它，错误处理方法的返回值不会表示用的哪个视图，而是会作为 HTTP body 处理，即相当于错误处理方法加了<code>@ResponseBody</code>注解。</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice</span><br><span class="line">public class ControllerHandlers(){</span><br><span class="line"> @ExceptionHandler</span><br><span class="line">    public String errorHandler(Exception e){</span><br><span class="line">        return <span class="attr">"error"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>@ExceptionHandler</code>注解的方法只能返回一种类型,在前后端分离开发中我们通常返回，统一返回类型、优化错误的提示和数据等，因此我们可以封装我们自己的数据传输对象<code>ApiResponse</code>，在传输过程中，会对异常进行枚举，所以先定义枚举类<code>ExceptionEnum</code>。</p><h3 id="自定义异常枚举类"><a href="#自定义异常枚举类" class="headerlink" title="自定义异常枚举类"></a>自定义异常枚举类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ExceptionEnum</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="number">20000</span>, <span class="string">"操作成功"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有操作权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AUTHORIZED(<span class="number">40300</span>, <span class="string">"没有操作权限"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="number">50000</span>, <span class="string">"系统异常"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    FAIL(<span class="number">51000</span>, <span class="string">"操作失败"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数校验失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    VALID_ERROR(<span class="number">52000</span>, <span class="string">"参数格式不正确"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名已存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USERNAME_EXIST(<span class="number">52001</span>, <span class="string">"用户名已存在"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USERNAME_NOT_EXIST(<span class="number">52002</span>, <span class="string">"用户名不存在"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * qq登录错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    QQ_LOGIN_ERROR(<span class="number">53001</span>, <span class="string">"qq登录错误"</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微博登录错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WEIBO_LOGIN_ERROR(<span class="number">53002</span>, <span class="string">"微博登录错误"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义数据传输"><a href="#自定义数据传输" class="headerlink" title="自定义数据传输"></a>自定义数据传输</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiResponse</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求成功几种重载定义</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">ok</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">true</span>, SUCCESS.getCode(), SUCCESS.getMessage(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">ok</span><span class="params">(T data)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">true</span>, SUCCESS.getCode(), SUCCESS.getMessage(), data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">ok</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">true</span>, SUCCESS.getCode(), message, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">ok</span><span class="params">(String message, T data)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">true</span>, SUCCESS.getCode(), message, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求失败几种重载定义</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">fail</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">false</span>, FAIL.getCode(), FAIL.getMessage(), <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">fail</span><span class="params">(T data)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">false</span>, FAIL.getCode(), FAIL.getMessage(), data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">fail</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">false</span>, FAIL.getCode(), message, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">fail</span><span class="params">(String message, T data)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">false</span>, FAIL.getCode(), message, data);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">fail</span><span class="params">(ExceptionEnum exceptionEnum)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RestResponse(<span class="keyword">false</span>, exceptionEnum.getCode(), exceptionEnum.getMessage(), <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ApiResponse&lt;T&gt; <span class="title">RestResponse</span><span class="params">(<span class="keyword">boolean</span> flag, Integer code, String message, T data)</span> </span>{</span><br><span class="line">        ApiResponse&lt;T&gt; response = <span class="keyword">new</span> ApiResponse&lt;&gt;();</span><br><span class="line">        response.setFlag(flag);</span><br><span class="line">        response.setCode(code);</span><br><span class="line">        response.setMessage(message);</span><br><span class="line">        response.setData(data);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>###</p><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BizException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code = FAIL.getCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BizException</span><span class="params">(String message)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BizException</span><span class="params">(ExceptionEnum exceptionEnum)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.code = exceptionEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.message = exceptionEnum.getMessage();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="自定义全局异常处理"><a href="#自定义全局异常处理" class="headerlink" title="自定义全局异常处理"></a>自定义全局异常处理</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自定义数据传输</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BizException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; errorHandler(BizException e) {</span><br><span class="line">        log.error(<span class="string">"业务异常："</span> + e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(e.getCode(), e.getMessage());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理系统异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自定义数据传输</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; errorHandler(Exception e) {</span><br><span class="line">        log.error(<span class="string">"系统异常："</span> + e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(ExceptionEnum.SYSTEM_ERROR);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("/hi")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"正常访问hi"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">(<span class="meta">@RequestParam</span> Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(id&lt;<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BizException(-<span class="number">1</span>,<span class="string">"id不能小于0"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"正常访问user"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633585470616-443b3f6d-acf5-417e-be0e-e13ff7327a9c.png#clientId=u56bf8858-1973-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=536&amp;id=u00f651d8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=536&amp;originWidth=833&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=47076&amp;status=done&amp;style=none&amp;taskId=ufcc5fb9c-e2fb-4f28-98ef-0d60912bab1&amp;title=&amp;width=833" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633585489877-905f468e-38e8-41d5-b7fe-4e206f5f7fab.png#clientId=u56bf8858-1973-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=536&amp;id=u1b8de2a0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=536&amp;originWidth=829&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=44958&amp;status=done&amp;style=none&amp;taskId=ubc8898e5-7f6a-4272-ade6-4e95af515f6&amp;title=&amp;width=829" alt="image.png"></p><p>自定义全局异常处理除了可以处理上述的数据格式之外，也可以处理页面的跳转，只需在新增的异常方法的返回处理上填写该跳转的路径并不使用 ResponseBody 注解即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>异常处理，能够减少代码的重复度和复杂度，有利于代码的维护，并且能够快速定位到 BUG，大大提高我们的开发效率。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-参数校验Validator</title>
      <link href="/2022/05/12/yuque/springboot-can-shu-xiao-yan-validator/"/>
      <url>/2022/05/12/yuque/springboot-can-shu-xiao-yan-validator/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633519434602-d2e3e65f-8acd-4745-b88d-19cb3031f1a0.png#clientId=u80eddcb8-b1bd-4&amp;from=paste&amp;id=ud36dbb38&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=952&amp;originalType=url%E2%88%B6=1&amp;size=71697&amp;status=done&amp;style=none&amp;taskId=u17f8143a-ef63-4124-9f5e-1e15678a885" alt="image.png"><br>数据校验是在平时的编码过程中常做的工作，在系统的各个层可能都要去实现一些校验逻辑，再去做业务处理。这些繁琐的校验与我们的业务代码在一块就会显得臃肿。而且这些校验通常是业务无关的。<br>Bean Validation 2.0（JSR 380）定义了用于实体和方法验证的元数据模型和 API，Hibernate Validator 是目前最好的实现，下面整理具体使用。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>如果是 Spring Boot2.3 之前的项目，那么 spring-boot-starter-web 中就已经依赖 hibernate-validator 了</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>否则可以添加 hibernate-validator 依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.17.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><h3 id="validator-内置注解"><a href="#validator-内置注解" class="headerlink" title="validator 内置注解"></a>validator 内置注解</h3><p>@Null<br>被注释的元素必须为 null<br>@NotNull<br>被注释的元素必须不为 null<br>@AssertTrue<br>被注释的元素必须为 true<br>@AssertFalse<br>被注释的元素必须为 false<br>@Min(value)<br>被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@Max(value)<br>被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@DecimalMin(value)<br>被注释的元素必须是一个数字，其值必须大于等于指定的最小值<br>@DecimalMax(value)<br>被注释的元素必须是一个数字，其值必须小于等于指定的最大值<br>@Size(max, min)<br>被注释的元素的大小必须在指定的范围内<br>@Digits (integer, fraction)<br>被注释的元素必须是一个数字，其值必须在可接受的范围内<br>@Past<br>被注释的元素必须是一个过去的日期<br>@Future<br>被注释的元素必须是一个将来的日期<br>@Pattern(value)<br>被注释的元素必须符合指定的正则表达式</p><h3 id="Hibernate-Validator-附加的-constraint"><a href="#Hibernate-Validator-附加的-constraint" class="headerlink" title="Hibernate Validator 附加的 constraint"></a>Hibernate Validator 附加的 constraint</h3><p>@Email<br>被注释的元素必须是电子邮箱地址<br>@Length<br>被注释的字符串的大小必须在指定的范围内<br>@NotEmpty<br>被注释的字符串的必须非空<br>@Range<br>被注释的元素必须在合适的范围内<br>@NotBlank<br>验证字符串非 null，且长度必须大于 0<br><strong>注意</strong>：</p><ul><li>@NotNull 适用于任何类型被注解的元素必须不能与 NULL</li><li>@NotEmpty 适用于 String Map 或者数组不能为 Null 且长度必须大于 0</li><li>@NotBlank 只能用于 String 上面 不能为 null,调用 trim()后，长度必须大于 0</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>模拟用户注册封装了一个 UserVO<br>当提交数据的时候如果使用以前的做法就是 IF ELSE 判断参数，使用 validator 则是需要增加注解即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVO</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名-邮箱注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = "用户名不能为空")</span></span><br><span class="line">    <span class="meta">@Email(message = "邮箱格式不正确")</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Size(min = 6, message = "密码不能少于6位")</span></span><br><span class="line">    <span class="meta">@NotBlank(message = "密码不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = "验证码不能为空")</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后需要在 controller 方法体添加@Validated 不加@Validated 校验会不起作用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAuthController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAuthService userAuthService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("/register")</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; register(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserVO user) {</span><br><span class="line">        userAuthService.register(user);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>生成一个符合校验的数据</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"dzgu@163.com"</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="number">1234567</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="string">"6319"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>返回结果<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633592988601-351ff492-6c71-4d31-b395-eb6d9506fe03.png#clientId=ua4b88721-062a-4&amp;from=paste&amp;height=487&amp;id=ubf48ad39&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=487&amp;originWidth=822&amp;originalType=binary%E2%88%B6=1&amp;size=43859&amp;status=done&amp;style=none&amp;taskId=uf59a23ac-dc9c-4c18-a3cb-42622ece644&amp;width=822" alt="image.png"><br>生成一个不符合 name 校验的数据</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"dzgu"</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="number">1234567</span>,</span><br><span class="line">  <span class="attr">"code"</span>: <span class="string">"6319"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>返回结果<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633593047366-4f84d9a2-4e61-470a-9e39-46bdeedb8f0a.png#clientId=ua4b88721-062a-4&amp;from=paste&amp;height=494&amp;id=u20682f1f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=494&amp;originWidth=813&amp;originalType=binary%E2%88%B6=1&amp;size=42889&amp;status=done&amp;style=none&amp;taskId=ua4fa8eb0-cd29-4f6c-a0cc-0a7668e20f0&amp;width=813" alt="image.png"><br>这样是能校验成功，但是有个问题就是返回参数并不理想，前端也并不容易处理返回参数，所以我们添加一下参数校验的全局异常处理（<a href="https://www.yuque.com/ugdongzhou/kd5pz2/ecv4fp">https://www.yuque.com/ugdongzhou/kd5pz2/ecv4fp</a>），然后添加一下全局统一返回参数这样比较规范。</p><h2 id="添加全局异常处理"><a href="#添加全局异常处理" class="headerlink" title="添加全局异常处理"></a>添加全局异常处理</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandlerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理业务异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自定义数据传输</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = BizException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; errorHandler(BizException e) {</span><br><span class="line">        log.error(<span class="string">"业务异常："</span> + e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(e.getCode(), e.getMessage());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理参数校验异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 接口异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; errorHandler(MethodArgumentNotValidException e) {</span><br><span class="line">        List&lt;ObjectError&gt; errors = e.getBindingResult().getAllErrors();</span><br><span class="line">        StringBuilder errorMessages = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        errors.forEach(error -&gt; errorMessages.append(error.getDefaultMessage()).append(<span class="string">";"</span>));</span><br><span class="line">        String s = errorMessages.toString();</span><br><span class="line">        log.error(<span class="string">"参数校验异常："</span> + s);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(ExceptionEnum.VALID_ERROR.getCode(), s);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理系统异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自定义数据传输</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; errorHandler(Exception e) {</span><br><span class="line">        log.error(<span class="string">"系统异常："</span> + e);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.fail(ExceptionEnum.SYSTEM_ERROR);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此方法主要捕捉 MethodArgumentNotValidException 异常然后对异常结果进行封装，如果需要在自行添加其他异常处理。<br>添加完之后我们在看一下运行结果，调用接口返回:<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1633594533536-423b2196-cd7e-4114-ac0e-77b8317d31f0.png#clientId=u040cec97-21d2-4&amp;from=paste&amp;height=491&amp;id=uda0ef109&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=491&amp;originWidth=821&amp;originalType=binary%E2%88%B6=1&amp;size=44123&amp;status=done&amp;style=none&amp;taskId=ubf1f6727-5bc2-44a2-b39b-8af97c16959&amp;width=821" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-自定义注解切面AOP</title>
      <link href="/2022/05/12/yuque/springboot-zi-ding-yi-zhu-jie-qie-mian-aop/"/>
      <url>/2022/05/12/yuque/springboot-zi-ding-yi-zhu-jie-qie-mian-aop/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在做博客项目的时候需要记录用户操作日志，这时候需要自定义注解与切面来实现。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h3><p>需要引入相应依赖，这里肯定时能和数据库关联了（简单的来说就是能够在浏览器上进行增删改查）。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- aop的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2、自定义日志注解"><a href="#2、自定义日志注解" class="headerlink" title="2、自定义日志注解"></a>2、自定义日志注解</h3><p>定义一个方法级别的<code>@Log</code>注解，用于标注需要监控的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个Log的日志注解，用在方法上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log {</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="配置-AOP-切面"><a href="#配置-AOP-切面" class="headerlink" title="配置 AOP 切面"></a>配置 AOP 切面</h3><p>在配置 AOP 切面之前，我们需要了解下 aspectj 相关注解的作用：</p><ul><li><strong>@Aspect</strong>：声明该类为一个注解类；</li><li><strong>@Pointcut</strong>：定义一个切点，后面跟随一个表达式，表达式可以定义为切某个注解，也可以切某个 package 下的方法；</li></ul><p>切点定义好后，就是围绕这个切点做文章了：</p><ul><li><strong>@Before</strong>: 在切点之前，织入相关代码；</li><li><strong>@After</strong>: 在切点之后，织入相关代码;</li><li><strong>@AfterReturning</strong>: 在切点返回内容后，织入相关代码，一般用于对返回值做些加工处理的场景；</li><li><strong>@AfterThrowing</strong>: 用来处理当织入的代码抛出异常后的逻辑处理;</li><li><strong>@Around</strong>: 环绕，可以在切入点前后织入代码，并且可以自由的控制何时执行切点；</li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636438374682-74e7de58-b928-400f-8a96-aeb4785fedcc.png#clientId=u920040cb-bd22-4&amp;from=paste&amp;id=u518bf9ef&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1088&amp;originWidth=952&amp;originalType=url%E2%88%B6=1&amp;size=446416&amp;status=done&amp;style=none&amp;taskId=ufad73379-1f96-42f5-a42b-352c2b8add6" alt="image.png"></h3><h3 id="3、创建库表和实体"><a href="#3、创建库表和实体" class="headerlink" title="3、创建库表和实体"></a>3、创建库表和实体</h3><p>在数据库中创建一张<code>sys_operation_log</code>表，用于保存用户的操作日志</p><h4 id="a-数据库"><a href="#a-数据库" class="headerlink" title="a. 数据库"></a>a. 数据库</h4><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : test</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80020</span></span><br><span class="line"><span class="comment"> Source Host           : 127.0.0.1:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : blog</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80020</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 09/11/2021 14:09:47</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for tb_operation_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tb_operation_log`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_operation_log`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">'主键id'</span>,</span><br><span class="line">  `opt_module` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作模块'</span>,</span><br><span class="line">  `opt_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作类型'</span>,</span><br><span class="line">  `opt_url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作url'</span>,</span><br><span class="line">  `opt_method` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作方法'</span>,</span><br><span class="line">  `opt_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作描述'</span>,</span><br><span class="line">  `request_param` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'请求参数'</span>,</span><br><span class="line">  `request_method` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'请求方式'</span>,</span><br><span class="line">  `response_data` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'返回数据'</span>,</span><br><span class="line">  `user_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户id'</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'用户昵称'</span>,</span><br><span class="line">  `ip_address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作ip'</span>,</span><br><span class="line">  `ip_source` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'操作地址'</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">690</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tb_operation_log</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_operation_log` <span class="keyword">VALUES</span> (<span class="number">688</span>, <span class="string">'角色模块'</span>, <span class="string">'新增或修改'</span>, <span class="string">'/admin/role'</span>, <span class="string">'com.minzheng.blog.controller.RoleController.saveOrUpdateRole'</span>, <span class="string">'保存或更新角色'</span>, <span class="string">'[{\"id\":1,\"resourceIdList\":[165,192,193,194,195,166,183,184,246,247,167,199,200,201,168,185,186,187,188,189,190,191,254,169,208,209,170,234,235,236,237,171,213,214,215,216,217,224,172,240,241,244,245,267,269,270,173,239,242,276,174,205,206,207,175,218,219,220,221,222,223,176,202,203,204,230,238,177,229,232,233,243,178,196,197,198,257,258,179,225,226,227,228,231,180,210,211,212],\"roleLabel\":\"admin\",\"roleName\":\"管理员\"}]'</span>, <span class="string">'POST'</span>, <span class="string">'{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}'</span>, <span class="number">1</span>, <span class="string">'管理员'</span>, <span class="string">'127.0.0.1'</span>, <span class="string">''</span>, <span class="string">'2021-08-24 11:25:33'</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_operation_log` <span class="keyword">VALUES</span> (<span class="number">689</span>, <span class="string">'角色模块'</span>, <span class="string">'新增或修改'</span>, <span class="string">'/admin/role'</span>, <span class="string">'com.minzheng.blog.controller.RoleController.saveOrUpdateRole'</span>, <span class="string">'保存或更新角色'</span>, <span class="string">'[{\"id\":3,\"resourceIdList\":[192,195,183,246,199,185,191,254,208,234,237,213,241,239,276,205,218,223,202,230,238,232,243,196,257,258,225,231,210],\"roleLabel\":\"test\",\"roleName\":\"测试\"}]'</span>, <span class="string">'POST'</span>, <span class="string">'{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}'</span>, <span class="number">1</span>, <span class="string">'管理员'</span>, <span class="string">'127.0.0.1'</span>, <span class="string">''</span>, <span class="string">'2021-08-24 11:25:40'</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_operation_log` <span class="keyword">VALUES</span> (<span class="number">690</span>, <span class="string">'文章模块'</span>, <span class="string">'新增或修改'</span>, <span class="string">'/admin/articles'</span>, <span class="string">'com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle'</span>, <span class="string">'添加或修改文章'</span>, <span class="string">'[{\"articleContent\":\"## 目录\\n\\n恭喜你已成功运行博客，开启你的文章之旅吧\",\"articleCover\":\"https://www.static.talkxj.com/articles/bd74062266c1fb04f3084968231c0580.jpg\",\"articleTitle\":\"测试文章\",\"categoryName\":\"测试分类\",\"id\":47,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]'</span>, <span class="string">'POST'</span>, <span class="string">'{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}'</span>, <span class="number">1</span>, <span class="string">'管理员'</span>, <span class="string">'127.0.0.1'</span>, <span class="string">''</span>, <span class="string">'2021-10-04 16:08:02'</span>, <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="b-实体类"><a href="#b-实体类" class="headerlink" title="b. 实体类"></a>b. 实体类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@TableName("tb_operation_log")</span></span><br><span class="line"><span class="meta">@ApiModel(value = "OperationLog对象", description = "")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationLog</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "主键id")</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作模块")</span></span><br><span class="line">    <span class="keyword">private</span> String optModule;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作类型")</span></span><br><span class="line">    <span class="keyword">private</span> String optType;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作url")</span></span><br><span class="line">    <span class="keyword">private</span> String optUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作方法")</span></span><br><span class="line">    <span class="keyword">private</span> String optMethod;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作描述")</span></span><br><span class="line">    <span class="keyword">private</span> String optDesc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求参数")</span></span><br><span class="line">    <span class="keyword">private</span> String requestParam;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "请求方式")</span></span><br><span class="line">    <span class="keyword">private</span> String requestMethod;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "返回数据")</span></span><br><span class="line">    <span class="keyword">private</span> String responseData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "用户id")</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "用户昵称")</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作ip")</span></span><br><span class="line">    <span class="keyword">private</span> String ipAddress;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "操作地址")</span></span><br><span class="line">    <span class="keyword">private</span> String ipSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "创建时间")</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "更新时间")</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4、切面和切点"><a href="#4、切面和切点" class="headerlink" title="4、切面和切点"></a>4、切面和切点</h3><p>定义一个 LogAspect 类，使用<code>@Aspect</code>标注让其成为一个切面，切点为使用<code>@OptLog</code>注解标注的方法，使用<code>@AfterReturning</code>后置增强：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.annotation.OptLog;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.entity.OperationLog;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.mapper.OperationLogMapper;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.utils.IpUtils;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.utils.UserUtils;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 操作日志切面处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/8 23:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptLogAspect</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperationLogMapper operationLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置操作日志切入点 记录操作日志 在注解的位置切入代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut("@annotation(com.dzgu.myblog.annotation.OptLog)")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">optLogPoincut</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常返回通知，拦截用户操作日志，连接点正常执行完成后执行， 如果连接点抛出异常，则不会执行</span></span><br><span class="line"><span class="comment">     * AfterReturning value可以是切点表达式execution 也可以是定义好的切入点。。。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点,</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys      返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = "optLogPoincut()", returning = "keys")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOptLog</span><span class="params">(JoinPoint joinPoint, Object keys)</span> </span>{</span><br><span class="line">        <span class="comment">// 获取RequestAttributes</span></span><br><span class="line">        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="comment">// 从获取RequestAttributes中获取HttpServletRequest的信息</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) Objects.requireNonNull(requestAttributes).resolveReference(RequestAttributes.REFERENCE_REQUEST);</span><br><span class="line">        OperationLog operationLog = <span class="keyword">new</span> OperationLog();</span><br><span class="line">        <span class="comment">// 从切面织入点处通过反射机制获取织入点处的方法</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="comment">// 获取切入点所在的方法</span></span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        <span class="comment">// 获取操作</span></span><br><span class="line">        Api api = (Api) signature.getDeclaringType().getAnnotation(Api.class);</span><br><span class="line">        ApiOperation apiOperation = method.getAnnotation(ApiOperation.class);</span><br><span class="line">        OptLog optLog = method.getAnnotation(OptLog.class);</span><br><span class="line">        <span class="comment">// 操作模块</span></span><br><span class="line">        operationLog.setOptModule(api.tags()[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 操作类型</span></span><br><span class="line">        operationLog.setOptType(optLog.optType());</span><br><span class="line">        <span class="comment">// 操作描述</span></span><br><span class="line">        operationLog.setOptDesc(apiOperation.value());</span><br><span class="line">        <span class="comment">// 获取请求的类名</span></span><br><span class="line">        String className = joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="comment">// 获取请求的方法名</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        methodName = className + <span class="string">"."</span> + methodName;</span><br><span class="line">        <span class="comment">// 请求方式</span></span><br><span class="line">        operationLog.setRequestMethod(Objects.requireNonNull(request).getMethod());</span><br><span class="line">        <span class="comment">// 请求方法</span></span><br><span class="line">        operationLog.setOptMethod(methodName);</span><br><span class="line">        <span class="comment">// 请求参数</span></span><br><span class="line">        operationLog.setRequestParam(JSON.toJSONString(joinPoint.getArgs()));</span><br><span class="line">        <span class="comment">// 返回结果</span></span><br><span class="line">        operationLog.setResponseData(JSON.toJSONString(keys));</span><br><span class="line">        <span class="comment">// 请求用户ID</span></span><br><span class="line">        operationLog.setUserId(UserUtils.getLoginUser().getId());</span><br><span class="line">        <span class="comment">// 请求用户</span></span><br><span class="line">        operationLog.setNickname(UserUtils.getLoginUser().getNickname());</span><br><span class="line">        <span class="comment">// 请求IP</span></span><br><span class="line">        String ipAddress = IpUtils.getIpAddress(request);</span><br><span class="line">        operationLog.setIpAddress(ipAddress);</span><br><span class="line">        operationLog.setIpSource(IpUtils.getIpSource(ipAddress));</span><br><span class="line">        <span class="comment">// 请求URL</span></span><br><span class="line">        operationLog.setOptUrl(request.getRequestURI());</span><br><span class="line">        operationLogMapper.insert(operationLog);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.annotation.OptLog;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.vo.ApiResponse;</span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.vo.ArticleVO;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.dzgu.myblog.constant.OptTypeConst.SAVE_OR_UPDATE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 文章</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/8 23:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(tags = "文章模块")</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加或修改文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleVO 文章信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> ApiResponse&lt;&gt;}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OptLog(optType = SAVE_OR_UPDATE)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = "添加或修改文章")</span></span><br><span class="line">    <span class="meta">@PostMapping("/admin/articles")</span></span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;?&gt; saveOrUpdataArticle(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ArticleVO articleVO){</span><br><span class="line">        articleService.saveOrUpdateArticle(articleVO);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.ok();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>可以存到数据库<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636442623914-cd82066f-50b3-4e83-a630-ebf778da0e12.png#clientId=u8dd7866b-f361-4&amp;from=paste&amp;height=56&amp;id=udba8e5a4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=56&amp;originWidth=1070&amp;originalType=binary%E2%88%B6=1&amp;size=9592&amp;status=done&amp;style=none&amp;taskId=u27979089-2afd-49f9-b723-e4ab4332c17&amp;width=1070" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个基础的SpringBoot 项目该包含哪些东西？</title>
      <link href="/2022/05/12/yuque/yi-ge-ji-chu-de-springboot-xiang-mu-gai-bao-han-na-xie-dong-xi/"/>
      <url>/2022/05/12/yuque/yi-ge-ji-chu-de-springboot-xiang-mu-gai-bao-han-na-xie-dong-xi/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>建立一个全新的项目，或者把旧的庞大的项目，进行拆分成多个项目。在建立新的项目中，经常需要做一些重复的工作，比如说拷贝一下常用的工具类，通用代码等等。<br>所以就可以做一个基础的项目方便使用，在经历新项目的时候，直接在基础项目上进行简单配置就可以开发业务代码了。</p><h3 id="基础项目该包含哪些东西"><a href="#基础项目该包含哪些东西" class="headerlink" title="基础项目该包含哪些东西"></a>基础项目该包含哪些东西</h3><ul><li>Swagger 在线接口文档。</li><li>CodeGenerator 代码生成器。</li><li>统一返回。</li><li>通用的分页对象。</li><li>常用工具类。</li><li>全局异常拦截。</li><li>错误枚举。</li><li>自定义异常。</li><li>多环境配置文件。</li><li>Maven 多环境配置。</li><li>日志配置。</li><li>JenkinsFile。</li></ul><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><p>写接口文档通常是一件比较头疼的事情，然而 swagger 就用是用来解决这个问题的。可以在线生成接口文档，并且可以在页面上进行测试。<br>可以非常清楚的显示，请求数据已经响应数据。当然这一切都需要在代码中进行配置。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1621648039163-5386086c-b94a-4de6-9838-90d61251ace4.png#from=url&amp;id=MoTKk&amp;margin=%5Bobject%20Object%5D&amp;originHeight=588&amp;originWidth=1080&amp;originalType=binary%E2%88%B6=1&amp;status=done&amp;style=none" alt=""><br>「注意的点：接口文档只能在测试 / 开发环境开启，其他环境请关闭。」</p><h4 id="常用的-Swagger-注解"><a href="#常用的-Swagger-注解" class="headerlink" title="常用的 Swagger 注解"></a>常用的 Swagger 注解</h4><ul><li><code>@Api</code>用于<code>Controller</code></li><li><code>@ApiOperation</code>用于<code>Controller</code>内的方法。</li><li><code>@ApiResponses</code>用于标识接口返回数据的类型。</li><li><code>@ApiModel</code>用于标识类的名称</li><li><code>@ApiModelProperty</code>用于标识属性的名称</li></ul><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = "用户")</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listUserForm 表单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation("获取用户列表")</span></span><br><span class="line">    <span class="meta">@GetMapping("/listUser")</span></span><br><span class="line">    <span class="meta">@ApiResponses(</span></span><br><span class="line"><span class="meta">            @ApiResponse(code = 200, message = "操作成功", response = UserVo.class)</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVo <span class="title">listUser</span><span class="params">(<span class="meta">@Validated</span> ListUserForm listUserForm)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> ResultVoUtil.success(userService.listUser(listUserForm));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="CodeGenerator-代码生成器"><a href="#CodeGenerator-代码生成器" class="headerlink" title="CodeGenerator 代码生成器"></a>CodeGenerator 代码生成器</h3><p>mybatis_plus 代码生成器可以生成 entity,service,serviceImpl,mapper,mapper.xml。省去了建立一大堆实体类的麻烦。</p><h3 id="常用的封装"><a href="#常用的封装" class="headerlink" title="常用的封装"></a>常用的封装</h3><h4 id="统一返回-ResultVo"><a href="#统一返回-ResultVo" class="headerlink" title="统一返回 ResultVo"></a>统一返回 ResultVo</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel("固定返回格式")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVo</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("状态码")</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("提示信息")</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("响应数据")</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="抽象表单-BaseForm"><a href="#抽象表单-BaseForm" class="headerlink" title="抽象表单 BaseForm"></a>抽象表单 BaseForm</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseForm</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回实体类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">buildEntity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这个类有啥用呢。先看一下，下面的代码。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userForm 表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 或者 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(AddUserForm userForm)</span> </span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setNickname(userForm.getNickname());</span><br><span class="line">    user.setBirthday(userForm.getBirthday());</span><br><span class="line">    user.setUsername(userForm.getUsername());</span><br><span class="line">    user.setPassword(userForm.getPassword());</span><br><span class="line">    <span class="keyword">return</span> save(user);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>重构一下，感觉清爽了一些。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userForm 表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 或者 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(AddUserForm userForm)</span> </span>{</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    BeanUtils.copyProperties(<span class="keyword">this</span>,user);</span><br><span class="line">    <span class="keyword">return</span> save(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用 BaseForm 进行重构 <code>AddUserForm</code> 继承 <code>BaseForm</code> 并重写 <code>buildEntity</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddUserForm</span> <span class="keyword">extends</span> <span class="title">BaseForm</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 昵称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">buildEntity</span><span class="params">()</span> </span>{</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        BeanUtils.copyProperties(<span class="keyword">this</span>,user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userForm 表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 或者 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addUser</span><span class="params">(AddUserForm userForm)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> save(userForm.buildEntity());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的代码有没有种似曾相识的感觉，很多情况都是将接受到的参数，转变成对应的实体类然后「保存」或者「更新」。<br>所以对于这类的 form 可以继承<code>baseform</code>并实现<code>buildEntity()</code>这样可以更加符合面向对象，service 不需要关心 form 如何转变成 entity, 只需要在使用的时候调用<code>buildEntity()</code>即可，尤其是在 form -&gt; entity 相对复杂的时候，这样做可以减少 service 内的代码。让代码逻辑看起来更加清晰。</p><p>###</p><h3 id="通用的分页对象"><a href="#通用的分页对象" class="headerlink" title="通用的分页对象"></a>通用的分页对象</h3><p>涉及到查询的时候，绝大多数都需要用到分页，所以说封装分页对象就很有必要。可以注意下 <code>PageForm.calcCurrent()</code>、<code>PageVo.setCurrentAndSize()</code>、<code>PageVo.setTotal()</code>这个几个方法。</p><h4 id="PageForm"><a href="#PageForm" class="headerlink" title="PageForm"></a>PageForm</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = "分页数据", description = "分页需要的表单数据")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageForm</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">PageForm</span>&lt;?&gt;&gt;</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "页码 从第一页开始 1")</span></span><br><span class="line">    <span class="meta">@Min(value = 1, message = "页码输入有误")</span></span><br><span class="line">    <span class="keyword">private</span> Integer current;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页显示的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "每页显示的数量 范围在1~100")</span></span><br><span class="line">    <span class="meta">@Range(min = 1, max = 100, message = "每页显示的数量输入有误")</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算当前页 ,方便mysql 进行分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回 pageForm</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">calcCurrent</span><span class="params">()</span></span>{</span><br><span class="line">        current = (current - <span class="number">1</span> ) * size;</span><br><span class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="PageVo"><a href="#PageVo" class="headerlink" title="PageVo"></a>PageVo</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageVo</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "分页数据")</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "总条数")</span></span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "总页数")</span></span><br><span class="line">    <span class="keyword">private</span> Integer pages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "当前页")</span></span><br><span class="line">    <span class="keyword">private</span> Integer current;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = "查询数量")</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页和每页显示的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageForm 分页表单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回分页信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageVo&lt;T&gt; <span class="title">setCurrentAndSize</span><span class="params">(PageForm&lt;?&gt; pageForm)</span></span>{</span><br><span class="line">        BeanUtils.copyProperties(pageForm,<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置总记录数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> total 总记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotal</span><span class="params">(Integer total)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.total = total;</span><br><span class="line">        <span class="keyword">this</span>.setPages(<span class="keyword">this</span>.total % <span class="keyword">this</span>.size &gt; <span class="number">0</span> ? <span class="keyword">this</span>.total / <span class="keyword">this</span>.size + <span class="number">1</span> : <span class="keyword">this</span>.total / <span class="keyword">this</span>.size);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><h5 id="ListUserForm"><a href="#ListUserForm" class="headerlink" title="ListUserForm"></a>ListUserForm</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel("获取用户列表需要的表单数据")</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListUserForm</span> <span class="keyword">extends</span> <span class="title">PageForm</span>&lt;<span class="title">ListUserForm</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty("用户状态")</span></span><br><span class="line">    <span class="meta">@NotEmpty(message = "用户状态不能为空")</span></span><br><span class="line">    <span class="meta">@Range(min =  -1 , max = 1 , message = "用户状态有误")</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listUserForm 表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageVo&lt;UserVo&gt; <span class="title">listUser</span><span class="params">(ListUserForm listUserForm)</span> </span>{</span><br><span class="line">    PageVo&lt;UserVo&gt; pageVo = <span class="keyword">new</span> PageVo&lt;UserVo&gt;().setCurrentAndSize(listUserForm);</span><br><span class="line">    pageVo.setTotal(countUser(listUserForm.getStatus()));</span><br><span class="line">    pageVo.setRecords(userMapper.listUser(listUserForm.calcCurrent()));</span><br><span class="line">    <span class="keyword">return</span> pageVo;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Integer <span class="title">countUser</span><span class="params">(String status)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> count(<span class="keyword">new</span> QueryWrapper&lt;User&gt;().eq(<span class="string">"status"</span>,status));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> listUserForm 表单数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation("获取用户列表")</span></span><br><span class="line"><span class="meta">@GetMapping("/listUser")</span></span><br><span class="line"><span class="meta">@ApiResponses(</span></span><br><span class="line"><span class="meta">        @ApiResponse(code = 200, message = "操作成功", response = UserVo.class)</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVo <span class="title">listUser</span><span class="params">(<span class="meta">@Validated</span> ListUserForm listUserForm)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> ResultVoUtil.success(userService.listUser(listUserForm));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1621647700764-ff5b2765-10fb-44e3-8445-84ee9b80dd2c.png#clientId=uea287a11-b688-4&amp;from=ui&amp;id=u4771dc31&amp;margin=%5Bobject%20Object%5D&amp;name=2021-05-22-09-40-57-400271.png&amp;originHeight=672&amp;originWidth=1080&amp;originalType=binary%E2%88%B6=1&amp;size=2181546&amp;status=done&amp;style=none&amp;taskId=u2c105624-9a47-4090-8d9c-f70a62f318b" alt="2021-05-22-09-40-57-400271.png"></p><h5 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h5><ul><li>PageVo 在实例化的时候需要设置「当前页」和「每页显示的数量」可以调用<code>setCurrentAndSize()</code>完成。</li><li>进行分页查询的时候，需要计算偏移量。<code>listUserForm.calcCurrent()</code></li></ul><p>为什么要计算偏移量呢？</p><ul><li>假如查询第 1 页每页显示 10 条记录，前端传递过来的参数是<code>current=1&amp;&amp;size=10</code>，这个时候 limit 1,10 没有问题。</li><li>假如查询第 2 页每页显示 10 条记录，前端传递过来的参数是<code>current=2&amp;&amp;size=10</code>，这个时候 limit 2,10 就有问题，实际应该是 limit 10,10。<code>calcCurrent()</code>的作用就是如此。</li></ul><p>为什么不用 MybatisPlus 自带的分页插件呢？</p><div style="background: #FFFBE6;padding:10px;border: 1px solid #C3C3C3;border-radius:5px;margin-bottom:5px;">自带的分页查询在大量数据下，会出现性能问题。</div><h3 id="常用工具类"><a href="#常用工具类" class="headerlink" title="常用工具类"></a>常用工具类</h3><p>常用工具类可以根据自己的开发习惯引入。</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>异常处理的大致流程主要如下。</p><ul><li>异常信息抛出 -&gt; <code>ControllerAdvice</code> 进行捕获格式化输出内容</li><li>手动抛出<code>CustomException</code>并传入 ReulstEnum ——&gt; 进行捕获错误信息输出错误信息。</li></ul><h4 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultEnum 返回枚举对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method     方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(ResultEnum resultEnum, String method)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(resultEnum.getMsg());</span><br><span class="line">        <span class="keyword">this</span>.code = resultEnum.getCode();</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code    状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method  方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(Integer code, String message, String method)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="错误信息枚举"><a href="#错误信息枚举" class="headerlink" title="错误信息枚举"></a>错误信息枚举</h4><p>根据业务进行添加。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultEnum</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未知异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UNKNOWN_EXCEPTION(<span class="number">100</span>, <span class="string">"未知异常"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ADD_ERROR(<span class="number">103</span>, <span class="string">"添加失败"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UPDATE_ERROR(<span class="number">104</span>, <span class="string">"更新失败"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DELETE_ERROR(<span class="number">105</span>, <span class="string">"删除失败"</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GET_ERROR(<span class="number">106</span>, <span class="string">"查找失败"</span>),</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    ResultEnum(Integer code, String msg) {</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过状态码获取枚举对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 枚举对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultEnum <span class="title">getByCode</span><span class="params">(<span class="keyword">int</span> code)</span></span>{</span><br><span class="line">        <span class="keyword">for</span> (ResultEnum resultEnum : ResultEnum.values()) {</span><br><span class="line">            <span class="keyword">if</span>(code == resultEnum.getCode()){</span><br><span class="line">                <span class="keyword">return</span> resultEnum;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="全局异常拦截"><a href="#全局异常拦截" class="headerlink" title="全局异常拦截"></a>全局异常拦截</h4><p>全局异常拦截是使用<code>@ControllerAdvice</code>进行实现，常用的异常拦截配置可以查看 <code>GlobalExceptionHandling</code>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandling</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = CustomException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVo <span class="title">processException</span><span class="params">(CustomException e)</span> </span>{</span><br><span class="line">        log.error(<span class="string">"位置:{} -&gt; 错误信息:{}"</span>, e.getMethod() ,e.getLocalizedMessage());</span><br><span class="line">        <span class="keyword">return</span> ResultVoUtil.error(Objects.requireNonNull(ResultEnum.getByCode(e.getCode())));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.OK)</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVo <span class="title">exception</span><span class="params">(Exception e)</span> </span>{</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultVoUtil.error(ResultEnum.UNKNOWN_EXCEPTION);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 用户编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 成功或者失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ApiOperation("删除用户")</span></span><br><span class="line"><span class="meta">@DeleteMapping("/deleteUser/{id}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ResultVo <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable("id")</span> String id)</span></span>{</span><br><span class="line">    userService.deleteUser(id);</span><br><span class="line">    <span class="keyword">return</span> ResultVoUtil.success();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String id)</span> </span>{</span><br><span class="line">    <span class="comment">// 如果删除失败抛出异常。 -- 演示而已不推荐这样干</span></span><br><span class="line">    <span class="keyword">if</span>(!removeById(id)){</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CustomException(ResultEnum.DELETE_ERROR, MethodUtil.getLineInfo());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1621647877179-2cc8a5a6-6ae7-4cc8-843b-c7e8d65b628a.png#clientId=uea287a11-b688-4&amp;from=ui&amp;id=u0c74d19f&amp;margin=%5Bobject%20Object%5D&amp;name=2021-05-22-09-40-57-634590.png&amp;originHeight=57&amp;originWidth=1080&amp;originalType=binary%E2%88%B6=1&amp;size=88924&amp;status=done&amp;style=none&amp;taskId=uf816697c-e596-4d2d-b9a4-3677500e767" alt="2021-05-22-09-40-57-634590.png"><br>「将报错代码所在的文件第多少行都打印出来。方便排查。」</p><h5 id="注意的点-1"><a href="#注意的点-1" class="headerlink" title="注意的点"></a>注意的点</h5><p>所有手动抛出的错误信息，都应在错误信息枚举 ResultEnum 进行统一维护。不同的业务使用不同的错误码。方便在报错时进行分辨。快速定位问题。</p><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><h4 id="SpringBoot-多环境配置"><a href="#SpringBoot-多环境配置" class="headerlink" title="SpringBoot 多环境配置"></a>SpringBoot 多环境配置</h4><p>对于一个项目来讲基本都 4 有个环境 dev,test,pre,prod，对于 SpringBoot 项目多建立几个配置文件就可以了。<br>然后启动的时候可以通过配置<code>spring.profiles.active</code>来选择启动的环境。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/396745/1621647903522-3ac63a0f-43b6-400b-a19b-6b5ca0b68fe1.png#clientId=uea287a11-b688-4&amp;from=ui&amp;id=u1f7b16f3&amp;margin=%5Bobject%20Object%5D&amp;name=2021-05-22-09-40-57-868910.png&amp;originHeight=210&amp;originWidth=540&amp;originalType=binary%E2%88%B6=1&amp;size=73998&amp;status=done&amp;style=none&amp;taskId=ueb67b112-8644-487b-ab57-fa294b557b7" alt="2021-05-22-09-40-57-868910.png"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar BasicProject.jar --spring.profiles.active=prod</span><br></pre></td></tr></tbody></table></figure><h4 id="Maven-多环境配置"><a href="#Maven-多环境配置" class="headerlink" title="Maven 多环境配置"></a>Maven 多环境配置</h4><p>假如想在打包的时候动态指定环境，这个时候就需要借助 Maven 的 xml 来实现。</p><h5 id="配置-XML"><a href="#配置-XML" class="headerlink" title="配置 XML"></a>配置 XML</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置环境  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开发 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>test<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 准生产 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pre<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>pre<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 生产 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activatedProperties</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">activatedProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="更改-application-yml"><a href="#更改-application-yml" class="headerlink" title="更改 application.yml"></a>更改 application.yml</h5><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 选择环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">@activatedProperties@</span></span><br></pre></td></tr></tbody></table></figure><h5 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -P prod</span><br><span class="line">mvn clean package -P pre</span><br><span class="line">mvn clean package -P <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure><p>打包完可以解压开查看 application.yml 会发现<code>spring.profiles.active=@activatedProperties@</code> 发生了改变。</p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>采用 logback 日志配置。</p><h3 id="JenkinsFile"><a href="#JenkinsFile" class="headerlink" title="JenkinsFile"></a>JenkinsFile</h3><p>JenkinsFile 主要是配置项目根据如何进行构建并发布到不同的环境。需要去了解 pipeline 语法，以及如何配置 jenkins。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis: 数据结构与模板类</title>
      <link href="/2022/05/12/yuque/redis-shu-ju-jie-gou-yu-mo-ban-lei/"/>
      <url>/2022/05/12/yuque/redis-shu-ju-jie-gou-yu-mo-ban-lei/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="1-Redis-有多少种数据结构？"><a href="#1-Redis-有多少种数据结构？" class="headerlink" title="1. Redis 有多少种数据结构？"></a>1. Redis 有多少种数据结构？</h1><p>主要有 5 种 Redis 对象，分别是 String、List、Hash、Set、Zset，这里的对象都指的是 Value 部分。底层实现依托于 sds、ziplist、skiplist、dict 等更基础的数据结构。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/1032788/1624193299566-3ead9f52-f8ac-4467-acf8-39421479aa09.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=665&amp;id=T9q9X&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1346&amp;originWidth=1450&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=162478&amp;status=done&amp;style=none&amp;title=&amp;width=716" alt="image.png"></p><h1 id="2-String（字符串）"><a href="#2-String（字符串）" class="headerlink" title="2. String（字符串）"></a>2. String（字符串）</h1><h2 id="2-1-简单介绍"><a href="#2-1-简单介绍" class="headerlink" title="2.1 简单介绍"></a>2.1 简单介绍</h2><p>字符串类型是 Redis 最基础的数据结构，字符串类型可以是<code>JSON</code>、<code>XML</code>甚至是二进制的图片等数据，但是最大值不能超过<code>512MB</code>。在 Redis 中，String 是可以修改的，称为<code>动态字符串</code>(<code>Simple Dynamic String</code>简称<code>SDS</code>)，说是字符串但它的内部结构更像是一个<code>ArrayList</code>，内部维护着一个字节数组，并且在其内部预分配了一定的空间，以减少内存的频繁分配。<code>Redis</code>的内存分配机制是这样：</p><ul><li>当字符串的长度小于 1MB 时，每次扩容都是加倍现有的空间。</li><li>如果字符串长度超过 1MB 时，每次扩容时只会扩展 1MB 的空间。</li></ul><p>这样既保证了内存空间够用，还不至于造成内存的浪费，<strong>字符串最大长度为</strong><code>**512MB**</code>。分析一下 SDS 的数据结构：</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SDS</span> {</span></span><br><span class="line">  T capacity;       <span class="comment">//数组容量</span></span><br><span class="line">  T len;            <span class="comment">//实际长度</span></span><br><span class="line">  byte flages;  <span class="comment">//标志位,低三位表示类型</span></span><br><span class="line">  byte[] content;   <span class="comment">//数组内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>capacity</code>和<code>len</code>两个属性都是泛型，为什么不直接用<code>int类型</code>？因为<code>Redis</code>内部有很多优化方案，为更合理的使用内存，不同长度的字符串采用不同的数据类型表示（<code>int</code>、<code>embstr</code>、<code>raw</code>），且在创建字符串的时候<code>len</code>会和<code>capacity</code>一样大，不产生冗余的空间，所以<code>String</code>值可以是字符串、数字（整数、浮点数) 或者 二进制。</p><p>Redis 会根据当前值的类型和长度决定使用哪种内部编码来实现。字符串类型的内部编码有<code>3</code>种：</p><ol><li>int：8 个字节的长整型。</li><li>embstr：小于等于 39 个字节的字符串。</li><li>raw：大于 39 个字节的字符串。</li></ol><h2 id="2-2-应用场景"><a href="#2-2-应用场景" class="headerlink" title="2.2 应用场景"></a>2.2 应用场景</h2><h3 id="2-2-1-缓存"><a href="#2-2-1-缓存" class="headerlink" title="2.2.1 缓存"></a>2.2.1 缓存</h3><p>在 web 服务中，通常使用 MySQL 作为数据库，Redis 作为缓存。由于 Redis 具有支撑高并发的特性，通常能起到加速读写和降低后端压力的作用。web 端的大多数请求都是从 Redis 中获取的数据，如果 Redis 中没有需要的数据，则会从 MySQL 中去获取，并将获取到的数据写入 Redis。</p><h3 id="2-2-2-计数"><a href="#2-2-2-计数" class="headerlink" title="2.2.2 计数"></a>2.2.2 计数</h3><p>Redis 中有一个字符串相关的命令<code>incr key</code>，<code>incr</code>命令对值做自增操作，返回结果分为以下三种情况：</p><ul><li>值不是整数，返回错误</li><li>值是整数，返回自增后的结果</li><li>key 不存在，默认键为<code>0</code>，返回<code>1</code></li></ul><p>比如文章的阅读量，视频的播放量等等都会使用 Redis 来计数，每播放一次，对应的播放量就会加<code>1</code>，同时将这些数据异步存储到数据库中达到持久化的目的。</p><h3 id="2-2-3-共享-Session"><a href="#2-2-3-共享-Session" class="headerlink" title="2.2.3 共享 Session"></a>2.2.3 共享 Session</h3><p>在分布式系统中，用户的每次请求会访问到不同的服务器，这就会导致 session 不同步的问题，假如一个用来获取用户信息的请求落在 A 服务器上，获取到用户信息后存入 session。下一个请求落在 B 服务器上，想要从 session 中获取用户信息就不能正常获取了，因为用户信息的 session 在服务器 A 上，为了解决这个问题，使用 Redis 集中管理这些 session，将 session 存入 redis，使用的时候直接从 Redis 中获取就可以了。</p><h3 id="2-2-4-限速"><a href="#2-2-4-限速" class="headerlink" title="2.2.4 限速"></a>2.2.4 限速</h3><p>为了安全考虑，有些网站会对 IP 进行限制，限制同一 IP 在一定时间内访问次数不能超过 n 次。</p><h2 id="2-3-String-常用命令"><a href="#2-3-String-常用命令" class="headerlink" title="2.3 String 常用命令"></a>2.3 String 常用命令</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> [key]  [<span class="keyword">value</span>]   给指定key设置值（<span class="keyword">set</span> 可覆盖老的值）</span><br><span class="line"><span class="keyword">get</span> [key]   获取指定key 的值</span><br><span class="line">del [key]   删除指定key</span><br><span class="line"><span class="keyword">exists</span> [key]  判断是否存在指定key</span><br><span class="line">mset [key1]  [value1]  [key2]  [value2] ...... 批量存键值对</span><br><span class="line">mget [key1]  [key2] ......   批量取key</span><br><span class="line">expire [key]  [<span class="type">time</span>]    给指定key 设置过期时间  单位秒</span><br><span class="line">setex [key]  [<span class="type">time</span>]  [<span class="keyword">value</span>]  等价于 <span class="keyword">set</span> <span class="operator">+</span> expire 命令组合</span><br><span class="line">setnx [key]  [<span class="keyword">value</span>]   如果key不存在则<span class="keyword">set</span> 创建，否则返回<span class="number">0</span></span><br><span class="line">incr [key]           如果<span class="keyword">value</span>为整数 可用 incr命令每次自增<span class="number">1</span></span><br><span class="line">incrby [key] [number]  使用incrby命令对整数值 进行增加 number</span><br></pre></td></tr></tbody></table></figure><h1 id="3-List（列表）"><a href="#3-List（列表）" class="headerlink" title="3. List（列表）"></a>3. List（列表）</h1><h2 id="3-1-简单介绍"><a href="#3-1-简单介绍" class="headerlink" title="3.1 简单介绍"></a>3.1 简单介绍</h2><p>Redis 中的<code>List</code>和<code>Java</code>中的<code>LinkedList</code>很像，底层都是一种链表结构，<code>List</code>的插入和删除操作非常快，时间复杂度为 O(1)，不像数组结构插入、删除操作需要移动数据。像归像，但是 Redis 中的<code>List</code>底层可不是一个双向链表那么简单。</p><p>当数据量较少的时候它的底层存储结构为一块连续内存，称之为<code>ziplist(压缩列表)</code>，它将所有的元素紧挨着一起存储，分配的是一块连续的内存；当数据量较多的时候将会变成<code>quicklist(快速链表)</code>结构。</p><p>可单纯的链表也是有缺陷的，链表的前后指针<code>prev</code>和<code>next</code>会占用较多的内存，会比较浪费空间，而且会加重内存的碎片化。在 Redis 3.2 之后就都改用<code>ziplist+链表</code>的混合结构，称之为<code>quicklist(快速链表)</code>。<code>ziplist</code>的每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二个元素保存元素的分值。</p><h2 id="3-2-应用场景"><a href="#3-2-应用场景" class="headerlink" title="3.2 应用场景"></a>3.2 应用场景</h2><p>由于<code>List</code>是一个按照插入顺序排序的列表，所以应用场景相对还较多的，例如：</p><h3 id="3-2-1-消息队列"><a href="#3-2-1-消息队列" class="headerlink" title="3.2.1 消息队列"></a>3.2.1 消息队列</h3><p>列表用来存储多个有序的字符串，既然是有序的，那么就满足消息队列的特点。使用<code>lpush</code>+<code>rpop</code>或者<code>rpush</code>+<code>lpop</code>实现消息队列。除此之外，redis 支持阻塞操作，在弹出元素的时候使用阻塞命令来实现阻塞队列。</p><p>Redis 虽然支持消息队列的实现，但是并不支持 ack。所以 Redis 实现的消息队列不能保证消息的可靠性，除非自己实现消息确认机制，不过这非常麻烦，所以如果是重要的消息还是推荐使用专门的消息队列去做。</p><h3 id="3-2-2-栈"><a href="#3-2-2-栈" class="headerlink" title="3.2.2 栈"></a>3.2.2 栈</h3><p>由于列表存储的是有序字符串，满足队列的特点，也就能满足栈先进后出的特点，使用<code>lpush</code>+<code>lpop</code>或者<code>rpush</code>+<code>rpop</code>实现栈。</p><h3 id="3-2-3-文章列表"><a href="#3-2-3-文章列表" class="headerlink" title="3.2.3 文章列表"></a>3.2.3 文章列表</h3><p>因为列表的元素不但是有序的，而且还支持按照索引范围获取元素。<code>lpush</code>命令和<code>lrange</code>命令能实现最新列表的功能，每次通过<code>lpush</code>命令往列表里插入新的元素，然后通过<code>lrange</code>命令读取最新的元素列表。比如我们可以使用命令<code>lrange key 0 9</code>分页获取文章列表。</p><h2 id="3-3-List-常用命令"><a href="#3-3-List-常用命令" class="headerlink" title="3.3 List 常用命令"></a>3.3 List 常用命令</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rpush [key] [value1] [value2] ......    链表右侧插入</span><br><span class="line">rpop [key]  移除右侧列表头元素，并返回该元素</span><br><span class="line">lpop   [key]    移除左侧列表头元素，并返回该元素</span><br><span class="line">llen  [key]     返回该列表的元素个数</span><br><span class="line">lrem [key] [count] [<span class="keyword">value</span>]  删除列表中与<span class="keyword">value</span>相等的元素，count是删除的个数。 count<span class="operator">&gt;</span><span class="number">0</span> 表示从左侧开始查找，删除count个元素，count<span class="operator">&lt;</span><span class="number">0</span> 表示从右侧开始查找，删除count个相同元素，count<span class="operator">=</span><span class="number">0</span> 表示删除全部相同的元素</span><br><span class="line">lindex [key] [index]  获取list指定下标的元素 （需要遍历，时间复杂度为O(n)） index 代表元素下标，index 可以为负数， index<span class="operator">=</span> 表示倒数第一个元素，同理 index<span class="operator">=</span><span class="number">-2</span> 表示倒数第二 个元素。</span><br><span class="line">lrange [key]  [start_index] [end_index]   获取list 区间内的所有元素（时间复杂度为 O(n)）</span><br><span class="line">ltrim  [key]  [start_index] [end_index]   保留区间内的元素，其他元素删除（时间复杂度为 O(n)）</span><br></pre></td></tr></tbody></table></figure><h1 id="4-Hash（字典）"><a href="#4-Hash（字典）" class="headerlink" title="4. Hash（字典）"></a>4. Hash（字典）</h1><h2 id="4-1-简单介绍"><a href="#4-1-简单介绍" class="headerlink" title="4.1 简单介绍"></a>4.1 简单介绍</h2><p>Redis 中的<code>Hash</code>和 Java 的<code>HashMap</code>更加相似，是<code>数组+链表</code>的结构，当发生 hash 碰撞时将会把元素追加到链表上，值得注意的是在<code>Redis</code>的<code>Hash</code>中<code>value</code>只能是字符串。</p><h2 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a>4.2 使用场景</h2><h3 id="4-2-1-购物车"><a href="#4-2-1-购物车" class="headerlink" title="4.2.1 购物车"></a>4.2.1 购物车</h3><p><code>hset [key] [field] [value]</code>命令， 可以实现以<code>用户Id</code>，<code>商品Id</code>为<code>field</code>，商品数量为<code>value</code>，恰好构成了购物车的 3 个要素。</p><h3 id="4-2-2-存储对象"><a href="#4-2-2-存储对象" class="headerlink" title="4.2.2 存储对象"></a>4.2.2 存储对象</h3><p><code>hash</code>类型的<code>(key, field, value)</code>的结构与对象的<code>(对象id, 属性, 值)</code>的结构相似，也可以用来存储对象，如：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key<span class="operator">=</span>JavaUser293847</span><br><span class="line"><span class="keyword">value</span><span class="operator">=</span>{</span><br><span class="line">  “id”: <span class="number">1</span>,</span><br><span class="line">  “name”: “SnailClimb”,</span><br><span class="line">  “age”: <span class="number">22</span>,</span><br><span class="line">  “location”: “Wuhan, Hubei”</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-3-Hash-常用命令"><a href="#4-3-Hash-常用命令" class="headerlink" title="4.3 Hash 常用命令"></a>4.3 Hash 常用命令</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hset  [key]  [field] [<span class="keyword">value</span>]    新建字段信息</span><br><span class="line">hget  [key]  [field]    获取字段信息</span><br><span class="line">hdel [key] [field]  删除字段</span><br><span class="line">hlen  [key]   保存的字段个数</span><br><span class="line">hgetall  [key]  获取指定key 字典里的所有字段和值 （字段信息过多,会导致慢查询 慎用：亲身经历 曾经用过这个这个指令导致线上服务故障）</span><br><span class="line">hmset  [key]  [field1] [value1] [field2] [value2] ......   批量创建</span><br><span class="line">hincr  [key] [field]   对字段值自增</span><br><span class="line">hincrby [key] [field] [number] 对字段值增加number</span><br></pre></td></tr></tbody></table></figure><h1 id="5-Set（集合）"><a href="#5-Set（集合）" class="headerlink" title="5. Set（集合）"></a>5. Set（集合）</h1><h2 id="5-1-简单介绍"><a href="#5-1-简单介绍" class="headerlink" title="5.1 简单介绍"></a>5.1 简单介绍</h2><p>Redis 中的<code>set</code>和<code>Java</code>中的<code>HashSet</code>有些类似，它内部的键值对是无序的、唯一 的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值 NULL。当集合中最后一个元素被移除之后，数据结构被自动删除，内存被回收。</p><h2 id="5-2-应用场景"><a href="#5-2-应用场景" class="headerlink" title="5.2 应用场景"></a>5.2 应用场景</h2><ul><li>比如：在在线讨论社区中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。</li><li>好友、关注、粉丝、感兴趣的人集合： 1)<code>sinter</code>命令可以获得 A 和 B 两个用户的共同好友； 2)<code>sismember</code>命令可以判断 A 是否是 B 的好友； 3)<code>scard</code>命令可以获取好友数量；</li></ul><ol start="4"><li>关注时，<code>smove</code>命令可以将 B 从 A 的粉丝集合转移到 A 的好友集合</li></ol><ul><li>首页展示随机：美团首页有很多推荐商家，但是并不能全部展示，set 类型适合存放所有需要展示的内容，而<code>srandmember</code>命令则可以从中随机获取几个。</li><li>抽奖功能：用户点击抽奖按钮，参数抽奖，将用户编号放入集合，然后抽奖，分别抽一等奖、二等奖，如果已经抽中一等奖的用户不能参数抽二等奖则使用<code>spop key [count]</code>，反之使用<code>srandmember key [count]</code>。</li></ul><h2 id="5-3-Set-常用命令"><a href="#5-3-Set-常用命令" class="headerlink" title="5.3 Set 常用命令"></a>5.3 Set 常用命令</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sadd [key]  [<span class="keyword">value</span>]  向指定key的<span class="keyword">set</span>中添加元素</span><br><span class="line">smembers [key]    获取指定key 集合中的所有元素</span><br><span class="line">sismember [key] [<span class="keyword">value</span>]   判断集合中是否存在某个<span class="keyword">value</span></span><br><span class="line">scard [key]    获取集合的长度</span><br><span class="line">spop [key]   弹出一个元素</span><br><span class="line">srem [key] [<span class="keyword">value</span>]  删除指定元素</span><br></pre></td></tr></tbody></table></figure><h1 id="6-Zset（有序集合）"><a href="#6-Zset（有序集合）" class="headerlink" title="6. Zset（有序集合）"></a>6. Zset（有序集合）</h1><h2 id="6-1-简单介绍"><a href="#6-1-简单介绍" class="headerlink" title="6.1 简单介绍"></a>6.1 简单介绍</h2><p><code>Zset</code>也叫<code>SortedSet</code>一方面它是个<code>set</code>，保证了内部 value 的唯一性，另一方面它可以给每个 value 赋予一个<code>score</code>，代表这个 value 的排序权重。它的内部实现由两种数据结构支持：ziplist 和 skiplist。</p><h3 id="6-1-1-ziplist（压缩列表）"><a href="#6-1-1-ziplist（压缩列表）" class="headerlink" title="6.1.1 ziplist（压缩列表）"></a>6.1.1 ziplist（压缩列表）</h3><p>当 Zset 使用 ziplist 作为存储结构的时候，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二个元素保存元素的分值。</p><h3 id="6-1-2-skiplist（跳跃表）"><a href="#6-1-2-skiplist（跳跃表）" class="headerlink" title="6.1.2 skiplist（跳跃表）"></a>6.1.2 skiplist（跳跃表）</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1032788/1624193895328-aee587c1-5b69-4a8d-b1a9-b8bb7d63dddf.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=201&amp;id=TWAM7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=234&amp;originWidth=1000&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=31197&amp;status=done&amp;style=none&amp;title=&amp;width=861" alt="image.png"><br>当 Zset 使用 skiplist 作为存储结构时，使用 skiplist 按序保存元素分值，使用 dict 来保存元素和分值的对应关系。具体实现可参考 <a href="https://www.yuque.com/codershenghai/javalearning/qtuoil#edE8j">https://www.yuque.com/codershenghai/javalearning/qtuoil#edE8j</a>。</p><h3 id="6-1-3-Zset-为什么同时需要使用字典和跳表来实现？"><a href="#6-1-3-Zset-为什么同时需要使用字典和跳表来实现？" class="headerlink" title="6.1.3 Zset 为什么同时需要使用字典和跳表来实现？"></a>6.1.3 Zset 为什么同时需要使用字典和跳表来实现？</h3><p>Zset 是一个有序列表，字典和跳表分别对应两种查询场景，字典用来支持按成员查询数据，跳表则用以实现高效的范围查询，这样两个场景，性能都做到了极致。</p><h2 id="6-2-Zset-应用场景"><a href="#6-2-Zset-应用场景" class="headerlink" title="6.2 Zset 应用场景"></a>6.2 Zset 应用场景</h2><h3 id="6-2-1-排行榜"><a href="#6-2-1-排行榜" class="headerlink" title="6.2.1 排行榜"></a>6.2.1 排行榜</h3><p>和<code>list</code>不同的是<code>Zset</code>它能够实现动态的排序。比如用来存储粉丝列表，在线讨论社区项目的关注模块用到了<code>Zset</code>，value 为粉丝的用户 ID，score 为关注时间，这样我们可以对粉丝列表按关注时间进行排序。</p><p><code>Zset</code>还可以用来存储学生的成绩，<code>value</code>值是学生的 ID，<code>score</code>是他的考试成绩。 我们对成绩按分数进行排序就可以得到他的名次。</p><h3 id="6-2-2-延迟消息队列"><a href="#6-2-2-延迟消息队列" class="headerlink" title="6.2.2 延迟消息队列"></a>6.2.2 延迟消息队列</h3><p>在一个下单系统中，下单后需要在 15 分钟内进行支付，如果 15 分钟未支付则自动取消订单。将下单后的 15 分钟后时间作为 score，订单作为 value 存入 Redis，消费者轮询去消费，如果消费的大于等于这笔记录的 score，则将这笔记录移除队列，取消订单。</p><h2 id="6-3-Zset-常用命令"><a href="#6-3-Zset-常用命令" class="headerlink" title="6.3 Zset 常用命令"></a>6.3 Zset 常用命令</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zadd [key] [score] [<span class="keyword">value</span>] 向指定key的集合中增加元素</span><br><span class="line">zrange [key] [start_index] [end_index] 获取下标范围内的元素列表，按score 排序输出</span><br><span class="line">zrevrange [key] [start_index] [end_index]  获取范围内的元素列表 ，按score排序 逆序输出</span><br><span class="line">zcard [key]  获取集合列表的元素个数</span><br><span class="line">zrank [key] [<span class="keyword">value</span>]  获取元素再集合中的排名</span><br><span class="line">zrangebyscore [key] [score1] [score2]  输出score范围内的元素列表</span><br><span class="line">zrem [key] [<span class="keyword">value</span>]  删除元素</span><br><span class="line">zscore [key] [<span class="keyword">value</span>] 获取元素的score</span><br></pre></td></tr></tbody></table></figure><h1 id="7-HyperLogLog"><a href="#7-HyperLogLog" class="headerlink" title="7. HyperLogLog"></a>7. HyperLogLog</h1><ul><li>常用于计数，它采用一种基数算法，用于完成独立总数的统计。</li><li>占据空间小，无论统计多少个数据，只占<code>12K</code>的内存空间。</li><li>是一种不精确的统计算法，标准误差为 0.81%。</li><li>比如：在线讨论社区中统计独立访客 UV，使用当前日期作为 key，IP 地址作为 value 存入 HyperLoglog。如果要统计指定日期范围内的 UV，那么整理该日期范围内的 key 到一个列表中，然后对这个列表求一个 union，然后统计 HyperLoglog 的 size 即可。</li></ul><h1 id="8-Geo"><a href="#8-Geo" class="headerlink" title="8. Geo"></a>8. Geo</h1><p>用于支持存储地理位置信息。</p><h1 id="Redis-服务类与实现"><a href="#Redis-服务类与实现" class="headerlink" title="Redis 服务类与实现"></a>Redis 服务类与实现</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Distance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.GeoResults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis操作接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/7 16:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisService</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">del</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys key值集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">del</span><span class="params">(List&lt;String&gt; keys)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">getExpire</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hasKey</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta delta值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta delta值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递减后结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回内部key的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">hGet</span><span class="params">(String key, String hashKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   内部key的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time    过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   内部key的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回hashMap</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;String, Object&gt; <span class="title">hGetAll</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  hashMap值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map hashMap值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, ?&gt; map)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hDel</span><span class="params">(String key, Object... hashKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">hHasKey</span><span class="params">(String key, String hashKey)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta   递增条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递增后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     外部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 内部key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta   递增条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回递减后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset添加分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Double}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zIncr</span><span class="params">(String key, Object value, Double score)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset减少分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score 分数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Double}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zDecr</span><span class="params">(String key, Object value, Double score)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * zset根据分数排名获取指定元素信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Map&lt;Object, Double&gt;}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;Object, Double&gt; <span class="title">zReverseRangeWithScore</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取zset指定元素分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Double}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Double <span class="title">zScore</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取zset所有分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 关键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Map}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Map&lt;Object, Double&gt; <span class="title">zAllScore</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Set&lt;Object&gt; <span class="title">sMembers</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回增加数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sAdd</span><span class="params">(String key, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回添加的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sAddExpire</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">sIsMember</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sSize</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除掉的数据量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">sRemove</span><span class="params">(String key, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回查询的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lSize</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">lIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPush</span><span class="params">(String key, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPush</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value 集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPushAll</span><span class="params">(String key, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增加后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lPushAll</span><span class="params">(String key, Long time, Object... values)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 总量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回删除后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向bitmap中新增值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b      状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">bitAdd</span><span class="params">(String key, <span class="keyword">int</span> offset, <span class="keyword">boolean</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从bitmap中获取偏移量的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Boolean <span class="title">bitGet</span><span class="params">(String key, <span class="keyword">int</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bitmap的key值总和</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 总和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">bitCount</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bitmap范围值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit  范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offset 开始偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long类型集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Long&gt; <span class="title">bitField</span><span class="params">(String key, <span class="keyword">int</span> limit, <span class="keyword">int</span> offset)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有bitmap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 以二进制字节数组返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">byte</span>[] bitGetAll(String key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向hyperlog中添加数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Long}</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hyperAdd</span><span class="params">(String key, Object... value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hyperlog元素数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> {<span class="doctag">@link</span> Long} 元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">hyperGet</span><span class="params">(String... key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hyperlog数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hyperDel</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加坐标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x    x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y    y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 地点名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Long <span class="title">geoAdd</span><span class="params">(String key, Double x, Double y, String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据城市名称获取坐标集合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place 地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 坐标集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Point&gt; <span class="title">geoGetPointList</span><span class="params">(String key, Object... place)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个城市之间的距离</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeOne 地点1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeTow 地点2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Distance <span class="title">geoCalculationDistance</span><span class="params">(String key, String placeOne, String placeTow)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取附该地点附近的其他地点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place    地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> distance 附近的范围</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> limit    查几条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sort     排序规则</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回附近的地点集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; geoNearByPlace(String key, String place, Distance distance, <span class="keyword">long</span> limit, Sort.Direction sort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取地点的hash</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> place 地点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">geoGetHash</span><span class="params">(String key, String... place)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dzgu.myblog.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dzgu.myblog.service.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Distance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.GeoResults;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.geo.Point;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisGeoCommands;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: redis操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： dzgu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>： 2021/11/7 17:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">RedisService</span> </span>{</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">del</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">del</span><span class="params">(List&lt;String&gt; keys)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getExpire</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hasKey</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hGet</span><span class="params">(String key, String hashKey)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hSet</span><span class="params">(String key, String hashKey, Object value)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">hGetAll</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hSetAll</span><span class="params">(String key, Map&lt;String, ?&gt; map)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hDel</span><span class="params">(String key, Object... hashKey)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">hHasKey</span><span class="params">(String key, String hashKey)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zIncr</span><span class="params">(String key, Object value, Double score)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, score);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zDecr</span><span class="params">(String key, Object value, Double score)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, -score);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Double&gt; <span class="title">zReverseRangeWithScore</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end)</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zScore</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Double&gt; <span class="title">zAllScore</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(redisTemplate.opsForZSet().rangeWithScores(key, <span class="number">0</span>, -<span class="number">1</span>))</span><br><span class="line">                .stream()</span><br><span class="line">                .collect(Collectors.toMap(ZSetOperations.TypedTuple::getValue, ZSetOperations.TypedTuple::getScore));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sMembers</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sAdd</span><span class="params">(String key, Object... values)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sAddExpire</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>{</span><br><span class="line">        Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">sIsMember</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sSize</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">sRemove</span><span class="params">(String key, Object... values)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lRange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lSize</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPush</span><span class="params">(String key, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPush</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>{</span><br><span class="line">        Long index = redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPushAll</span><span class="params">(String key, Object... values)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> </span>{</span><br><span class="line">        Long count = redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">bitAdd</span><span class="params">(String key, <span class="keyword">int</span> offset, <span class="keyword">boolean</span> b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().setBit(key, offset, b);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">bitGet</span><span class="params">(String key, <span class="keyword">int</span> offset)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().getBit(key, offset);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">bitCount</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Long&gt; <span class="title">bitField</span><span class="params">(String key, <span class="keyword">int</span> limit, <span class="keyword">int</span> offset)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;List&lt;Long&gt;&gt;) con -&gt;</span><br><span class="line">                con.bitField(key.getBytes(),</span><br><span class="line">                        BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(limit)).valueAt(offset)));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] bitGetAll(String key) {</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute((RedisCallback&lt;<span class="keyword">byte</span>[]&gt;) con -&gt; con.get(key.getBytes()));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hyperAdd</span><span class="params">(String key, Object... value)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().add(key, value);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">hyperGet</span><span class="params">(String... key)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHyperLogLog().size(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hyperDel</span><span class="params">(String key)</span> </span>{</span><br><span class="line">        redisTemplate.opsForHyperLogLog().delete(key);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">geoAdd</span><span class="params">(String key, Double x, Double y, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo().add(key, <span class="keyword">new</span> Point(x, y), name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Point&gt; <span class="title">geoGetPointList</span><span class="params">(String key, Object... place)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo().position(key, place);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Distance <span class="title">geoCalculationDistance</span><span class="params">(String key, String placeOne, String placeTow)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .distance(key, placeOne, placeTow, RedisGeoCommands.DistanceUnit.KILOMETERS);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> GeoResults&lt;RedisGeoCommands.GeoLocation&lt;Object&gt;&gt; geoNearByPlace(String key, String place, Distance distance, <span class="keyword">long</span> limit, Sort.Direction sort) {</span><br><span class="line">        RedisGeoCommands.GeoRadiusCommandArgs args = RedisGeoCommands.GeoRadiusCommandArgs.newGeoRadiusArgs().includeDistance().includeCoordinates();</span><br><span class="line">        <span class="comment">// 判断排序方式</span></span><br><span class="line">        <span class="keyword">if</span> (Sort.Direction.ASC == sort) {</span><br><span class="line">            args.sortAscending();</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            args.sortDescending();</span><br><span class="line">        }</span><br><span class="line">        args.limit(limit);</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .radius(key, place, distance, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">geoGetHash</span><span class="params">(String key, String... place)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForGeo()</span><br><span class="line">                .hash(key, place);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>#</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://aijishu.com/a/1060000000091735">一口气说出 Redis 5 种数据结构及对应使用场景，面试要加分的</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU5NjA3MjQ5MA==∣=2247486359&amp;idx=1&amp;sn=ca8e88c73d93d55686e56262b5d6a6a6&amp;chksm=fe690ad2c91e83c4c532f1c53d138c6dfccd7676087456f1a1463b02558389eb96cfdb70a653&amp;scene=90&amp;xtrack=1&amp;subscene=93&amp;clicktime=1604020045#rd">redis 五大数据类型使用场景</a></li><li><a href="https://mp.weixin.qq.com/s/VLawBMoeKSj96cbagkbmgA">我是面试官，Redis 面试攻略第一弹</a></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还分不清 Cookie、Session、Token、JWT？</title>
      <link href="/2022/05/12/yuque/huan-fen-bu-qing-cookie-session-token-jwt/"/>
      <url>/2022/05/12/yuque/huan-fen-bu-qing-cookie-session-token-jwt/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>早期互联网只是用来访问查看，不需要关心谁在访问查看。HTTP 是一种无状态的协议，每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，为了标示用户，就出现了 Cookie，而 Cookie、Token、JWT 都是用来标示用户的。</p><h2 id="什么是认证（Authentication）"><a href="#什么是认证（Authentication）" class="headerlink" title="什么是认证（Authentication）"></a><strong>什么是认证（Authentication）</strong></h2><ul><li>通俗地讲就是<strong>验证当前用户的身份</strong>，证明“你是你自己”（比如：你每天上下班打卡，都需要通过指纹打卡，当你的指纹和系统里录入的指纹相匹配时，就打卡成功）</li><li>互联网中的认证：<ul><li>用户名密码登录</li><li>邮箱发送登录链接</li><li>手机号接收验证码</li><li>只要你能收到邮箱/验证码，就默认你是账号的主人</li></ul></li></ul><h2 id="什么是授权（Authorization）"><a href="#什么是授权（Authorization）" class="headerlink" title="什么是授权（Authorization）"></a><strong>什么是授权（Authorization）</strong></h2><ul><li><strong>用户授予第三方应用访问该用户某些资源的权限</strong><ul><li>你在安装手机应用的时候，APP 会询问是否允许授予权限（访问相册、地理位置等权限）</li><li>你在访问微信小程序时，当登录时，小程序会询问是否允许授予权限（获取昵称、头像、地区、性别等个人信息）</li></ul></li><li>实现授权的方式有：cookie、session、token、OAuth</li></ul><h2 id="什么是凭证（Credentials）"><a href="#什么是凭证（Credentials）" class="headerlink" title="什么是凭证（Credentials）"></a><strong>什么是凭证（Credentials）</strong></h2><ul><li><strong>实现认证和授权的前提</strong>是需要一种<strong>媒介（证书）</strong> 来标记访问者的身份<ul><li>在战国时期，商鞅变法，发明了照身帖。照身帖由官府发放，是一块打磨光滑细密的竹板，上面刻有持有人的头像和籍贯信息。国人必须持有，如若没有就被认为是黑户，或者间谍之类的。</li><li>在现实生活中，每个人都会有一张专属的居民身份证，是用于证明持有人身份的一种法定证件。通过身份证，我们可以办理手机卡/银行卡/个人贷款/交通出行等等，这就是<strong>认证的凭证。</strong></li><li>在互联网应用中，一般网站（如掘金）会有两种模式，游客模式和登录模式。游客模式下，可以正常浏览网站上面的文章，一旦想要点赞/收藏/分享文章，就需要登录或者注册账号。当用户登录成功后，服务器会给该用户使用的浏览器颁发一个令牌（token），这个令牌用来表明你的身份，每次浏览器发送请求时会带上这个令牌，就可以使用游客模式下无法使用的功能。</li></ul></li></ul><h2 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie"></a><strong>什么是 Cookie</strong></h2><ul><li><strong>HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息</strong>）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。</li><li><strong>cookie 存储在客户端：</strong> cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</li><li><strong>cookie 是不可跨域的：</strong> 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，<strong>一级域名和二级域名之间是允许共享使用的</strong>（<strong>靠的是 domain）</strong>。</li></ul><p><strong>cookie 重要的属性</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636203528541-1c3db30d-13af-4315-b53f-83f61e37e621.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3f9a53b0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=778&amp;originWidth=720&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=381992&amp;status=done&amp;style=none&amp;taskId=u8528d1e9-8130-4b7c-907c-fe9303e2052&amp;title=" alt="image.png"><br><strong>什么是 Session</strong><br>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。<br>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。<br>服务器使用 session 把用户的信息临时保存在了服务器上，用户离开网站后 session 会被销毁。这种用户信息存储方式相对 cookie 来说更安全，可是 session 有一个缺陷：如果 web 服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候 session 会丢失。</p><ul><li><strong>session 是另一种记录服务器和客户端会话状态的机制</strong></li><li><strong>session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的 cookie 中</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636266871636-32ff07c1-9512-4217-b8eb-c80cbdcb3284.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u730605f2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=445&amp;originWidth=658&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=44443&amp;status=done&amp;style=none&amp;taskId=u5114d81c-0ae9-4016-b23b-da2bc83330c&amp;title=" alt="image.png"></p><ul><li><strong>session 认证流程：</strong><ul><li>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session</li><li>请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器</li><li>浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名</li><li>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</li></ul></li></ul><p>根据以上流程可知，<strong>SessionID 是连接 Cookie 和 Session 的一道桥梁</strong>，大部分系统也是根据此原理来验证用户登录状态。</p><h2 id="Cookie-和-Session-的区别"><a href="#Cookie-和-Session-的区别" class="headerlink" title="Cookie 和 Session 的区别"></a><strong>Cookie 和 Session 的区别</strong></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636267558541-76f7c85c-43d8-46a2-b41e-55105a2ca556.png#clientId=ucf45feb3-d4e5-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=302&amp;id=ube1e3bc2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=302&amp;originWidth=758&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=122173&amp;status=done&amp;style=none&amp;taskId=ube95a631-05c0-4bde-ae5d-5800f9517fc&amp;title=&amp;width=758" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636267581877-3aa73fe5-7993-4b2b-86c3-be1e8bc53d18.png#clientId=ucf45feb3-d4e5-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=836&amp;id=AZVE8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=731&amp;originWidth=576&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=148024&amp;status=done&amp;style=none&amp;taskId=ud516d9a0-0489-4e00-8289-ab2f0853075&amp;title=&amp;width=659" alt="image.png"></p><h2 id="基于-Token-的会话管理"><a href="#基于-Token-的会话管理" class="headerlink" title="基于 Token 的会话管理"></a><strong>基于 Token 的会话管理</strong></h2><p>鉴于基于 Session 的会话管理方式存在上述多个缺点，无状态的基于 Token 的会话管理方式诞生了，所谓无状态，就是服务端不再存储信息，甚至是不再存储 Session，逻辑如下。</p><ul><li>客户端使用用户名密码进行认证</li><li>服务端验证用户名密码，通过后生成 Token 返回给客户端</li><li>客户端保存 Token，访问需要认证的接口时在 URL 参数或 HTTP Header 中加入 Token</li><li>服务端通过解码 Token 进行鉴权，返回给客户端需要的数据</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636266884775-c69c6f58-686a-45bd-8e65-f8f8968cd70a.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u3c1a75d3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=445&amp;originWidth=658&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=43580&amp;status=done&amp;style=none&amp;taskId=u735102aa-f5dd-4650-9f08-c4476e7b236&amp;title=" alt="image.png"></p><p>基于 Token 的会话管理方式有效解决了基于 Session 的会话管理方式带来的问题。</p><ul><li>服务端不需要存储和用户鉴权有关的信息，鉴权信息会被加密到 Token 中，服务端只需要读取 Token 中包含的鉴权信息即可</li><li>避免了共享 Session 导致的不易扩展问题</li><li>不需要依赖 Cookie，有效避免 Cookie 带来的 CSRF 攻击问题</li><li>使用 CORS 可以快速解决跨域问题</li></ul><h3 id="Acesss-Token"><a href="#Acesss-Token" class="headerlink" title="Acesss Token"></a>Acesss Token</h3><ul><li><strong>访问资源接口（API）时所需要的资源凭证</strong></li><li><strong>简单 token 的组成：</strong> uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串）</li><li><strong>特点：</strong><ul><li><strong>服务端无状态化、可扩展性好</strong></li><li><strong>支持移动端设备</strong></li><li>安全</li><li>支持跨程序调用</li></ul></li><li><strong>token 的身份验证流程：</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636203528023-418502fb-82ca-4296-9e6b-798e711077cb.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u17f731f2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=298&amp;originWidth=640&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=85768&amp;status=done&amp;style=none&amp;taskId=u0a1de0f7-06de-488d-a76c-34c592b4891&amp;title=" alt="image.png"></p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据</li></ol><ul><li><strong>每一次请求都需要携带 token，需要把 token 放到 HTTP 的 Header 里</strong></li><li><strong>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库</strong></li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li></ul><h3 id="Refresh-Token"><a href="#Refresh-Token" class="headerlink" title="Refresh Token"></a><strong>Refresh Token</strong></h3><ul><li><p>另外一种 token——refresh token</p></li><li><p>refresh token 是专用于刷新 access token 的 token。如果没有 refresh token，也可以刷新 access token，但每次刷新都要用户输入登录用户名与密码，会很麻烦。有了 refresh token，可以减少这个麻烦，客户端直接用 refresh token 去更新 access token，无需用户进行额外的操作。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636203528287-59b137d1-4418-445e-9602-823fa7df0a5c.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ud6e0a91e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=428&amp;originWidth=640&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=141018&amp;status=done&amp;style=none&amp;taskId=u5081e060-3864-4570-a031-26d1f8442b7&amp;title=" alt="image.png"></p><ul><li>Access Token 的有效期比较短，当 Acesss Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Token，如果 Refresh Token 也失效了，用户就只能重新登录了。</li><li>Refresh Token 及过期时间是存储在服务器的数据库中，只有在申请新的 Acesss Token 时才会验证，不会对业务接口响应时间造成影响，也不需要向 Session 一样一直保持在内存中以应对大量的请求。</li></ul><h2 id="什么是-JWT"><a href="#什么是-JWT" class="headerlink" title="什么是 JWT"></a><strong>什么是 JWT</strong></h2><ul><li>JSON Web Token（简称 JWT）是目前最流行的<strong>跨域认证</strong>解决方案。</li><li>是一种<strong>认证授权机制</strong>。</li><li>JWT 是为了在网络应用环境间<strong>传递声明</strong>而执行的一种基于 JSON 的开放标准（RFC 7519）。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。</li><li>可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。</li><li><strong>阮一峰老师的 JSON Web Token 入门教程 讲的非常通俗易懂，这里就不再班门弄斧了</strong></li></ul><h3 id="生成-JWT"><a href="#生成-JWT" class="headerlink" title="生成 JWT"></a><strong>生成 JWT</strong></h3><ul><li><a href="https://link.zhihu.com/?target=https%3A//jwt.io/">https://jwt.io/</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.jsonwebtoken.io/">https://www.jsonwebtoken.io/</a></li></ul><h3 id="JWT-的原理"><a href="#JWT-的原理" class="headerlink" title="JWT 的原理"></a><strong>JWT 的原理</strong></h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636203527997-19ef787f-9e11-4ef4-836a-b04ee07f25d0.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u8ee65aca&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=421&amp;originWidth=640&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=69686&amp;status=done&amp;style=none&amp;taskId=uef45387e-bedf-4291-a2ed-bbf94970efc&amp;title=" alt="image.png"></p><ul><li><strong>JWT 认证流程：</strong><ul><li>用户输入用户名/密码登录，服务端认证成功后，会返回给客户端一个 JWT</li><li>客户端将 token 保存到本地（通常使用 localstorage，也可以使用 cookie）</li><li>当用户希望访问一个受保护的路由或者资源的时候，需要请求头的 Authorization 字段中使用 Bearer 模式添加 JWT，其内容看起来是下面这样</li></ul></li></ul><p>Authorization: Bearer <strong>&lt;</strong>token<strong>&gt;</strong></p><ul><li>服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为</li><li>因为 JWT 是自包含的（内部包含了一些会话信息），因此减少了需要查询数据库的需要</li><li>因为 JWT 并不使用 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</li><li>因为用户的状态不再存储在服务端的内存中，所以这是一种无状态的认证机制</li></ul><h3 id="JWT-的使用方式"><a href="#JWT-的使用方式" class="headerlink" title="JWT 的使用方式"></a><strong>JWT 的使用方式</strong></h3><ul><li>客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。</li></ul><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a><strong>方式一</strong></h3><ul><li>当用户希望访问一个受保护的路由或者资源的时候，可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求头信息的 Authorization 字段里，使用 Bearer 模式添加 JWT。</li></ul><p>GET <strong>/</strong>calendar<strong>/</strong>v1<strong>/</strong>events Host: api<strong>.</strong>example<strong>.</strong>com Authorization: Bearer <strong>&lt;</strong>token<strong>&gt;</strong></p><ul><li>用户的状态不会存储在服务端的内存中，这是一种 <strong>无状态的认证机制</strong><ul><li>服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为。</li><li>由于 JWT 是自包含的，因此减少了需要查询数据库的需要</li><li>JWT 的这些特性使得我们可以完全依赖其无状态的特性提供数据 API 服务，甚至是创建一个下载流服务。</li><li>因为 JWT 并不使用 Cookie ，所以你可以使用任何域名提供你的 API 服务而<strong>不需要担心跨域资源共享问题</strong>（CORS）</li></ul></li></ul><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a><strong>方式二</strong></h3><ul><li>跨域的时候，可以把 JWT 放在 POST 请求的数据体里。</li></ul><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a><strong>方式三</strong></h3><ul><li>通过 URL 传输</li></ul><p>http:<strong>//</strong>www<strong>.</strong>example<strong>.</strong>com<strong>/</strong>user<strong>?</strong>token<strong>=</strong>xxx</p><h3 id="项目中使用-JWT"><a href="#项目中使用-JWT" class="headerlink" title="项目中使用 JWT"></a><strong>项目中使用 JWT</strong></h3><p>项目地址：</p><h2 id="基于-JWT-的实践"><a href="#基于-JWT-的实践" class="headerlink" title="基于 JWT 的实践"></a>基于 JWT 的实践</h2><p>既然 JWT 依然存在诸多问题，甚至无法满足一些业务上的需求，但是我们依然可以基于 JWT 在实践中进行一些改进，来形成一个折中的方案。<br>前面讲的 Token，都是 Access Token，也就是访问资源接口时所需要的 Token，还有另外一种 Token，Refresh Token，通常情况下，Refresh Token 的有效期会比较长，而 Access Token 的有效期比较短，当 Access Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Access Token，如果 Refresh Token 也失效了，用户就只能重新登录了。<br>在 JWT 的实践中，引入 Refresh Token，将会话管理流程改进如下。</p><ul><li>客户端使用用户名密码进行认证</li><li>服务端生成有效时间较短的 Access Token（例如 10 分钟），和有效时间较长的 Refresh Token（例如 7 天）</li><li>客户端访问需要认证的接口时，携带 Access Token</li><li>如果 Access Token 没有过期，服务端鉴权后返回给客户端需要的数据</li><li>如果携带 Access Token 访问需要认证的接口时鉴权失败（例如返回 401 错误），则客户端使用 Refresh Token 向刷新接口申请新的 Access Token</li><li>如果 Refresh Token 没有过期，服务端向客户端下发新的 Access Token</li><li>客户端使用新的 Access Token 访问需要认证的接口</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636267293864-a33d4dc3-3842-485b-8e48-3e316ee26249.png#clientId=ucf45feb3-d4e5-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=P23Yr&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=692&amp;originWidth=661&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=87564&amp;status=done&amp;style=none&amp;taskId=ud244f957-c13e-438c-bcfc-0869a3bde01&amp;title=" alt="image.png"></p><p>将生成的 Refresh Token 以及过期时间存储在服务端的数据库中，由于 Refresh Token 不会在客户端请求业务接口时验证，只有在申请新的 Access Token 时才会验证，所以将 Refresh Token 存储在数据库中，不会对业务接口的响应时间造成影响，也不需要像 Session 一样一直保持在内存中以应对大量的请求。<br>上述的架构，提供了服务端禁用用户 Token 的方式，当用户需要登出或禁用用户时，只需要将服务端的 Refresh Token 禁用或删除，用户就会在 Access Token 过期后，由于无法获取到新的 Access Token 而再也无法访问需要认证的接口。这样的方式虽然会有一定的窗口期（取决于 Access Token 的失效时间），但是结合用户登出时客户端删除 Access Token 的操作，基本上可以适应常规情况下对用户认证鉴权的精度要求。</p><h2 id="常见的前后端鉴权方式"><a href="#常见的前后端鉴权方式" class="headerlink" title="常见的前后端鉴权方式"></a><strong>常见的前后端鉴权方式</strong></h2><ol><li>Session-Cookie</li><li>Token 验证（包括 JWT，SSO）</li><li>OAuth2.0（开放授权）</li></ol><h2 id="常见的加密算法"><a href="#常见的加密算法" class="headerlink" title="常见的加密算法"></a><strong>常见的加密算法</strong></h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636203528714-ad7de2b2-e077-4489-a15d-1168ba40586f.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ucb2bb2ca&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=317&amp;originWidth=640&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=184484&amp;status=done&amp;style=none&amp;taskId=ud7f51684-2470-4957-8904-9f771ee7673&amp;title=" alt="image.png"></p><ul><li>哈希算法(Hash Algorithm)又称散列算法、散列函数、哈希函数，是一种从任何一种数据中创建小的数字“指纹”的方法。哈希算法将数据重新打乱混合，重新创建一个哈希值。</li><li>哈希算法主要用来保障数据真实性(即完整性)，即发信人将原始消息和哈希值一起发送，收信人通过相同的哈希函数来校验原始数据是否真实。</li><li>哈希算法通常有以下几个特点：<ul><li>2 的 128 次方为 340282366920938463463374607431768211456，也就是 10 的 39 次方级别</li><li>2 的 160 次方为 1.4615016373309029182036848327163e+48，也就是 10 的 48 次方级别</li><li>2 的 256 次方为 1.1579208923731619542357098500869 × 10 的 77 次方，也就是 10 的 77 次方</li><li>正像快速：原始数据可以快速计算出哈希值</li><li>逆向困难：通过哈希值基本不可能推导出原始数据</li><li>输入敏感：原始数据只要有一点变动，得到的哈希值差别很大</li><li>冲突避免：很难找到不同的原始数据得到相同的哈希值，宇宙中原子数大约在 10 的 60 次方到 80 次方之间，所以 2 的 256 次方有足够的空间容纳所有的可能，算法好的情况下冲突碰撞的概率很低：</li></ul></li></ul><p><strong>注意：</strong></p><ol><li>以上不能保证数据被恶意篡改，原始数据和哈希值都可能被恶意篡改，要保证不被篡改，可以使用 RSA 公钥私钥方案，再配合哈希值。</li><li>哈希算法主要用来防止计算机传输过程中的错误，早期计算机通过前 7 位数据第 8 位奇偶校验码来保障（12.5% 的浪费效率低），对于一段数据或文件，通过哈希算法生成 128bit 或者 256bit 的哈希值，如果校验有问题就要求重传。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><h3 id="使用-cookie-时需要考虑的问题"><a href="#使用-cookie-时需要考虑的问题" class="headerlink" title="使用 cookie 时需要考虑的问题"></a><strong>使用 cookie 时需要考虑的问题</strong></h3><ul><li>因为存储在客户端，容易被客户端篡改，使用前需要验证合法性</li><li>不要存储敏感数据，比如用户密码，账户余额</li><li>使用 httpOnly 在一定程度上提高安全性</li><li>尽量减少 cookie 的体积，能存储的数据量不能超过 4kb</li><li>设置正确的 domain 和 path，减少数据传输</li><li><strong>cookie 无法跨域</strong></li><li>一个浏览器针对一个网站最多存 20 个 Cookie，浏览器一般只允许存放 300 个 Cookie</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h3 id="使用-session-时需要考虑的问题"><a href="#使用-session-时需要考虑的问题" class="headerlink" title="使用 session 时需要考虑的问题"></a><strong>使用 session 时需要考虑的问题</strong></h3><ul><li>将 session 存储在服务器里面，当用户同时在线量比较多时，这些 session 会占据较多的内存，需要在服务端定期的去清理过期的 session</li><li>当网站采用<strong>集群部署</strong>的时候，会遇到多台 web 服务器之间如何做 session 共享的问题。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建 session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。</li><li>当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好 cookie 跨域的处理。</li><li><strong>sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？</strong> 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h3 id="使用-token-时需要考虑的问题"><a href="#使用-token-时需要考虑的问题" class="headerlink" title="使用 token 时需要考虑的问题"></a><strong>使用 token 时需要考虑的问题</strong></h3><ul><li>如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。</li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li><li><strong>token 可以避免 CSRF 攻击(因为不需要 cookie 了)</strong></li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h3 id="使用-JWT-时需要考虑的问题"><a href="#使用-JWT-时需要考虑的问题" class="headerlink" title="使用 JWT 时需要考虑的问题"></a><strong>使用 JWT 时需要考虑的问题</strong></h3><ul><li>因为 JWT 并不依赖 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</li><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 最大的优势是服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展。但这也是 JWT 最大的缺点：由于服务器不需要存储 Session 状态，因此使用过程中无法废弃某个 Token 或者更改 Token 的权限。也就是说一旦 JWT 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>JWT 适合一次性的命令认证，颁发一个有效期极短的 JWT，即使暴露了危险也很小，由于每次操作都会生成新的 JWT，因此也没必要保存 JWT，真正实现无状态。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ul><h3 id="使用加密算法时需要考虑的问题"><a href="#使用加密算法时需要考虑的问题" class="headerlink" title="使用加密算法时需要考虑的问题"></a><strong>使用加密算法时需要考虑的问题</strong></h3><ul><li>绝不要以<strong>明文存储</strong>密码</li><li><strong>永远使用 哈希算法 来处理密码，绝不要使用 Base64 或其他编码方式来存储密码，这和以明文存储密码是一样的，使用哈希，而不要使用编码</strong>。编码以及加密，都是双向的过程，而密码是保密的，应该只被它的所有者知道， 这个过程必须是单向的。哈希正是用于做这个的，从来没有解哈希这种说法， 但是编码就存在解码，加密就存在解密。</li><li>绝不要使用弱哈希或已被破解的哈希算法，像 MD5 或 SHA1 ，只使用强密码哈希算法。</li><li>绝不要以明文形式显示或发送密码，即使是对密码的所有者也应该这样。如果你需要 “忘记密码” 的功能，可以随机生成一个新的 <strong>一次性的</strong>（这点很重要）密码，然后把这个密码发送给用户。</li></ul><h3 id="分布式架构下-session-共享方案"><a href="#分布式架构下-session-共享方案" class="headerlink" title="分布式架构下 session 共享方案"></a><strong>分布式架构下 session 共享方案</strong></h3><h3 id="1-session-复制"><a href="#1-session-复制" class="headerlink" title="1. session 复制"></a><strong>1. session 复制</strong></h3><ul><li>任何一个服务器上的 session 发生改变（增删改），该节点会把这个 session 的所有内容序列化，然后广播给所有其它节点，不管其他服务器需不需要 session ，以此来保证 session 同步</li></ul><p><strong>优点：</strong> 可容错，各个服务器间 session 能够实时响应。<br><strong>缺点：</strong> 会对网络负荷造成一定压力，如果 session 量大的话可能会造成网络堵塞，拖慢服务器性能。</p><h3 id="2-粘性-session-IP-绑定策略"><a href="#2-粘性-session-IP-绑定策略" class="headerlink" title="2. 粘性 session /IP 绑定策略"></a><strong>2. 粘性 session /IP 绑定策略</strong></h3><ul><li><strong>采用 Ngnix 中的 ip_hash 机制，将某个 ip 的所有请求都定向到同一台服务器上，即将用户与服务器绑定。</strong> 用户第一次请求时，负载均衡器将用户的请求转发到了 A 服务器上，如果负载均衡器设置了粘性 session 的话，那么用户以后的每次请求都会转发到 A 服务器上，相当于把用户和 A 服务器粘到了一块，这就是粘性 session 机制。</li></ul><p><strong>优点：</strong> 简单，不需要对 session 做任何处理。<br><strong>缺点：</strong> 缺乏容错性，如果当前访问的服务器发生故障，用户被转移到第二个服务器上时，他的 session 信息都将失效。<br><strong>适用场景：</strong> 发生故障对客户产生的影响较小；服务器发生故障是低概率事件 。<br><strong>实现方式：</strong> 以 Nginx 为例，在 upstream 模块配置 ip_hash 属性即可实现粘性 session。</p><h3 id="3-session-共享（常用）"><a href="#3-session-共享（常用）" class="headerlink" title="3. session 共享（常用）"></a><strong>3. session 共享（常用）</strong></h3><ul><li>使用分布式缓存方案比如 Memcached 、Redis 来缓存 session，但是要求 Memcached 或 Redis 必须是集群</li><li>把 session 放到 Redis 中存储，虽然架构上变得复杂，并且需要多访问一次 Redis ，但是这种方案带来的好处也是很大的：<ul><li>实现了 session 共享；</li><li>可以水平扩展（增加 Redis 服务器）；</li><li>服务器重启 session 不丢失（不过也要注意 session 在 Redis 中的刷新/失效机制）；</li><li>不仅可以跨服务器 session 共享，甚至可以跨平台（例如网页端和 APP 端）</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/1164521/1636203528791-578e0240-7ac0-417a-b19b-5eec75aafcf1.png#clientId=uea55fcf4-aa5c-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u308b87dc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=376&amp;originWidth=720&amp;originalType=url%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=113055&amp;status=done&amp;style=none&amp;taskId=ucddafb2f-e28d-46a3-ba04-8b9d7aa8fb7&amp;title=" alt="image.png"></p><h3 id="4-session-持久化"><a href="#4-session-持久化" class="headerlink" title="4. session 持久化"></a><strong>4. session 持久化</strong></h3><ul><li>将 session 存储到数据库中，保证 session 的持久化</li></ul><p><strong>优点：</strong> 服务器出现问题，session 不会丢失<br><strong>缺点：</strong> 如果网站的访问量很大，把 session 存储到数据库中，会对数据库造成很大压力，还需要增加额外的开销维护数据库。</p><h3 id="只要关闭浏览器-，session-真的就消失了？"><a href="#只要关闭浏览器-，session-真的就消失了？" class="headerlink" title="只要关闭浏览器 ，session 真的就消失了？"></a><strong>只要关闭浏览器 ，session 真的就消失了？</strong></h3><p>不对。对 session 来说，除非程序通知服务器删除一个 session，否则服务器会一直保留，程序一般都是在用户做 log off 的时候发个指令去删除 session。<br>然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭，之所以会有这种错觉，是大部分 session 机制都使用会话 cookie 来保存 session id，而关闭浏览器后这个 session id 就消失了，再次连接服务器时也就无法找到原来的 session。如果服务器设置的 cookie 被保存在硬盘上，或者使用某种手段改写浏览器发出的 HTTP 请求头，把原来的 session id 发送给服务器，则再次打开浏览器仍然能够打开原来的 session。<br>恰恰是<strong>由于关闭浏览器不会导致 session 被删除，迫使服务器为 session 设置了一个失效时间，当距离客户端上一次使用 session 的时间超过这个失效时间时，服务器就认为客户端已经停止了活动，才会把 session 删除以节省存储空间。</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+travis+语雀 自动部署博客</title>
      <link href="/2022/05/12/yuque/hexo-travis-yu-que-zi-dong-bu-shu-bo-ke/"/>
      <url>/2022/05/12/yuque/hexo-travis-yu-que-zi-dong-bu-shu-bo-ke/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>修改自：<a href="https://www.yuque.com/u46795/blog/dlloc7">https://www.yuque.com/u46795/blog/dlloc7</a><br>yuque-hexo:<a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a></p><h3 id="一、Hexo-Github-的痛点"><a href="#一、Hexo-Github-的痛点" class="headerlink" title="一、Hexo+Github 的痛点"></a>一、Hexo+Github 的痛点</h3><h4 id="1-为啥要用-hexo-github？"><a href="#1-为啥要用-hexo-github？" class="headerlink" title="1.为啥要用 hexo+github？"></a>1.为啥要用 hexo+github？</h4><p>作为一个程序猿，博客肯定是必须要有的拉，github 也是必须要混的拉~所以:</p><ul><li>hexo + github = 高大上</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/155457/1546857679810-d82e3d46-e960-419c-a715-0a82c48a2fd6.jpeg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=225&amp;id=IUgNo&amp;name=image.jpeg&amp;originHeight=225&amp;originWidth=225&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=6267&amp;status=done&amp;style=none&amp;title=&amp;width=225" alt="image.jpeg"></p><h4 id="2-蛋疼的写作体验"><a href="#2-蛋疼的写作体验" class="headerlink" title="2.蛋疼的写作体验"></a>2.蛋疼的写作体验</h4><p>使用 hexo，会面临如下问题：</p><ul><li>博客源码怎么管理？</li><li>图片存在哪？</li><li>如何编写 markdown 文件？</li></ul><p>相信很多人都在使用本地编辑器来写博客，那体验，真心蛋疼，比如说 vscode，可视化插件一般般，图片还不能复制黏贴，想插入个图片还要先保存成文件放在本地，然后再引用，啥？你说七牛云存储？哪有复制黏贴爽呀~<br>当然，博客源码可以使用 travis-ci 来做持续集成，想写博客或者换个电脑，clone 一下源仓库，写完 push 一下，就可以不用管了。but，比起独立站点的博客，如 wordpress，还是觉得写作体验有点不爽。<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/155457/1546858156666-f3f7ae20-c7f8-49b9-849d-b4364f3685f7.jpeg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=213&amp;id=aXrQY&amp;name=image.jpeg&amp;originHeight=213&amp;originWidth=237&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=5810&amp;status=done&amp;style=none&amp;title=&amp;width=237" alt="image.jpeg"></p><h4 id="3-脑洞大开："><a href="#3-脑洞大开：" class="headerlink" title="3. 脑洞大开："></a>3. 脑洞大开：</h4><p>偶然间，朋友安利了语雀这个文档写作平台，觉得这就是完美的写作体验，各种 UI 和编辑器都很舒服~秀个图：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546858295510-9ca72eb5-b3ae-4d7c-8478-d8d1cda959d0.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=821&amp;id=tVeye&amp;name=image.png&amp;originHeight=903&amp;originWidth=1789&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=119669&amp;status=done&amp;style=none&amp;title=&amp;width=1626" alt="image.png"></p><p>markdown 编辑器也是巨爽：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546858354478-127bd82a-7958-40ce-b760-07e469bd55ba.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=840&amp;id=cGRvZ&amp;name=image.png&amp;originHeight=924&amp;originWidth=1890&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=125288&amp;status=done&amp;style=none&amp;title=&amp;width=1718" alt="image.png"></p><p>于是乎，就在想能不能在语雀里写作，写完之后自动同步到 Github 的博客呢？年轻就要有激情，说干就干，花了一天时间，结合了 severless、yuque-hexo、travis-ci 之后，终于跑通了整个写作、发布、自动部署的流程~<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/155457/1546858544992-c921de6f-b08a-469a-bd5f-81996309443b.jpeg#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=225&amp;id=PVGCa&amp;name=image.jpeg&amp;originHeight=225&amp;originWidth=225&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=10511&amp;status=done&amp;style=none&amp;title=&amp;width=225" alt="image.jpeg"></p><h3 id="二、具体方案"><a href="#二、具体方案" class="headerlink" title="二、具体方案"></a>二、具体方案</h3><p>整体流程：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546854780929-79a8a0f2-1678-4e16-bf23-52bbc364a5eb.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=262&amp;id=z1LNs&amp;name=%E5%B7%A5%E4%BD%9C%E6%B5%81.png&amp;originHeight=446&amp;originWidth=1268&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=21932&amp;status=done&amp;style=none&amp;title=&amp;width=746" alt="工作流.png"></p><ul><li>语雀发布一篇文章</li><li>webhook 调用 serverless 函数</li><li>serverless 发起请求 trigger 一个 build 任务</li><li>travis-ci 同步语雀文章并构建 hexo</li><li>github 生成静态页面展示</li></ul><h4 id="1-hexo-github-triavs-ci"><a href="#1-hexo-github-triavs-ci" class="headerlink" title="1. hexo+github+triavs-ci"></a>1. hexo+github+triavs-ci</h4><p>hexo 如何部署，如何集成 travis-ci，等等，我就不再讲了，网上类似的文章灰常多~<br>比如：</p><ul><li><a href="https://segmentfault.com/a/1190000013266001">使用 Hexo+Github+TravisCI 搭建自动发布的静态博客系统</a></li><li><a href="https://segmentfault.com/a/1190000016487753">GitHub pages + Hexo 搭建自己的个人博客</a></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546856496741-e2bcacb7-133f-411f-8696-68e29c280dfc.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=225&amp;id=hc0wH&amp;name=image.png&amp;originHeight=225&amp;originWidth=225&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=3779&amp;status=done&amp;style=none&amp;title=&amp;width=225" alt="image.png"><br>附上 travis 的配置文件。travis.yml</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">- v12<span class="number">.18</span><span class="number">.1</span></span><br><span class="line">before_install:</span><br><span class="line">- cp id_rsa  ~/.ssh/id_rsa</span><br><span class="line">- chmod <span class="number">600</span> ~/.ssh/id_rsa</span><br><span class="line">- eval $(ssh-agent)</span><br><span class="line">- ssh-add ~/.ssh/id_rsa</span><br><span class="line">- cp .travis/ssh_config ~/.ssh/config</span><br><span class="line">- git config --global user.name <span class="string">"DongZhouGu"</span></span><br><span class="line">- git config --global user.email gdz678@<span class="number">163.</span>com</span><br><span class="line">install:</span><br><span class="line">- npm install</span><br><span class="line">- npm audit fix</span><br><span class="line">script:</span><br><span class="line">- npm run deploy</span><br><span class="line">- git remote rm origin</span><br><span class="line">- git remote add origin git<span class="meta">@github</span>.com:DongZhouGu/Blog-backup.git</span><br><span class="line">- git add  scaffolds scripts source my_themes themes _config.yml <span class="keyword">package</span>.json run.bash .travis id_rsa .travis.yml</span><br><span class="line">- git commit  -m  <span class="string">"travis"</span></span><br><span class="line">- git push origin HEAD:master</span><br></pre></td></tr></tbody></table></figure><p>那么如何同步语雀的文章呢？答案就是：</p><h5 id="yuque-hexo"><a href="#yuque-hexo" class="headerlink" title="yuque-hexo"></a>yuque-hexo</h5><p>这是一个开源库：<a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a><br>用法也很简单：</p><ol><li>修改 package.json，增加配置:</li></ol><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"yuqueConfig"</span>: {</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"https://www.yuque.com/api/v2"</span>,</span><br><span class="line">  <span class="attr">"login"</span>: <span class="string">"u46795"</span>,</span><br><span class="line">  <span class="attr">"repo"</span>: <span class="string">"blog"</span>,<span class="comment">//不是仓库名而是一串随机字符注意</span></span><br><span class="line">  <span class="attr">"mdNameFormat"</span>: <span class="string">"title"</span>,</span><br><span class="line">  <span class="attr">"postPath"</span>: <span class="string">"source/_posts/yuque"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>2）增加命令：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">  <span class="attr">"sync"</span>: <span class="string">"yuque-hexo sync"</span>,</span><br><span class="line">  <span class="attr">"clean:yuque"</span>: <span class="string">"yuque-hexo clean"</span>,</span><br><span class="line">  <span class="attr">"deploy"</span>: <span class="string">"npm run sync &amp;&amp; hexo clean &amp;&amp; hexo g -d"</span>,</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>附上我的<a href="https://github.com/Ghostdar/blog-origin/blob/master/package.json">package.json</a>文件。</p><h4 id="2-serverless"><a href="#2-serverless" class="headerlink" title="2. serverless"></a>2. serverless</h4><p>目前阿里云和腾讯云都有 serverless 服务，免费的额度完全够用了，下面介绍一下如何配置：</p><h5 id="1）创建函数"><a href="#1）创建函数" class="headerlink" title="1）创建函数"></a>1）创建函数</h5><p><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546855514908-08a6c588-774a-404e-8425-89ce6a3f7167.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=697&amp;id=OBnqI&amp;name=image.png&amp;originHeight=767&amp;originWidth=1408&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=90789&amp;status=done&amp;style=none&amp;title=&amp;width=1280" alt="image.png"></p><h5 id="2）serverless-函数示例"><a href="#2）serverless-函数示例" class="headerlink" title="2）serverless 函数示例:"></a>2）serverless 函数示例:</h5><figure class="highlight php"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main_handler</span>(<span class="params"><span class="variable">$event</span>, <span class="variable">$context</span></span>) </span>{</span><br><span class="line">    <span class="comment">// 解析语雀post的数据</span></span><br><span class="line">    <span class="variable">$update_title</span> = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$event</span>-&gt;body){</span><br><span class="line">        <span class="variable">$yuque_data</span>= json_decode(<span class="variable">$event</span>-&gt;body);</span><br><span class="line">        <span class="variable">$update_title</span> .= <span class="variable">$yuque_data</span>-&gt;data-&gt;title;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// default params</span></span><br><span class="line">    <span class="variable">$repos</span> = <span class="string">'github/账户名%2F仓库名'</span>;  <span class="comment">// 你的仓库id 或 slug</span></span><br><span class="line">    <span class="variable">$token</span> = <span class="string">'xxxxx'</span>; <span class="comment">// 你的登录token</span></span><br><span class="line">    <span class="variable">$message</span> = date(<span class="string">"Y/m/d"</span>).<span class="string">':yuque update:'</span>.<span class="variable">$update_title</span>;</span><br><span class="line">    <span class="variable">$branch</span> = <span class="string">'master'</span>;</span><br><span class="line">    <span class="comment">// post params</span></span><br><span class="line">    <span class="variable">$queryString</span> = <span class="variable">$event</span>-&gt;queryString;</span><br><span class="line">    <span class="variable">$q_token</span> = <span class="variable">$queryString</span>-&gt;token ? <span class="variable">$queryString</span>-&gt;token : <span class="variable">$token</span>;</span><br><span class="line">    <span class="variable">$q_repos</span> = <span class="variable">$queryString</span>-&gt;repos ? <span class="variable">$queryString</span>-&gt;repos : <span class="variable">$repos</span>;</span><br><span class="line">    <span class="variable">$q_message</span> = <span class="variable">$queryString</span>-&gt;message ? <span class="variable">$queryString</span>-&gt;message : <span class="variable">$message</span>;</span><br><span class="line">    <span class="variable">$q_branch</span> = <span class="variable">$queryString</span>-&gt;branch ? <span class="variable">$queryString</span>-&gt;branch : <span class="string">'master'</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$q_token</span>);</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">'==='</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_repos</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'==='</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_message</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'==='</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="variable">$q_branch</span>);</span><br><span class="line">    <span class="keyword">echo</span> (<span class="string">'==='</span>);</span><br><span class="line">    <span class="comment">//request travis ci</span></span><br><span class="line">    <span class="variable">$res_info</span> = triggerTravisCI(<span class="variable">$q_repos</span>, <span class="variable">$q_token</span>, <span class="variable">$q_message</span>, <span class="variable">$q_branch</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$res_code</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable">$res_message</span> = <span class="string">'未知'</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res_info</span>[<span class="string">'http_code'</span>]){</span><br><span class="line">        <span class="variable">$res_code</span> = <span class="variable">$res_info</span>[<span class="string">'http_code'</span>];</span><br><span class="line">        <span class="keyword">switch</span>(<span class="variable">$res_info</span>[<span class="string">'http_code'</span>]){</span><br><span class="line">            <span class="keyword">case</span> <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">202</span>:</span><br><span class="line">                <span class="variable">$res_message</span> = <span class="string">'success'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="variable">$res_message</span> = <span class="string">'faild'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="variable">$res</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'status'</span>=&gt;<span class="variable">$res_code</span>,</span><br><span class="line">        <span class="string">'message'</span>=&gt;<span class="variable">$res_message</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span>  travis api , trigger a build</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $repos string 仓库ID、slug</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $token string 登录验证token</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $message string 触发信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> $branch string 分支</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> $info array 回包信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">triggerTravisCI</span> (<span class="params"><span class="variable">$repos</span>, <span class="variable">$token</span>, <span class="variable">$message</span>=<span class="string">'yuque update'</span>, <span class="variable">$branch</span>=<span class="string">'master'</span></span>) </span>{</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="variable">$curl</span> = curl_init();</span><br><span class="line">    <span class="comment">//设置抓取的url</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_URL, <span class="string">'https://api.travis-ci.com/repo/'</span>.<span class="variable">$repos</span>.<span class="string">'/requests'</span>);</span><br><span class="line">    <span class="comment">//设置获取的信息以文件流的形式返回，而不是直接输出。</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//设置post方式提交</span></span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_CUSTOMREQUEST, <span class="string">"POST"</span>);</span><br><span class="line">    <span class="comment">//设置post数据</span></span><br><span class="line">    <span class="variable">$post_data</span> = json_encode(<span class="keyword">array</span>(</span><br><span class="line">        <span class="string">"request"</span>=&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">"message"</span>=&gt;<span class="variable">$message</span>,</span><br><span class="line">            <span class="string">"branch"</span>=&gt;<span class="variable">$branch</span></span><br><span class="line">        )</span><br><span class="line">    ));</span><br><span class="line">    <span class="variable">$header</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">'Content-Type: application/json'</span>,</span><br><span class="line">      <span class="string">'Travis-API-Version: 3'</span>,</span><br><span class="line">      <span class="string">'Authorization:token '</span>.<span class="variable">$token</span>,</span><br><span class="line">      <span class="string">'Content-Length:'</span> . strlen(<span class="variable">$post_data</span>)</span><br><span class="line">    );</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="variable">$header</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="variable">$post_data</span>);</span><br><span class="line">    <span class="comment">//执行命令</span></span><br><span class="line">    <span class="variable">$data</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="variable">$info</span> = curl_getinfo(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="comment">//关闭URL请求</span></span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$info</span>;</span><br><span class="line">}</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里有几个需要获取的参数：</p><ul><li>travis 登录 token，在 travis-ci.org 中设置界面获取：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546854976464-f57b5676-57a6-45d6-a15f-a6ea73b5ea03.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=719&amp;id=FUF95&amp;name=image.png&amp;originHeight=791&amp;originWidth=1086&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=76663&amp;status=done&amp;style=none&amp;title=&amp;width=987" alt="image.png"></p><ul><li>仓库 ID 或 扩展名，</li></ul><p>使用 findder 抓包获得</p><h5 id="3）-配置触发方式"><a href="#3）-配置触发方式" class="headerlink" title="3） 配置触发方式"></a>3） 配置触发方式</h5><p><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546855590231-653629dc-6c95-4c63-838a-cf17157c3174.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=670&amp;id=CCYa7&amp;name=image.png&amp;originHeight=737&amp;originWidth=1446&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=64764&amp;status=done&amp;style=none&amp;title=&amp;width=1315" alt="image.png"></p><p>一般会得到这么个 api：<br><a href="https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx">https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx</a></p><h4 id="3-语雀配置"><a href="#3-语雀配置" class="headerlink" title="3. 语雀配置"></a>3. 语雀配置</h4><p>配置一个仓库的 webhook:<br><img src="https://cdn.nlark.com/yuque/0/2019/png/155457/1546855687662-f145f491-ef19-45f6-b30e-d422f693e29e.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;height=525&amp;id=XITjC&amp;name=image.png&amp;originHeight=578&amp;originWidth=1495&amp;originalType=binary%E2%88%B6=1&amp;rotation=0&amp;showTitle=false&amp;size=59624&amp;status=done&amp;style=none&amp;title=&amp;width=1359" alt="image.png"></p><p>可以选择所有更新触发或者主动触发，主动触发的意思即发布需要勾选一个选项才会触发 webhook。具体可参见语雀文档：<a href="https://www.yuque.com/yuque/developer/doc-webhook">https://www.yuque.com/yuque/developer/doc-webhook</a>；<br>将 serverless 生成的 api 填入,可以在链接后面带参数：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">token 登录token</span><br><span class="line">repos 仓库id</span><br><span class="line">message 提交信息</span><br><span class="line">branch 分支</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">https://service-s08f6nvk-1251833201.ap-guangzhou.apigateway.myqcloud.com/release/xxx?repos=xxx&amp;token=xxx&amp;message=xxx&amp;branch=xxx</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如果不在链接带参数则写在 serverless 函数内。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抢学术章的的辛酸泪</title>
      <link href="/2021/10/13/qiang-xue-zhu-zhang-de-xin-suan-lei/"/>
      <url>/2021/10/13/qiang-xue-zhu-zhang-de-xin-suan-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>2021-10-10更新，增加对人工认证的处理，重构代码</li></ul><p>由于问卷星更新了，里面加了阿里云智能验证的接口，所以之前的方法使用 selnium 不行了。</p><p>前端通过简单的判断就可以知道是不是 webdriver，解决的办法可以使用中间代理过滤掉 webdrvier 中的指纹信息，太过繁琐且不太好移植</p><p><strong><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> 因此使用puppeteer的V2.0来了！</strong></p><p>项目地址： <a href="https://github.com/DongZhouGu/wjx-academic">https://github.com/DongZhouGu/wjx-academic</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="新建python工程"><a href="#新建python工程" class="headerlink" title="新建python工程"></a>新建python工程</h3><p>建议使用 IDE Pycharm ， 工程目录如下</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201130161359.png" alt="image-20201130155501104"></p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Python 3.5+</li><li>time</li><li>pyyaml</li><li>pypuppter(<a href="https://github.com/miyakogi/pyppeteer">https://github.com/miyakogi/pyppeteer</a>)</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install pyppeteer -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure><p>也可以直接在 Pycharm 中安装此包</p><p>安装包完成后，接着，修改下图所示的</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201130161357.png" alt="image-20201130160506924"></p><p>的  <code>pyppeteer/_init_.py</code> 的文件，修改第14行代码为 </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__chromium_revision__ = '818858'</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201130161355.png" alt="image-20201130160601402"></p><p>😥 我就是因为这里的坑停滞了许久许久……………………,因为低版本的不支持Input.insertText 这个函数，没有这个函数 所有的中文字段都不能输入。</p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>第一次运行，会下载chromium，如果慢的话百度 <code>pyppeteer下载chromium慢</code></p><p>也可以下载我下载好的 放在下面的路径，<code>local-chromium</code> 文件夹没有的话请自己新建</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201130180242.png" alt="image-20201130175842517"></p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1SAkLTAnOjwo1Eg9_oIJ6fQ">https://pan.baidu.com/s/1SAkLTAnOjwo1Eg9_oIJ6fQ</a><br>提取码：s64h<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>其他的设置和之前一样，在 <code>setting_config_yaml</code> 里设置，同样需要抓包软件，之前的chromdriver不需要了</p><p>详情见 <code>setting_config_yaml</code>中的解释</p><h2 id="附：Fiddler抓包软件"><a href="#附：Fiddler抓包软件" class="headerlink" title="附：Fiddler抓包软件"></a>附：Fiddler抓包软件</h2><p><a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler</a> 官网下载，也可以去垃圾网站下载快点<a href="http://www.downza.cn/soft/234727.html">http://www.downza.cn/soft/234727.html</a></p><p>下载完成一路安装完成，第一次打开 需要设置一下，以后就不用了</p><p>在Tools-Options里按如下勾选</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201111214924296.png" alt="image-20201111214924296"></p><p>设置完成，下面看一下怎么抓取授权</p><h3 id="抓取授权信息"><a href="#抓取授权信息" class="headerlink" title="抓取授权信息"></a>抓取授权信息</h3><p>首先在电脑微信上打开 抓取授权用的连链接（不要填写该问卷，否则失效），如下，先不要点击“一键登录”</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201111215813440.png" alt="image-20201111215137304"></p><p>先在Fidder软件内使用<code>Ctrl+X</code>快捷键清空页面，再在微信点击“<code>一键登录</code>”</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201111215137304.png" alt="image-20201111215720738"></p><p>在Fiddler中找到如下open.weixin.qq.com的这条记录，一般选择在<a href="http://www.wjx.cn下面这条">www.wjx.cn下面这条</a></p><p>在右边的Inspectors窗口内就有我们要的授权</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201111215720738.png" alt="image-20201111215813440"></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201111215950139.png" alt="image-20201111215950139"></p><p>复制好授权信息，替换<code>setting_config.yaml</code>中的url即可，其他设置见<code>setting_config.yaml</code>中的注释</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注意力机制-Attention</title>
      <link href="/2021/01/14/zhu-yi-li-ji-zhi/"/>
      <url>/2021/01/14/zhu-yi-li-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="注意力机制-Attention"><a href="#注意力机制-Attention" class="headerlink" title="注意力机制-Attention"></a>注意力机制-Attention</h1><p>今天从四个方面来介绍注意力机制。首先是我们为什么要引入注意力机制，深度学习对于特征提取近年来取得了巨大的成功，但是他还有什么不足呢? 其次，我将从Encoder-Decoder框架（一种深度学习领域的研究模式，应用场景异常广泛）来介绍注意力机制；接着，总结一下目前注意力机制研究的的分类与应用；最后，切入到计算机视觉CV领域来介绍注意力机制。</p><h2 id="为什么要引入注意力机制？"><a href="#为什么要引入注意力机制？" class="headerlink" title="为什么要引入注意力机制？"></a>为什么要引入注意力机制？</h2><p>我们知道深度学习近年来在计算机视觉，自然语言处理等领域取得了巨大的成功，使用多层的深度神经网络逐层进行特征提取，获取更加高级的语义特征。但这样，伴随着两个缺陷</p><p>• <strong>计算能力的限制：</strong>当要记住很多“信息“，模型就要变得更复杂，然而目前计算能力依然是限制神经网络发展的瓶颈</p><p>• <strong>优化算法的限制：</strong>虽然局部连接、权重共享以及pooling等优化操作可以让神经网络变得简单一些，有效缓解模型复杂度和表达能力之间的矛盾；但是，如循环神经网络中的长距离以来问题，信息“记忆”能力并不高。卷积神经网络中，虽然能通过堆叠卷积层来获得更大的感受野，但不断地池化也会丢失长距离依赖的语义信息。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112090446506.png" alt="image-20210112090446506"></p><p>因此，注意力机制的出现就是为了解决这些问题。上图是一个图片描述系统，描述中画横线的描述就是主要通过图片中的白色光斑圈出区域进行特征提取得到的语义信息。深度学习从关注<strong>输入的全部</strong>，变成关注输入中<strong>的重点部分</strong>，从众多信息中选择出<strong>对当前任务目标更关键的信息</strong>。</p><h2 id="无注意力机制的Encoder-Decoder框架"><a href="#无注意力机制的Encoder-Decoder框架" class="headerlink" title="无注意力机制的Encoder-Decoder框架"></a>无注意力机制的Encoder-Decoder框架</h2><p>下图就是一个文本处理领域的Encoder-Decoder框架，它能够应用在许多任务中，如机器翻译文本摘要、问答系统、语音识别和图像描述等。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112091944854.png" alt="image-20210112091944854"></p><p>拿机器翻译来说，框架的目标是给定输入句子Source，期待通过Encoder-Decoder框架来生成目标句子Target。</p><p>拿中英文翻译来说</p><ul><li><p>编码器Encoder对输入的中文句子进行编码，通过非线性变换转化为中间语义表示C</p></li><li><p>解码器Decoder，其任务是根据句子Source的中间语义表示C和之前已经生成的历史信息</p><p>来生成 i 时刻要生成的单词</p></li></ul><p>但这样的框架其实是没有体现出“注意力模型”地，因为在生成目标句子的单词时，不论生成哪个单词，它们使用的输入句子Source的语义编码C都是一样的，没有任何区别。这意味着不论是生成哪个单词，y1,y2还是y3，其实句子Source中任意单词对生成某个目标单词 yi 来说影响力都是相同的，这很明显是没有注意力焦点的。</p><h2 id="增加注意力机制的Encoder-Decoder框架"><a href="#增加注意力机制的Encoder-Decoder框架" class="headerlink" title="增加注意力机制的Encoder-Decoder框架"></a>增加注意力机制的Encoder-Decoder框架</h2><p>下图是增加注意力机制的Encoder-Decoder框架，Attention模型的关键就是这里，即由固定的中间语义表示C换成了根据当前输出单词来调整的变化的Ci。</p><p>对于英汉翻译，如果输入是Tom chase Jerry，那么在生成中文单词汤姆时，其对应的语义表示C1，则对应着不同的 源句单词 的注意力分配概率分布。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112094554302.png" alt="image-20210112094554302"></p><p><strong>那么问题就来了，</strong>在生成目标句子某个单词，比如“汤姆”的时候，如何知道Attention模型所需要的输入句子单词注意力分配概率分布值呢？就是说“汤姆”对应的输入句子Source中各个单词的概率分布：(Tom,0.6)(Chase,0.2) (Jerry,0.2) 是如何得到的呢？</p><h2 id="如何获得注意力分配的概率分布？"><a href="#如何获得注意力分配的概率分布？" class="headerlink" title="如何获得注意力分配的概率分布？"></a>如何获得注意力分配的概率分布？</h2><p>这里拿RNN举例，Encoder采用RNN模型，Decoder也采用RNN模型，如下图所示</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112101206485.png" alt="image-20210112101206485"></p><p>下图可以较为便捷地说明注意力分配概率分布值的通用计算过程</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112101705623.png" alt="image-20210112101705623"></p><p>对于采用RNN的Decoder来说，在时刻 i，如果要生成yi单词，我们是可以知道在生成Yi之前的时刻 i-1时，隐层节点i-1时刻的输出值Hi-1的，而我们的目的是要计算生成Yi时输入句子中的单词“Tom”、“Chase”、“Jerry”对Yi来说的注意力分配概率分布，那么可以用Target输出句子i-1时刻的隐层节点状态Hi-1去一一和输入句子Source中每个单词对应的RNN隐层节点状态hj进行对比，即通过一些相似度计算方法来获得目标单词yi和每个输入单词对应的对齐可能性，然后函数F的输出经过 Softmax 进行归一化就得到了注意力的权重系数</p><h2 id="注意力机制的本质思想"><a href="#注意力机制的本质思想" class="headerlink" title="注意力机制的本质思想"></a>注意力机制的本质思想</h2><p>刚才，我们在说的注意力思想都是依附于Encoder-Decoder框架中，其实，注意力机制是一种思想，本质思想就是找到注意力分配的概率分布也就是注意力权重系数，可以用在很多模型框架中。现在我们将注意力机制抽象出来。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112102736028.png" alt="image-20210112110425144"></p><p>将Source中的构成元素想象成是由一系列的&lt;Key,Value&gt;数据对构成，此时给定Target中的某个元素Query，通过计算Query和各个Key的相似性或者相关性，得到每个Key对应Value的权重系数，然后对Value进行加权求和，即得到了最终的Attention数值。所以本质上Attention机制是对Source中元素的Value值进行加权求和，而Query和Key用来计算对应Value的权重系数。即可以将其本质思想改写为如下公式：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112102608815.png" alt="image-20210112110629123"></p><p>Attention机制的具体计算过程，如果对目前大多数方法进行抽象的话，可以将其归纳为三个过程：第一个阶段根据Query和Key计算两者的相似性或者相关性；第二个阶段对第一阶段的原始分值进行归一化处理； 第三个过程根据权重系数对Value进行加权求和。如下图所示</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112102728299.png" alt="image-20210112102736028"></p><h2 id="注意力机制的分类与应用"><a href="#注意力机制的分类与应用" class="headerlink" title="注意力机制的分类与应用"></a>注意力机制的分类与应用</h2><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112110425144.png" alt="image-20210112102608815"></p><h2 id="计算机视觉中的自注意力机制"><a href="#计算机视觉中的自注意力机制" class="headerlink" title="计算机视觉中的自注意力机制"></a>计算机视觉中的自注意力机制</h2><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112110629123.png" alt="image-20210112111248613"></p><p>之前讲的都是针对Source和Target的注意力机制，近年来计算视觉领域用的多的还是自注意力机制，也是从NLP中借鉴过来的思想，因此仍然保留了Query, Key和Value等名称。下图是self-attention的基本结构，feature maps是由基本的深度卷积网络得到的特征图</p><p>自上而下分为三个分支，分别是query、key、value。计算分为三步</p><ul><li><p>将query和每个key进行<strong>相似度计算得到权重</strong>，常用的相似度函数有点积，感知机等</p></li><li><p>一般是使用一个softmax函数<strong>对这些权重进行归一化</strong>；</p></li><li><p>将权重和相应的键值value进行<strong>加权求和</strong>得到最后的attention。</p></li></ul><p>可以看出，步骤和刚才我们抽象出来的注意力机制思想的基本步骤是一致的，只是这里的source和target是一个东西，我们需要找到特征图内部的重点。可能是通道上的，也可能是空间上的。下面就从空间和通道两个维度向大家介绍一些经典的CV领域的注意力模型。</p><h3 id="空间注意力模型—Non-Local"><a href="#空间注意力模型—Non-Local" class="headerlink" title="空间注意力模型—Non-Local"></a>空间注意力模型—Non-Local</h3><p>我们知道卷积网络通过多层的网络来捕获更强的语义信息与更大的感受野，但这样的学习效率太低，需要通过不断加深的网络堆叠来实现，于是作者提出了一个泛化、简单、可直接嵌入到当前网络的<strong>非局部操作算子</strong>，这个简单的注意力模块可以方便的加入网络中，来学习长距离的依赖关系。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112111248613.png" alt="image-20210112102728299"></p><p>作者这个思想是来源于传统的基于图片滤波领域的非局部均值滤波操作思想（核心思想是在计算每个像素位置输出时候，不再只和邻域计算，而是和图像中所有位置计算相关性）</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112111401100.png" alt="image-20210112111401100"></p><p>下图是 non-local block的示意图，从左到右也对应了之前说的query,key,value，通过1x1的卷积来映射特征与通道数降维。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112111502943.png" alt="image-20210112111502943"></p><h3 id="空间注意力模型—STN"><a href="#空间注意力模型—STN" class="headerlink" title="空间注意力模型—STN"></a>空间注意力模型—STN</h3><p>空间区域注意力可以理解为让神经网络在看哪里。通过注意力机制，将原始图片中的空间信息变换到另一个空间中并保留了关键信息，在很多现有的方法中都有使用这种网络，自己接触过的一个就是ALPHA Pose。spatial transformer其实就是注意力机制的实现，因为训练出的spatial transformer能够找出图片信息中需要被关注的区域，同时这个transformer又能够具有旋转、缩放变换的功能，这样图片局部的重要信息能够通过变换而被框盒提取出来。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112111845810.png" alt="image-20210112111845810"></p><p>STN主要分为三个模块</p><ul><li><p><strong>Localisation net</strong>由全连接和卷积构成的网络，它输入U，输出变化参数Θ，这个参数用来映射U和V的坐标关系</p></li><li><p><strong>Grid generator</strong>根据V中的坐标点和变化参数Θ，计算出U中的坐标点。在Sampler中根据这个坐标在U中找到像素值，这样子来填充V</p></li><li><p><strong>Sampler</strong>填充V，根据Grid generator得到的一系列坐标和原图U来填充，因为计算出来的坐标可能为小数，使用双线性或其他插值方法。</p></li></ul><h3 id="通道注意力模型—SENet"><a href="#通道注意力模型—SENet" class="headerlink" title="通道注意力模型—SENet"></a>通道注意力模型—SENet</h3><p> <strong>这篇论文就是通道维度（channel-wise）增加注意力机制</strong>，关键的两个操作是squeeze和excitation，所以论文把这个attention结构命名为SE block，SE block是为了显式地实现特征通道的的相互依赖关系，就是说就是<strong>通过自动学习的方式（用另外一个新的神经网络实现）获取到每个特征通道的重要程度，然后用这个重要程度去给每一个特征通道赋予一个权重值，从而让神经网络重点关注某些特征通道</strong>，即提升对当前任务有用的特征通道并抑制对当前任务用处不大的特征通道。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20210112111958685.png" alt="image-20210112111958685"></p><p><strong>第一个操作：Squeeze</strong>，通过全局池化（global pooling），将每个通道的二维特征（H×W）压缩为1个实数，论文是通过平均值池化的方式实现。这属于空间维度的一种特征压缩，因为这个实数是根据二维特征所有值算出来的，所以在某种程度上具有全局的感受野，通道数保持不变，所以通过squeeze操作后变为1×1×C。</p><p><strong>第二个操作：excitation</strong>，通过参数来为每个特征通道生成一个权重值，这个权重值是如何生成就很关键了，论文是通过两个全连接层组成一个Bottleneck结构去建模通道间的相关性，并输出和输入特征同样数目的权重值。</p><p><strong>第三个操作：Scale</strong>，将前面得到的归一化权重加权到每个通道的特征上。论文中的方法是用乘法，逐通道乘以权重系数，完成再通道维度上引入attention机制。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> 注意力机制就是通过学习得到一个权重分布，再把这个权重分布施加到原来的特征上面。以获取更多所需要关注目标的细节信息，而抑制其他无用信息。是一种资源分配方式。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注意力机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文-PD-Net(2020)</title>
      <link href="/2020/12/24/yuque/lun-wen-pd-net-2020/"/>
      <url>/2020/12/24/yuque/lun-wen-pd-net-2020/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Polysemy-Deciphering-Network-for-Human-Object-Interaction-Detection"><a href="#Polysemy-Deciphering-Network-for-Human-Object-Interaction-Detection" class="headerlink" title="Polysemy Deciphering Network for Human-Object Interaction Detection"></a>Polysemy Deciphering Network for Human-Object Interaction Detection</h2><ul><li>概述：</li><li>关键词：</li><li>源码: <a href="https://github.com/MuchHair/PD-Net">https://github.com/MuchHair/PD-Net</a></li></ul><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><p>现有模型假设同一动词在不同的 HOI 范畴中具有相似的视觉特征，忽略了动词的不同语义（在不同的场景下，相同的动作的视觉特征有很大差别，如下图所示，对于不同的物体，动词可以呈现实质上不同的语义和视觉特征。这种语义差异可能非常大，导致同一类型视觉特征的重要性随着感兴趣物体的变化而发生巨大变化）。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1608792183736-6fea135c-9652-4558-92c2-e6eb44309445.png#height=325&amp;id=KCeH0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=325&amp;originWidth=1027&amp;originalType=binary%E2%88%B6=1&amp;size=345557&amp;status=done&amp;style=none&amp;width=1027" alt="image.png"><br>本文提出一种多义词解码网络 PDNet，通过 3 种方式对动词的视觉多义进行解码以进行 HOI 检测。首先，PDNet 利用语言先验信息增强人类的姿态和空间特征进行 HOI 检测，使动词分类器能够接收到减少同一动词类内变异的语言提示。其次，提出了一种新的多义注意模块（PAM），该模块可以指导 PDNet 根据语言优先级对更重要的特征类型进行决策。最后，将上述两种策略应用于动词识别的两种分类，即 SH-VCM 和 SP-VCM（object-shared and object-specific verb classifiers），二者的结合进一步解决了动词多义问题。</p><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1608792269961-a5c2dcd2-afb5-4a03-9581-0fc16bdf58b4.png#height=630&amp;id=p6bzf&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=630&amp;originWidth=1014&amp;originalType=binary%E2%88%B6=1&amp;size=255135&amp;status=done&amp;style=none&amp;width=1014" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1608792518514-e233ed19-209a-414b-bf21-b9a794835bb3.png#height=730&amp;id=tsxlq&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=730&amp;originWidth=1001&amp;originalType=binary%E2%88%B6=1&amp;size=384288&amp;status=done&amp;style=none&amp;width=1001" alt="image.png"><br><strong>(1）基础部分：</strong><br>给定一幅图像，使用 Faster R-CNN 获得人和物体的 proposal。每个人类提议 h 和物体提议 o 将组合成对作为交互分类的 proposal。然后提取人特征、物体特征、空间特征以及姿态信息（ H w s 、 O w s 、 P w s 和 S w s ） （H^{ws}、O^{ws}、P^{ws}和 S^{ws}）（_Hws_、_Ows_、<em>Pws</em>和<em>Sws</em>）传入后续网络。<br><strong>(2）动词多义处理部分:lue</strong></p><p>PD-Net 首先为每个 proposal 对生成一组动词分类分数。然后将多标签交互分类问题转化为一组二元分类问题（动词-名词两两组合）。然后依次通过语言先验增强（LPA）、多义注意模块（PAM）、物体共享动词分类模块（SH-VCM）和特定于物体的动词分类模块（SP-VCM）来执行 HOI 检测。SH-VCM 和 SP-VCM 分别包含一组共享物体二元分类器和特定物体二元分类器。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1608792829516-c2efa9de-218d-4db4-b2dd-e73020a09670.png#height=782&amp;id=DiHkr&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=782&amp;originWidth=984&amp;originalType=binary%E2%88%B6=1&amp;size=215029&amp;status=done&amp;style=none&amp;width=984" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1608788514619-b1df0d68-d177-470e-be83-b336794d432b.png#height=707&amp;id=yEC4K&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=707&amp;originWidth=970&amp;originalType=binary%E2%88%B6=1&amp;size=123798&amp;status=done&amp;style=none&amp;width=970" alt="image.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HOI人物交互检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mask R-CNN 演变笔记</title>
      <link href="/2020/12/19/maskrcnn/"/>
      <url>/2020/12/19/maskrcnn/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目标检测分为两种方法：一阶段法和两阶段法。一阶段法的代表算法为YOLO,SSD，具有速度快的优势。所谓两阶段法就是先找出图像中的region proposal ，再分别对每个proposal进行回归和分类，它的优势则是精确度高，Mask R-CNN则是这一方法，从一开始的R-CNN到Fast R-CNN再到Faster R-CNN，FPN，到最后的Mask R-CNN，演进过程中的一些方法依旧用于其他的机器视觉任务中，所以这个路线中的网络架构和方法非常值得我们去学习。</p><h2 id="Sliding-windows"><a href="#Sliding-windows" class="headerlink" title="Sliding windows"></a>Sliding windows</h2><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230310.png" alt="2020121901"></p><p>这是目标检测的最早期的算法——滑动窗口法，很好理解，就是固定一个窗口(不同的size 和长宽比)从左向右，从上到下的去滑动，对每个窗口的图像进行目标识别与分类。这种方法可想而知，非常耗时。</p><h2 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h2><p>2014年的时候随着深度学习的兴起，R-CNN横空出世了。与滑动窗口法不同，这里使用selective search 这种 region proposal method 来提取图像的RoIs (感兴趣区域)。这里我们可以看下这种方法的思想，相似的像素、纹理或者是灰度等会被归为一个区域，并得到这样的很多个小bounding box后，在对这些bounding box进行归类或者说聚类，使得整个图像的RoIs保持在2000个左右。</p><p>下面我们来看下R-CNN的网络结构图</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230311.png" alt="image-20201218110258776"></p><p>总结一下网络结构图：</p><ul><li>首先对图像使用 selective search方法，得到图像的RoIs</li><li>根据 RoIs 在原图像中裁剪，得到2k个不同尺寸的小image，再wrap 成相同尺寸大小的img</li><li>把相同大小的2k个img分别喂入CNN中提取特征，并使用SVM对目标进行分类，使用 bbox reg对 bounding Box进行定位。</li></ul><p><strong>SVM我们都知道是如何分类的，那么bounding box是如何通过回归来确定呢？</strong></p><p>首先我们可以看到这个一张飞机的图像，红色是候选的建议框，绿色是ground truth真实框，这个回归就是去学习这种变换映射关系，一个bounding box 通常由四个坐标表示，x,y坐标以及长宽w,h。通过映射公式可以看出 在 x,y上做平移变换，在 w,h做缩放变换，经过整理，就可以得到目标的优化对象。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230312.png" alt="image-20201218110519892"></p><p>现在，我们来回顾一下R-CNN的贡献和缺点</p><ul><li>使用selective search 来做region proposal</li><li>使用 SVM分类，boundingbox reg 回归</li></ul><p>缺点：</p><ul><li>selective search依旧费时</li><li>分别把2k个RoI图像送入CNN提取特征，存在大量重复计算</li></ul><h2 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h2><p>Fast R-CNN出现就是为了解决这个重复计算的问题，它最大的贡献就是把region proposal method 直接应用到feature map上，因此只要对一张图片喂入CNN中进行特征提取，然后把selective search得到的RoI位置映射到feature map(这点作者在论文中已经证明, feature map 中的位置和原图像的位置具有对应关系)。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219231350.png" alt="image-20201219231330001"></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219231347.png" alt="image-20201219231337746"></p><p>总结一下Fast R-CNN的网络结构：</p><ul><li>对原图像应用selective search 得到2k 个region proposal </li><li>把原图像喂入CNN网络提取特征，得到feature map</li><li>把region proposal 映射到feature map 中，并对这2k 个proposal 的进行ROI pooling 来 wrap 到固定的尺寸</li><li>使用CNN网络来做分类和回归</li></ul><p><strong>那么 ROI pooling 到底是怎么实现的呢？</strong></p><p>比如一个 8 x 8 的 feature map ,我们要在这个feature map上得到ROI，并且进行ROI pooling到2x2大小的输出。</p><p>假设一个ROI的 bounding box 为(0,3,7,8) , 将它划分为2x2的网格，因为ROI的长宽除以2是不能整除的，所以会出现每个格子大小不一样的情况,对每个区域进行最大池化，就可以得到 2 x 2 的的输出。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219231535.png" alt="image-20201219231532213"></p><p>因此，总结一下，Fast R-CNN的贡献和缺点</p><ul><li>从 feature map 得到proposal 而不是 images</li><li>使用ROI pooling 把所有RoI特征图 wrap到固定尺寸</li></ul><p>缺点：</p><ul><li>selective search的时间消耗问题仍未解决</li></ul><h2 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h2><p>Faster R-CNN出现就是为了解决selective search 耗时的问题，这里使用了RPN深度学习网络来生成region proposal，下面先看一下算法的网络架构图。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230315.png" alt="image-20201218124454510"></p><p>总结一下Faster R-CNN的网络结构：</p><ul><li>把原图像喂入CNN网络提取特征，得到feature map</li><li>在得到的 feature map上用RPN网络获取 region proposal ，大大降低时间。</li><li>将得到的 region proposal 在映射到特征图中，并做ROI pooling 来wrap成相同的尺寸</li><li>使用CNN网络来做分类和回归</li></ul><p><strong>那么，RPN是怎么实现的呢？</strong></p><p>这里就不得不说到 anchor的思想，下图是一个256维度的8 x 8  的 feature map，其中每一个特征点都对应原图像的一块区域，先用3 x 3 的卷积来获得更大的感受野 ，然后每个特征点用 9 种 anchor 来尝试框住目标区域（3种size ,3 抓种长宽比）。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230314.png" alt="1"></p><p>通过这张图可以看出 8 x 8 x 256 的特征图 经过两次1 x 1的卷积 变成两部分： 8 x 8 x 9 x 2 分数和 8 x 8 x 9 x 4 坐标偏移</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230317.png" alt="image-20201218132245129"></p><p>总结一下</p><ul><li>Training：在训练的时候，通过 IoU(交并比)来训练，这样的特征可能对应这样的anchor</li><li>Predition：预测的时候，对feature map 中的每一个特征点做预测，得到分数</li></ul><p>至此，Faster R-CNN可以说是解决了之前存在的问题，但是依旧有优化的空间。</p><p>其中有两个点值得优化：</p><ul><li><p>Faster R-CNN 是单尺度的目标检测框架，会遗漏一些小的目标。</p></li><li><p>ROI pooling 优化为ROI Align</p></li></ul><h2 id="FPN"><a href="#FPN" class="headerlink" title="FPN"></a>FPN</h2><p>FPN 的全称是 Feature Pyramid Network  特征金字塔网络，我们首先来看下单尺度的框架</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230318.png" alt="image-20201218140731596"></p><p>其中，高分辨率的特征比如 112x112x128的特征</p><ul><li>精确地空间位置信息</li><li>低维度的语义信息</li></ul><p>低分辨率的特征比如7x7x512的特征</p><ul><li>高维度的语义信息</li><li>模糊的空间位置信息</li></ul><p>而单尺度的框架最后只用了7x7x512 这样的低分辨率特征，丢失了精确地空间位置信息，因此，多尺度的特征金字塔解决了这个问题！</p><p>下面看一下FPN的简单结构图：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230319.png" alt="image-20201218141837927"></p><p>总结一下结构，由三部分组成：</p><ul><li>自下而上的下采样，提取高维度的语义特征</li><li>自上而下的上采样(双线性插值或者反卷积)</li><li>横向连接，保留空间位置信息</li></ul><p>FPN只是一种思路，具体可以有很多种网络架构实现，比如 VGG，AlexNet，ResNet，下图是使用 ResNet 实现的FPN，也是Mask R-CNN中使用的架构，下面是架构图。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230320.png" alt="image-20201218142911230"></p><h2 id="FPN-Faster-R-CNN"><a href="#FPN-Faster-R-CNN" class="headerlink" title="FPN+Faster R-CNN"></a>FPN+Faster R-CNN</h2><p>将 FPN 加入到 Faster R-CNN 网络架构中，变成下图 </p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230321.png" alt="image-20201218143049566"></p><p>那么问题来了，对于多尺度的特征图，选择哪个feature map来切出这些ROI区域呢？</p><p>实际上，我们会选择最合适的尺度的feature map来切ROI。具体来说，我们通过一个公式来决定宽w和高h的ROI到底要从哪个来切：</p><p>$k=\left\lfloor k_{0}+\log _{2}(\sqrt{w h} / 224)\right\rfloor$</p><p>先来说一下这几个参数的意义</p><ul><li>224 : 使用ImageNet预训练数据集的图片尺寸</li><li>k0 : 当 RoI 为 224 x 224 时所在的层级，作者将 k0 设置为 4，也就是ROI从P4中切出来</li></ul><p>比如一个112 x 112 的ROI ，k=3， 这个ROI 应该从 P3 从切出来，这很好理解，分辨率越小的RoI应该从feature map 尺寸较大的层级切出来，因为这样的feature map 保留了更多的空间位置信息。</p><h2 id="Mask-R-CNN"><a href="#Mask-R-CNN" class="headerlink" title="Mask R-CNN"></a>Mask R-CNN</h2><p>FPN+Faster R-CNN+Mask Prediction = Mask R-CNN</p><p>下图是 Mask R-CNN的网络结构图</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230323.png" alt="image-20201219200434400"></p><p>总结一下结构：</p><ul><li>backbone：ResNet-FPN 用于特征提取，另外，ResNet还可以是：ResNet-50,ResNet-101,ResNeXt-50,ResNeXt-101；</li><li>Head：包括边界框识别（分类和回归）+ mask预测。头部结构见下图</li></ul><p>现在细看一下Mask branch 是怎么做的</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230322.png" alt="image-20201218155313527"></p><p>可以从结构图中看出，前面经过POIAlign后的ROI被送入两个分支</p><ul><li><p>第一个分支用来分类和回归boundingbox</p></li><li><p>第二个mask分支来做实例分割，通过全卷积和反卷积最后得到一个28x 28 x80 的mask，要注意这里的80个通道指分类的类别数为80，后面我们也会通过损失函数来详细说明</p></li></ul><p>至此，从R-CNN到Mask R-CNN的演变之路就讲完了，下面我们讲一下MaskR-CNN的一些细节。</p><h3 id="ROIAlign"><a href="#ROIAlign" class="headerlink" title="ROIAlign"></a>ROIAlign</h3><p>首先是ROIAlign，我们知道之前的网络对ROI  wrap到固定的尺寸都是使用的ROI Pooling，那么这样做有什么缺点呢？这里我们通过一组图来说明</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230324.png" alt="image-20201219212431878"></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230327.png" alt="image-20201219215855556"></p><p>可以看出，原本的original ROI 最后变成2x2的ROI一共经历了两次取整的操作，存在误差，会影响bounding box的位置准备度</p><ul><li>第一次取整： regional ROI可能是浮点数，首先是取整，将ROI和feature map 对齐</li><li>第二次取整：regional ROI 可能不能被最后的2x 2整除，比如原本的ROI尺寸是5x4，那么如图，最终分成的2x2ROI并不是每一块都是一样大的，进行了不均等的切分。</li></ul><p>这两次取整操作，对于大目标来说还好，但是小目标的包围框坐标对这样的误差还是很敏感的，为了解决这个问题，ROIAlign出现了，下面是结构图</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230326.png" alt="image-20201219213447848"></p><ul><li>针对第一次取整，这里图画的本来就是和feature map对准的，其实不是对准的也没关系，ROI Align保留这里的浮点数，不做取整操作</li><li>针对第二次取整，我们可以看到7x5的ROI被平均的分成了四份，针对每一小份又使用了4个采样点对这块区域进行采样，那么是如何采样的呢？首先4个采样点就是把这一小份平均分成四份，每一小份的值由双线性插值方法获得。因此每一小份最终可以由4份得到，在对这样的特征图进行MaxPooling , 最终得到2x2的ROI，这里为什么用4个采样点呢，其实用1个也是可以的，作者在实验中证明4个采样点的效果最好。</li><li>双线性插值我们可以从图中直观地看到，其实就是做了三次线性插值</li></ul><h3 id="Loss-function"><a href="#Loss-function" class="headerlink" title="Loss function"></a>Loss function</h3><p>Mask R-CNN的损失函数有些特殊，我们来看一下公式</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230325.png" alt="image-20201219212439319"></p><p>其中的Lmask 就是Mask branch的损失，这个mask就是指每个像素是0还是1，用来区分背景，做分割</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230328.png" alt="image-20201219220637393"></p><p>这个7x7的mask,其中每一个像素都有80个通道，每一个通道都对应一个类别，通常 对于实例分割来说，都是使用softmax做分类，得出这80个类别分别的概率，然后再去区别是目标还是背景，因此需要做两个任务，一个是类别预测，一个是mask预测.</p><p>而Mask RCNN是怎么做的呢，它不做类别预测，只做mask预测，通过其他分支的类别预测选择对应的80个通道中一个，比如是狗，那么只要对这7x7个像素预测，这个像素是目标狗还是背景，输出一个0或1的二值mask，因此只做了一个任务mask预测</p><p>相比之前的softmax方法，有两个优势</p><ul><li>避免了类间竞争，使得性能提高</li><li>类别预测和mask预测分开来做，解耦</li></ul><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p><strong>Instance segmentation</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230329.png" alt="image-20201219224118913"></p><p><strong>Human pose estimation</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201219230330.png" alt="image-20201219224141806"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode总结—二叉树的构造</title>
      <link href="/2020/12/13/er-cha-shu-de-gou-zao/"/>
      <url>/2020/12/13/er-cha-shu-de-gou-zao/</url>
      
        <content type="html"><![CDATA[<p>二叉树是面试中常见的题目类型，这里，针对leetcode前200道题中的二叉树相关问题进行总结与思考，力求烂熟于心，能根据题目名回忆起题目的具体描述，进而用简洁的语言描述出算法的核心。具体的题目答案可打开leetcode查看历史提交记录。</p><p><a href="https://www.yuque.com/ugdongzhou/sivpgk/b97740505d86178e7fe86be2088b42c2/edit">二叉树的遍历</a>是上一篇的内容，可先回顾；本篇主要整理二叉树的构造相关题目和思路。</p><h2 id="二叉树的构造（binary-tree-traversal）"><a href="#二叉树的构造（binary-tree-traversal）" class="headerlink" title="二叉树的构造（binary-tree-traversal）"></a>二叉树的构造（binary-tree-traversal）</h2><blockquote><p>给定二叉树特定遍历下的结果，构造出原本的二叉树。</p></blockquote><p>解题关键在于定位出根节点，划分出左右子树，然后 递归 构建左右子树</p><h2 id="1-从前序与中序遍历序列构造二叉树"><a href="#1-从前序与中序遍历序列构造二叉树" class="headerlink" title="1.从前序与中序遍历序列构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">1.从前序与中序遍历序列构造二叉树</a></h2><p>该题是leetcode105题，medium难度，一句话题干描述：从前序与中序遍历序列构造二叉树。</p><p><strong>解决方案1(复杂度高)：</strong> 先序遍历的顺序是根节点，左子树，右子树。中序遍历的顺序是左子树，根节点，右子树。</p><p>所以我们只需要根据先序遍历得到根节点，然后在中序遍历中找到根节点的位置，它的左边就是左子树的节点，右边就是右子树的节点。生成左子树和右子树就可以递归的进行了。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201214104215.png" alt="image.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>{</span><br><span class="line">    <span class="comment">//递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span>(preorder.length==<span class="number">0</span>||inorder.length==<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(preorder.length!=inorder.length){</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入错误"</span>);</span><br><span class="line">    }</span><br><span class="line">    TreeNode root=<span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;preorder.length;i++){</span><br><span class="line">        <span class="keyword">if</span>(preorder[<span class="number">0</span>]==inorder[i]){</span><br><span class="line">            <span class="keyword">int</span>[] pre_left=Arrays.copyOfRange(preorder,<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span>[] pre_right=Arrays.copyOfRange(preorder,i+<span class="number">1</span>,preorder.length);</span><br><span class="line">            <span class="keyword">int</span>[] in_left=Arrays.copyOfRange(inorder,<span class="number">0</span>,i);</span><br><span class="line">            <span class="keyword">int</span>[] in_right=Arrays.copyOfRange(inorder,i+<span class="number">1</span>,inorder.length);</span><br><span class="line">            root.left=buildTree(pre_left,in_left);</span><br><span class="line">            root.right=buildTree(pre_right,in_right);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201214104223.gif" alt="image"></p><p>二叉树相关的很多问题的解决思路都有分治法的思想在里面。我们复习一下分治法的思想：把原问题拆解成若干个与原问题结构相同但规模更小的子问题，待子问题解决以后，原问题就得以解决，“归并排序”和“快速排序”都是分治法思想的应用，其中“归并排序”先无脑地“分”，在“合”的时候就麻烦一些；“快速排序”开始在 partition 上花了很多时间，即在“分”上使了很多劲，然后就递归处理下去就好了，没有在“合”上再花时间。</p><p><strong>解决方案2(优化版)：</strong> 以上的解法，存在两个问题：</p><p>1.在中序遍历中找到根节点的位置每次都得遍历中序遍历的数组去寻找，我们可以用一个HashMap把中序遍历数组的每个元素的值和下标存起来，这样寻找根节点的位置就可以直接得到；</p><p>2.每次递归都分割数组，占用空间大，其次只要传数组索引。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201214104245.png" alt="image.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] preorder;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,Integer&gt; hash;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> prelength=preorder.length;</span><br><span class="line">        <span class="keyword">int</span> inlength=inorder.length;</span><br><span class="line">        <span class="keyword">if</span>(prelength!=inlength){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入错误"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>.preorder=preorder;</span><br><span class="line">        <span class="keyword">this</span>.hash=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inlength;i++){</span><br><span class="line">            hash.put(inorder[i],i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> buildTree(<span class="number">0</span>,prelength-<span class="number">1</span>,<span class="number">0</span>,inlength-<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">     <span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> preleft,<span class="keyword">int</span> preright, <span class="keyword">int</span> inleft,<span class="keyword">int</span> inright)</span> </span>{</span><br><span class="line">         <span class="comment">// 因为是递归调用的方法，按照国际惯例，先写递归终止条件</span></span><br><span class="line">         <span class="keyword">if</span>(preleft&gt;preright || inleft&gt;inright){</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">         }</span><br><span class="line">         TreeNode root=<span class="keyword">new</span> TreeNode(preorder[preleft]);</span><br><span class="line">         <span class="keyword">int</span> inindex=hash.get(preorder[preleft]);</span><br><span class="line">         root.left=buildTree(preleft+<span class="number">1</span>,inindex-inleft+preleft,inleft,inindex-<span class="number">1</span>);</span><br><span class="line">         root.right=buildTree(inindex-inleft+preleft+<span class="number">1</span>,preright,inindex+<span class="number">1</span>,inright);</span><br><span class="line">         <span class="keyword">return</span> root;</span><br><span class="line">     }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-从中序与后序遍历序列构造二叉树"><a href="#2-从中序与后序遍历序列构造二叉树" class="headerlink" title="2.从中序与后序遍历序列构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">2.从中序与后序遍历序列构造二叉树</a></h2><p>该题是 leetcode106 题，medium 难度，一句话题干描述：从中序和后序遍历序列构造二叉树。</p><p><strong>解决方案：</strong> 和上一题类似，中序遍历的顺序是左子树，根节点，右子树，后序遍历的顺序是左子树，右子树，根节点。所以我们只需要根据后序遍历得到根节点，然后在中序遍历中找到根节点的位置，它的左边就是左子树的节点，右边就是右子树的节点。生成左子树和右子树就可以递归的进行了。下面是更详细的图解。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201214104301.png" alt="image"></p><p>直接套用上一题的解决方案2,使用哈希表和传数组索引的方法降低复杂度。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] postorder;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,Integer&gt; hash;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> inLen=inorder.length;</span><br><span class="line">        <span class="keyword">int</span> postLen=postorder.length;</span><br><span class="line">        <span class="keyword">if</span>(inLen!=postLen){</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入错误"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">this</span>.hash=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.postorder=postorder;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inLen;i++){</span><br><span class="line">            hash.put(inorder[i],i);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> buildTree(<span class="number">0</span>,inLen-<span class="number">1</span>,<span class="number">0</span>,postLen-<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> inLeft,<span class="keyword">int</span> inRight,<span class="keyword">int</span> postLeft,<span class="keyword">int</span> postRight)</span> </span>{</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(inLeft&gt;inRight || postLeft&gt;postRight){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(postorder[postRight]);</span><br><span class="line">        <span class="keyword">int</span> inindex=hash.get(postorder[postRight]);</span><br><span class="line">        root.left=buildTree(inLeft,inindex-<span class="number">1</span>,postLeft,inindex-inLeft+postLeft-<span class="number">1</span>);</span><br><span class="line">        root.right=buildTree(inindex+<span class="number">1</span>,inRight,inindex-inLeft+postLeft,postRight-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-将有序数组转换为二叉搜索树"><a href="#3-将有序数组转换为二叉搜索树" class="headerlink" title="3.将有序数组转换为二叉搜索树"></a><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">3.将有序数组转换为二叉搜索树</a></h2><p>该题是 leetcode108 题，easy难度，一句话题干描述：根据升序数组，恢复一棵高度平衡的BST🌲。</p><p><strong>解决方案：</strong>BST的中序遍历是升序的，因此本题等同于<strong>根据中序遍历的序列恢复二叉搜索树</strong>。因此我们可以以升序序列中的任一个元素作为根节点，以该元素左边的升序序列构建左子树，以该元素右边的升序序列构建右子树，这样得到的树就是一棵二叉搜索树啦～ 又因为本题要求高度平衡，因此我们需要选择升序序列的中间元素作为根节点。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201214104317.png" alt="微信图片_20201209103046.png"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dfs(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        root.left=dfs(nums,left,mid-<span class="number">1</span>);</span><br><span class="line">        root.right=dfs(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-有序链表转换二叉搜索树"><a href="#4-有序链表转换二叉搜索树" class="headerlink" title="4.有序链表转换二叉搜索树"></a><a href="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/">4.有序链表转换二叉搜索树</a></h2><p>该题是 leetcode109 题，medium 难度，一句话题干描述：根据升序数组，恢复一棵高度平衡的BST🌲。</p><p><strong>解决方案：</strong>与上一题 leetcode108 题类似，唯一的不同在与数据结构，上一题是数组，这一题是链表，链表找中间根节点可以使用快慢指针法。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201214104334.png" alt="image"></p><p>下面的代码与上图不同的地方是 构建左BST时没有断开链表，那处理的时候就是要改一下寻找中间节点的代码。<code>while (fast != null &amp;&amp; fast.next != null) ---》   while(fast!=tail &amp;&amp; fast.next!=tail)</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        ListNode tail=head;</span><br><span class="line">        <span class="keyword">while</span>(tail!=<span class="keyword">null</span>){</span><br><span class="line">            tail=tail.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dfs(head,tail);</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">dfs</span><span class="params">(ListNode head,ListNode tail)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(head==tail){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">        ListNode node=findMid(head,tail);</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(node.val);</span><br><span class="line">        root.left=dfs(head,node);</span><br><span class="line">        root.right=dfs(node.next,tail);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">findMid</span><span class="params">(ListNode head,ListNode tail)</span> </span>{</span><br><span class="line">        ListNode slow=head;</span><br><span class="line">        ListNode fast=head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=tail &amp;&amp; fast.next!=tail){</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="5-平衡二叉树"><a href="#5-平衡二叉树" class="headerlink" title="5. 平衡二叉树"></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">5. 平衡二叉树</a></h2><p>该题是 leetcode110 题，easy难度，一句话题干描述：给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>前两题要求构建的是平衡二叉树，我们的处理办法是从中间节点开始左右分别构建，这样的二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 ，也称作平衡二叉树。</p><p><strong>解决方案(暴力法自顶向下)：</strong>构造一个获取当前节点最大深度的方法<code>depth(root)</code> ，通过比较此子树的左右子树的最大高度差<code>abs(depth(root.left) - depth(root.right))</code>，来判断此子树是否是二叉平衡树。若树的所有子树都平衡时，此树才平衡。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(depth(root.left)-depth(root.right))&lt;<span class="number">2</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> Math.max(depth(root.left),depth(root.right))+<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//上面的方法要不断递归左右子树, 有重复部分,所以时间复杂度为O(n2)</span></span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案(优化法自底向上)：</strong>后序遍历，左右中，从底至顶返回子树最大高度，若判定某子树不是平衡树则 “剪枝” ，直接向上返回。</p><p><strong>NOTE:</strong>参数的话为传入的节点指针，就没有其他参数需要传递了，返回值要返回传入节点为根节点树的深度。</p><p><strong>那么如何标记左右子树是否差值大于1呢。</strong></p><p>如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> dfs(root)!=-<span class="number">1</span>;      </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 返回以该节点为根节点的二叉树的高度，如果不是二叉搜索树了则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left=dfs(root.left);<span class="comment">// 说明左子树已经不是二叉平衡树</span></span><br><span class="line">        <span class="keyword">if</span>(left==-<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right=dfs(root.right);<span class="comment">// 说明右子树已经不是二叉平衡树</span></span><br><span class="line">        <span class="keyword">if</span>(right==-<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(left-right)&lt;<span class="number">2</span>?Math.max(left,right)+<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参考资料：leetcode题解，感谢这些大佬的配图以及易懂的语言！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iCAN (BMVC2018)</title>
      <link href="/2020/12/10/lun-wen-ican-bmvc2018/"/>
      <url>/2020/12/10/lun-wen-ican-bmvc2018/</url>
      
        <content type="html"><![CDATA[<h1 id="文献-iCAN-Instance-Centric-Attention-Network-for-Human-Object-Interaction-Detection"><a href="#文献-iCAN-Instance-Centric-Attention-Network-for-Human-Object-Interaction-Detection" class="headerlink" title="文献-iCAN: Instance-Centric Attention Network for Human-Object Interaction Detection"></a>文献-iCAN: Instance-Centric Attention Network for Human-Object Interaction Detection</h1><ul><li>概述：人或物体实例的外观包含上下文线索，利用这些信息可以注意到图像中可以促进交互预测的部分。为了利用这些线索，研究者提出了一个以实例为中心的注意力模块，学习根据每个实例的外观动态突出显示图像中的区域。这种基于注意力的网络允许研究者选择性地聚合与识别 HOI相关的特征。在InteractNet上做的改进,达到了 V-COCO 45.3%。</li><li>关键词：注意力机制</li><li>论文地址：<a href="https://www.yuque.com/ugdongzhou/io8kmc/1661063">https://www.yuque.com/ugdongzhou/io8kmc/1661063</a></li><li>源码:  <a href="https://github.com/vt-vl-lab/iCAN">https://github.com/vt-vl-lab/iCAN</a>  和DRG2020同属<a href="https://github.com/vt-vl-lab">vt-vl-lab</a>实验室</li></ul><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h2><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134848.png" alt="image-20201209144401235"></p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><ul><li>引入了一个以实例为中心的注意力模块，它允许网络动态突出信息区域以改进 HOI 检测。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134849.png" alt="image-20201209152307633"></p><ol><li><p>在由h或者o计算a的分数时，不止用它们本身的特征，还concat了context特征，contex特征则是根据intance产生的注意力在原图的特征上得到的。</p><p>给定图像的卷积特征（以灰色显示）和人/物体边界框（以红色显示），iCAN 模块提取实例</p><p>（人类）或（物体）的外观特征以及来自以实例为中心的注意力映射的特征。为了计算注意力映射，研究者使用 512 个通道的 bottleneck 来评估嵌入空间中的相似性【37】【38】。具体来说，研究者用 1×1 卷积和实例外观特征将图像特征嵌入到全连接层中。这里的 res5 表示第五个残差块，GAP 表示全局平均池化层，FC 表示全连接层。</p></li><li><p>同样需要判断h和o是否有关系，该方法是用空间的interaction pattern（neural-motif中有这个）并concat human instance计算得到的。</p></li></ol><p>【37】 Ashish V aswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez,<br>Łukasz Kaiser, and Illia Polosukhin. Attention is all you need. In NIPS, 2017.</p><p>【38】Xiaolong Wang, Ross Girshick, Abhinav Gupta, and Kaiming He. Non-local neural networks. InCVPR, 2018.</p><h2 id="【38】Non-local-Neural-Networks-facebook"><a href="#【38】Non-local-Neural-Networks-facebook" class="headerlink" title="【38】Non-local Neural Networks -facebook"></a>【38】Non-local Neural Networks -facebook</h2><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p>计算机视觉领域注意力机制的开篇之作。提出了non-local operations，使用自注意力机制建立远程依赖。 - local operations: 卷积(对局部领域)、recurrent(对当前/前一时刻)等操作。 - non-local operations用于捕获长距离依赖（long-range dependencies），即如何建立图像上两个有一定距离的像素之间的联系，如何建立视频里两帧的联系，如何建立一段话中不同词的联系等。 Non-local operations 在计算某个位置的响应时，是考虑所有位置 features 的加权——所有位置可以是空间的，时间的，时空的。</p><h4 id="网络结构-1"><a href="#网络结构-1" class="headerlink" title="网络结构"></a>网络结构</h4><p>给出非局部操作的具体公式。首先在深度学习中非局部操作可以表达为：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134850.png" alt="img"></p><p>i是输出特征图的其中一个位置，通用来说这个位置可以是时间、空间和时空。j是所有可能位置的索引，x是输入信号，可以是图像、序列和视频，通常是特征图。y是和x尺度一样的输出图，f是配对计算函数，计算第i个位置和其他所有位置的相关性，g是一元输入函数，目的是进行信息变换，C(x)是归一化函数，保证变换前后整体信息不变。以上是一个非常泛化的公式，结合神经网络特定，需要考虑其具体形式。首先 g 由于是一元输出，比较简单，我可以采用1x1卷积，代表线性嵌入，其形式为</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134851.png" alt="img"></p><p>对于f，前面我们说过其实就是计算两个位置的相关性，那么第一个非常自然的函数是Gaussian</p><p><strong>(1) Gaussian</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134852.png" alt="img"></p><p>对两个位置进行点乘，然后通过指数映射，放大差异。</p><p><strong>(2) Embedded Gaussian</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134853.png" alt="img"></p><p>前面的gaussian形式是直接在当前空间计算，而(2)更加通用，在嵌入空间中计算高斯距离。这里：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134854.png" alt="img"></p><p>完整考虑是：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134855.png" alt="img"></p><p><strong>(3) Dot product</strong></p><p>考虑一种最简单的非局部操作形式：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134856.png" alt="image-20201210134835084"></p><p>其中C(x)=N，像素个数。可以看出(2) (3)的主要区别是是否含有激活函数softmax。</p><p><strong>(4) Concatenation</strong></p><p>参考 Relation Networks可以提出：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134857.png" alt="image-20201210134825277"></p><h4 id="Non-local-Block"><a href="#Non-local-Block" class="headerlink" title="Non-local Block"></a>Non-local Block</h4><p>前面是基本的非局部操作算子，利用这些算子，下面开始构造成模块。 </p><p><img src="https:////upload-images.jianshu.io/upload_images/11692737-fd82671ed688abb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/140/format/webp" alt="img"></p><p>可以看出，上面构造成了残差形式。上面的做法的<strong>好处是可以随意嵌入到任何一个预训练好的网络中，因为只要设置W_z初始化为0，那么就没有任何影响，然后在迁移学习中学习新的权重。这样就不会因为引入了新的模块而导致预训练权重无法使用</strong>。</p><p>下面结合具体实例分析：。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201210134858.png" alt="img"></p><p>由于我们考虑的是图片，故可以直接设置T=1，或者说不存在。</p><ul><li><p>首先网络输入是X= (batch, h, w, 1024) ，经过Embedded Gaussian中的两个嵌入权重变换<img src="https://img2018.cnblogs.com/blog/1470684/201911/1470684-20191118183432078-1492031547.png" alt="W_{\theta}"> ， <img src="https://img2018.cnblogs.com/blog/1470684/201911/1470684-20191118183432402-981947511.png" alt="W_{\phi}">得到(batch, h, w, 512), (batch, h, w, 512), 其实这里的目的是降低通道数，减少计算量；</p></li><li><p>然后分别对这两个输出进行reshape操作，变成(batch, hw, 512)，后对这两个输出进行矩阵乘(其中一个要转置)，计算相似性，得到(batch, hw, hw),</p></li><li><p>然后在第2个维度即最后一个维度上进行softmax操作，得到(batch, hw, hw), 意这样做就是空间注意力，相当于找到了当前图片或特征图中每个像素与其他所有位置像素的归一化相关性；也就是得到0~1的weights，这里就是我们需要的 Self-attention 系数；</p></li><li><p>然后将 g 也采用一样的操作，先通道降维，然后reshape；然后和 (batch, hw, hw)进行矩阵乘，得到(batch, h, w, 512), 即将空间注意力机制应用到了所有通道的每张特征图对应位置上，本质就是输出的每个位置值都是其他所有位置的加权平均值，通过softmax操作可以进一步突出共性。最后经过一个1x1卷积恢复输出通道，保证输入输出尺度完全相同。</p></li></ul><p>代码地址  <a href="https://github.com/AlexHex7/Non-local_pytorch">https://github.com/AlexHex7/Non-local_pytorch</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HOI人物交互检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验室gpu管理</title>
      <link href="/2020/12/09/shu-lxd-gpu/"/>
      <url>/2020/12/09/shu-lxd-gpu/</url>
      
        <content type="html"><![CDATA[<p><strong><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8">🙂</span>在线阅读地址</strong>：项目地址：<a href="https://github.com/DongZhouGu/shu-lxd-gpu">https://github.com/DongZhouGu/shu-lxd-gpu</a></p><p><strong><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8">🙂</span>在线阅读地址</strong>：<a href="https://dongzhougu.github.io/shu-lxd-gpu/">https://dongzhougu.github.io/shu-lxd-gpu/</a></p><h2 id="GPU-容器使用说明"><a href="#GPU-容器使用说明" class="headerlink" title="GPU 容器使用说明"></a>GPU 容器使用说明</h2><blockquote><p>容器目前只在新到的服务器上(2* 2080Ti)实施</p><p>但可以访问  <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8">👉</span><a href="https://dongzhougu.github.io/lxd-nvidia-smi/signin.html">显卡监控界面</a> 看到实验室所有显卡的使用情况</p></blockquote><p>使用LXD创建和管理容器，多位同学可以同时使用校园网远程访问服务器；</p><p>操作简单，你可以像是用自己的电脑一样使用容器。</p><h2 id="请根据角色，阅读以下具体的使用文档"><a href="#请根据角色，阅读以下具体的使用文档" class="headerlink" title="请根据角色，阅读以下具体的使用文档"></a>请根据角色，阅读以下具体的使用文档</h2><h2 id="point-right-For-用户"><a href="#point-right-For-用户" class="headerlink" title=":point_right:For 用户"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8">👉</span><a href="doc/用户.md">For 用户</a></h2><h2 id="point-right-For-管理员"><a href="#point-right-For-管理员" class="headerlink" title=":point_right:For 管理员"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8">👉</span><a href="doc/管理员.md">For 管理员</a></h2><h2 id="point-right-显卡监控界面"><a href="#point-right-显卡监控界面" class="headerlink" title=":point_right:显卡监控界面"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8">👉</span><a href="https://dongzhougu.github.io/lxd-nvidia-smi/signin.html">显卡监控界面</a></h2><blockquote><p>监控界面的登入用户名与密码，见下方文档</p><p><a href="https://shimo.im/docs/yVpDgvJKqPwtvpqr">https://shimo.im/docs/yVpDgvJKqPwtvpqr</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HICO-DET数据集</title>
      <link href="/2020/12/03/lun-wen-hico-det-shu-ju-ji/"/>
      <url>/2020/12/03/lun-wen-hico-det-shu-ju-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="文献-Learning-to-Detect-Human-Object-Interaction"><a href="#文献-Learning-to-Detect-Human-Object-Interaction" class="headerlink" title="文献-Learning to Detect Human-Object Interaction"></a>文献-Learning to Detect Human-Object Interaction</h1><ul><li>概述：2018年由密歇根大学和华盛顿大学共同提出HICO-DET数据集</li><li>关键词：数据集</li><li>论文地址：<a href="https://www.yuque.com/ugdongzhou/io8kmc/1661139">https://www.yuque.com/ugdongzhou/io8kmc/1661139</a></li><li>数据集:  <a href="http://www-personal.umich.edu/~ywchao/hico/">http://www-personal.umich.edu/~ywchao/hico/</a></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201206213325.png" alt="image-20201203205600371"></p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><ul><li>提出一个新的benchmark ——HICO-DET，提供了超过150,000个标注后的人类-物体组合，包含600个HOI类别，即每个HOI类别平均250个组合实例。</li><li>提出了基于人-物区域的卷积神经网络HO-RCNN。分两步，1. 使用最先进的人体和物体检测器生成人体-物体区域对的proposal；2. 将每个人-物框proposal送入CNN，以生成HOI分类分数。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201206213222.png" alt="image-20201203211834372"></p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><h4 id="三个benchmark"><a href="#三个benchmark" class="headerlink" title="三个benchmark"></a>三个benchmark</h4><ul><li>Full—— 所有的600个HOI分类</li><li>Rare ——138个HOI类别（少于10个训练实例）</li><li>Non-Rare ——462个HOI类别（大于等于10个训练实例）</li></ul><h4 id="两种评估方法"><a href="#两种评估方法" class="headerlink" title="两种评估方法"></a>两种评估方法</h4><ul><li>Known Object ——定位HOI(如人-自行车对)以及区分互动(如“骑行”)</li><li>Default setting ——更有挑战性，图像中可能不存在目标对象</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HOI人物交互检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解HTTP总结</title>
      <link href="/2020/11/29/tu-jie-http-zong-jie/"/>
      <url>/2020/11/29/tu-jie-http-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>上野宣. 图解 HTTP[M]. 人民邮电出版社, 2014.</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129164421.jpg" alt="image-20201129163253254"></p><h2 id="一-、基础概念"><a href="#一-、基础概念" class="headerlink" title="一 、基础概念"></a>一 、基础概念</h2><h3 id="请求和响应报文"><a href="#请求和响应报文" class="headerlink" title="请求和响应报文"></a>请求和响应报文</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p><p>请求报文结构：</p><ul><li>第一行是包含了请求方法、URL、协议版本；</li><li>接下来的多行都是请求首部 Header，每个首部都有一个首部名称，以及对应的值。</li><li>一个空行用来分隔首部和内容主体 Body</li><li>最后是请求的内容主体</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">GET</span> <span class="string">http://www.example.com/</span> <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="attr">Accept:</span> <span class="string">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span></span><br><span class="line"><span class="attr">Accept-Encoding:</span> <span class="string">gzip,</span> <span class="string">deflate</span></span><br><span class="line"><span class="attr">Accept-Language:</span> <span class="string">zh-CN,zh;q=0.9,en;q=0.8</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">max-age=0</span></span><br><span class="line"><span class="attr">Host:</span> <span class="string">www.example.com</span></span><br><span class="line"><span class="attr">If-Modified-Since:</span> <span class="string">Thu,</span> <span class="number">17</span> <span class="string">Oct</span> <span class="number">2019 07:18:26 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">If-None-Match:</span> <span class="string">"3147526947+gzip"</span></span><br><span class="line"><span class="attr">Proxy-Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">Upgrade-Insecure-Requests:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">User-Agent:</span> <span class="string">Mozilla/5.0</span> <span class="string">xxx</span></span><br><span class="line"><span class="string">//空行</span></span><br><span class="line"><span class="string">param1=1&amp;param2=2</span></span><br></pre></td></tr></tbody></table></figure><p>响应报文结构：</p><ul><li>第一行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了</li><li>接下来多行也是首部内容，包含很多首部字段</li><li>一个空行分隔首部和内容主体</li><li>最后是响应的内容主体</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">HTTP/1.1</span> <span class="number">200</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">Age:</span> <span class="number">529651</span></span><br><span class="line"><span class="attr">Cache-Control:</span> <span class="string">max-age=604800</span></span><br><span class="line"><span class="attr">Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">Content-Encoding:</span> <span class="string">gzip</span></span><br><span class="line"><span class="attr">Content-Length:</span> <span class="number">648</span></span><br><span class="line"><span class="attr">Content-Type:</span> <span class="string">text/html;</span> <span class="string">charset=UTF-8</span></span><br><span class="line"><span class="attr">Date:</span> <span class="string">Mon,</span> <span class="number">02</span> <span class="string">Nov</span> <span class="number">2020 17:53:39 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">Etag:</span> <span class="string">"3147526947+ident+gzip"</span></span><br><span class="line"><span class="attr">Expires:</span> <span class="string">Mon,</span> <span class="number">09</span> <span class="string">Nov</span> <span class="number">2020 17:53:39 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">Keep-Alive:</span> <span class="string">timeout=4</span></span><br><span class="line"><span class="attr">Last-Modified:</span> <span class="string">Thu,</span> <span class="number">17</span> <span class="string">Oct</span> <span class="number">2019 07:18:26 </span><span class="string">GMT</span></span><br><span class="line"><span class="attr">Proxy-Connection:</span> <span class="string">keep-alive</span></span><br><span class="line"><span class="attr">Server:</span> <span class="string">ECS</span> <span class="string">(sjc/16DF)</span></span><br><span class="line"><span class="attr">Vary:</span> <span class="string">Accept-Encoding</span></span><br><span class="line"><span class="attr">X-Cache:</span> <span class="string">HIT</span></span><br><span class="line"><span class="string">//空行</span></span><br><span class="line"><span class="string">&lt;!doctype</span> <span class="string">html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line">    <span class="string">&lt;title&gt;Example</span> <span class="string">Domain&lt;/title&gt;</span></span><br><span class="line">    <span class="string">//</span> <span class="string">省略...</span> </span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>HTTP 使用 URL（ <strong>U</strong> niform <strong>R</strong>esource <strong>L</strong>ocator，<strong>统一资源定位符</strong>）来定位资源，它是  URI（<strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier，<strong>统一资源标识符</strong>）的子集，URL 在 URI 的基础上增加了定位能力。URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162304.png" alt="image"></p><ul><li><a href="https://zh.wikipedia.org/wiki/统一资源标志符">wikipedia：统一资源标志符</a></li><li><a href="https://en.wikipedia.org/wiki/URL">wikipedia: URL</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2">rfc2616：3.2.2 http URL</a></li><li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn">What is the difference between a URI, a URL and a URN?</a></li></ul><h2 id="二、HTTP-方法"><a href="#二、HTTP-方法" class="headerlink" title="二、HTTP 方法"></a>二、HTTP 方法</h2><p>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><blockquote><p>获取资源</p></blockquote><p>当前网络请求中，绝大部分使用的是 GET 方法。</p><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><blockquote><p>获取报文首部</p></blockquote><p>和 GET 方法类似，但是不返回报文实体主体部分。主要用于确认 URL 的有效性以及资源更新的日期时间等。</p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><blockquote><p>传输实体主体</p></blockquote><p>POST 主要用来传输数据，而 GET 主要用来获取资源。更多 POST 与 GET 的比较请见第九章。</p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><blockquote><p>上传文件</p></blockquote><p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line">&lt;p&gt;New File&lt;/p&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><blockquote><p>对资源进行部分修改</p></blockquote><p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></tbody></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><blockquote><p>删除文件</p></blockquote><p>与 PUT 功能相反，并且同样不带验证机制。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><blockquote><p>查询支持的方法</p></blockquote><p>查询指定的 URL 能够支持的方法。会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</p><h3 id="CONNECT"><a href="#CONNECT" class="headerlink" title="CONNECT"></a>CONNECT</h3><blockquote><p>要求在与代理服务器通信时建立隧道</p></blockquote><p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162326.jpeg" alt="image"></p><h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><blockquote><p>追踪路径</p></blockquote><p>服务器会将通信路径返回给客户端。发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p><h2 id="三、HTTP-状态码"><a href="#三、HTTP-状态码" class="headerlink" title="三、HTTP 状态码"></a>三、HTTP 状态码</h2><p>服务器返回的  <strong>响应报文</strong>  中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p><table><thead><tr><th align="center">状态码</th><th align="center">类别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1XX</td><td align="center">Informational（信息性状态码）</td><td align="center">接收的请求正在处理</td></tr><tr><td align="center">2XX</td><td align="center">Success（成功状态码）</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3XX</td><td align="center">Redirection（重定向状态码）</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4XX</td><td align="center">Client Error（客户端错误状态码）</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5XX</td><td align="center">Server Error（服务器错误状态码）</td><td align="center">服务器处理请求出错</td></tr></tbody></table><h3 id="1XX-信息"><a href="#1XX-信息" class="headerlink" title="1XX 信息"></a>1XX 信息</h3><ul><li><strong>100 Continue</strong>  ：表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</li></ul><h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><ul><li><strong>200 OK</strong></li><li><strong>204 No Content</strong>  ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</li><li><strong>206 Partial Content</strong>  ：表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</li></ul><h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><ul><li><strong>301 Moved Permanently</strong>  ：永久性重定向</li><li><strong>302 Found</strong>  ：临时性重定向</li><li><strong>303 See Other</strong>  ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</li><li>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</li><li><strong>304 Not Modified</strong>  ：如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</li><li><strong>307 Temporary Redirect</strong>  ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</li></ul><h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><ul><li><strong>400 Bad Request</strong>  ：请求报文中存在语法错误。</li><li><strong>401 Unauthorized</strong>  ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</li><li><strong>403 Forbidden</strong>  ：请求被拒绝。</li><li><strong>404 Not Found</strong></li></ul><h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><ul><li><strong>500 Internal Server Error</strong>  ：服务器正在执行请求时发生错误。</li><li><strong>503 Service Unavailable</strong>  ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h2 id="四、HTTP-首部"><a href="#四、HTTP-首部" class="headerlink" title="四、HTTP 首部"></a>四、HTTP 首部</h2><p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p><p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p><h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Cache-Control</td><td align="center">控制缓存的行为</td></tr><tr><td align="center">Connection</td><td align="center">控制不再转发给代理的首部字段、管理持久连接</td></tr><tr><td align="center">Date</td><td align="center">创建报文的日期时间</td></tr><tr><td align="center">Pragma</td><td align="center">报文指令</td></tr><tr><td align="center">Trailer</td><td align="center">报文末端的首部一览</td></tr><tr><td align="center">Transfer-Encoding</td><td align="center">指定报文主体的传输编码方式</td></tr><tr><td align="center">Upgrade</td><td align="center">升级为其他协议</td></tr><tr><td align="center">Via</td><td align="center">代理服务器的相关信息</td></tr><tr><td align="center">Warning</td><td align="center">错误通知</td></tr></tbody></table><h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Accept</td><td align="center">用户代理可处理的媒体类型</td></tr><tr><td align="center">Accept-Charset</td><td align="center">优先的字符集</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">优先的内容编码</td></tr><tr><td align="center">Accept-Language</td><td align="center">优先的语言（自然语言）</td></tr><tr><td align="center">Authorization</td><td align="center">Web 认证信息</td></tr><tr><td align="center">Expect</td><td align="center">期待服务器的特定行为</td></tr><tr><td align="center">From</td><td align="center">用户的电子邮箱地址</td></tr><tr><td align="center">Host</td><td align="center">请求资源所在服务器</td></tr><tr><td align="center">If-Match</td><td align="center">比较实体标记（ETag）</td></tr><tr><td align="center">If-Modified-Since</td><td align="center">比较资源的更新时间</td></tr><tr><td align="center">If-None-Match</td><td align="center">比较实体标记（与 If-Match 相反）</td></tr><tr><td align="center">If-Range</td><td align="center">资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td align="center">If-Unmodified-Since</td><td align="center">比较资源的更新时间（与 If-Modified-Since 相反）</td></tr><tr><td align="center">Max-Forwards</td><td align="center">最大传输逐跳数</td></tr><tr><td align="center">Proxy-Authorization</td><td align="center">代理服务器要求客户端的认证信息</td></tr><tr><td align="center">Range</td><td align="center">实体的字节范围请求</td></tr><tr><td align="center">Referer</td><td align="center">对请求中 URI 的原始获取方</td></tr><tr><td align="center">TE</td><td align="center">传输编码的优先级</td></tr><tr><td align="center">User-Agent</td><td align="center">HTTP 客户端程序的信息</td></tr></tbody></table><h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Accept-Ranges</td><td align="center">是否接受字节范围请求</td></tr><tr><td align="center">Age</td><td align="center">推算资源创建经过时间</td></tr><tr><td align="center">ETag</td><td align="center">资源的匹配信息</td></tr><tr><td align="center">Location</td><td align="center">令客户端重定向至指定 URI</td></tr><tr><td align="center">Proxy-Authenticate</td><td align="center">代理服务器对客户端的认证信息</td></tr><tr><td align="center">Retry-After</td><td align="center">对再次发起请求的时机要求</td></tr><tr><td align="center">Server</td><td align="center">HTTP 服务器的安装信息</td></tr><tr><td align="center">Vary</td><td align="center">代理服务器缓存的管理信息</td></tr><tr><td align="center">WWW-Authenticate</td><td align="center">服务器对客户端的认证信息</td></tr></tbody></table><h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Allow</td><td align="center">资源可支持的 HTTP 方法</td></tr><tr><td align="center">Content-Encoding</td><td align="center">实体主体适用的编码方式</td></tr><tr><td align="center">Content-Language</td><td align="center">实体主体的自然语言</td></tr><tr><td align="center">Content-Length</td><td align="center">实体主体的大小</td></tr><tr><td align="center">Content-Location</td><td align="center">替代对应资源的 URI</td></tr><tr><td align="center">Content-MD5</td><td align="center">实体主体的报文摘要</td></tr><tr><td align="center">Content-Range</td><td align="center">实体主体的位置范围</td></tr><tr><td align="center">Content-Type</td><td align="center">实体主体的媒体类型</td></tr><tr><td align="center">Expires</td><td align="center">实体主体过期的日期时间</td></tr><tr><td align="center">Last-Modified</td><td align="center">资源的最后修改日期时间</td></tr></tbody></table><h2 id="五、具体应用"><a href="#五、具体应用" class="headerlink" title="五、具体应用"></a>五、具体应用</h2><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162349.png" alt="image"></p><h4 id="1-短连接与长连接"><a href="#1-短连接与长连接" class="headerlink" title="1. 短连接与长连接"></a>1. 短连接与长连接</h4><p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问的 HTML 页面资源，还会请求图片资源。如果每进行一次 HTTP 通信就要新建一个 TCP 连接，那么开销会很大。</p><p>长连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p><ul><li>从 HTTP/1.1 开始默认是长连接的，如果要断开连接，需要由客户端或者服务器端提出断开，使用 <code>Connection : close</code>；</li><li>在 HTTP/1.1 之前默认是短连接的，如果需要使用长连接，则使用 <code>Connection : Keep-Alive</code>。</li></ul><h4 id="2-流水线"><a href="#2-流水线" class="headerlink" title="2. 流水线"></a>2. 流水线</h4><p>默认情况下，HTTP 请求是按顺序发出的，下一个请求只有在当前请求收到响应之后才会被发出。由于受到网络延迟和带宽的限制，在下一个请求被发送到服务器之前，可能需要等待很长时间。</p><p>流水线是在同一条长连接上连续发出请求，而不用等待响应返回，这样可以减少延迟。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p><p>Cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器之后向同一服务器再次发起请求时被携带上，用于告知服务端两个请求是否来自同一浏览器。由于之后每次请求都会需要携带 Cookie 数据，因此会带来额外的性能开销（尤其是在移动环境下）。</p><p>Cookie 曾一度用于客户端数据的存储，因为当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 Web storage API（本地存储和会话存储）或 IndexedDB。</p><h4 id="1-用途"><a href="#1-用途" class="headerlink" title="1. 用途"></a>1. 用途</h4><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）</li></ul><h4 id="2-创建过程"><a href="#2-创建过程" class="headerlink" title="2. 创建过程"></a>2. 创建过程</h4><p>服务器发送的响应报文包含 Set-Cookie 首部字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></tbody></table></figure><p>客户端之后对同一个服务器发送请求时，会从浏览器中取出 Cookie 信息并通过 Cookie 请求首部字段发送给服务器。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></tbody></table></figure><h4 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h4><ul><li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li><li>持久性 Cookie：指定过期时间（Expires）或有效期（max-age）之后就成为了持久性的 Cookie。</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></tbody></table></figure><h4 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h4><p>Domain 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前文档的主机（不包含子域名）。如果指定了 Domain，则一般包含子域名。例如，如果设置 Domain=mozilla.org，则 Cookie 也包含在子域名中（如 developer.mozilla.org）。</p><p>Path 标识指定了主机下的哪些路径可以接受 Cookie（该 URL 路径必须存在于请求 URL 中）。以字符 %x2F (“/“) 作为路径分隔符，子路径也会被匹配。例如，设置 Path=/docs，则以下地址都会匹配：</p><ul><li>/docs</li><li>/docs/Web/</li><li>/docs/Web/HTTP</li></ul><h4 id="5-JavaScript"><a href="#5-JavaScript" class="headerlink" title="5. JavaScript"></a>5. JavaScript</h4><p>浏览器通过 <code>document.cookie</code> 属性可创建新的 Cookie，也可通过该属性访问非 HttpOnly 标记的 Cookie。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.cookie = "yummy_cookie=choco";</span><br><span class="line">document.cookie = "tasty_cookie=strawberry";</span><br><span class="line">console.log(document.cookie);</span><br></pre></td></tr></tbody></table></figure><h4 id="6-HttpOnly"><a href="#6-HttpOnly" class="headerlink" title="6. HttpOnly"></a>6. HttpOnly</h4><p>标记为 HttpOnly 的 Cookie 不能被 JavaScript 脚本调用。跨站脚本攻击 (XSS) 常常使用 JavaScript 的 <code>document.cookie</code> API 窃取用户的 Cookie 信息，因此使用 HttpOnly 标记可以在一定程度上避免 XSS 攻击。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT; Secure; HttpOnly</span><br></pre></td></tr></tbody></table></figure><h4 id="7-Secure"><a href="#7-Secure" class="headerlink" title="7. Secure"></a>7. Secure</h4><p>标记为 Secure 的 Cookie 只能通过被 HTTPS 协议加密过的请求发送给服务端。但即便设置了 Secure 标记，敏感信息也不应该通过 Cookie 传输，因为 Cookie 有其固有的不安全性，Secure 标记也无法提供确实的安全保障。</p><h4 id="8-Session"><a href="#8-Session" class="headerlink" title="8. Session"></a>8. Session</h4><p>除了可以将用户信息通过 Cookie 存储在用户浏览器中，也可以利用 Session 存储在服务器端，存储在服务器端的信息更加安全。</p><p>Session 可以存储在服务器上的文件、数据库或者内存中。也可以将 Session 存储在 Redis 这种内存型数据库中，效率会更高。</p><p>用 Session 维护用户登录状态的过程如下：</p><ul><li>用户进行登录时，用户提交包含用户名和密码的表单，放入 HTTP 请求报文中；</li><li>服务器验证该用户名和密码，如果正确则把用户信息存储到 Redis 中，它在 Redis 中的 Key 称为 Session ID；</li><li>服务器返回的响应报文的 Set-Cookie 首部字段包含了这个 Session ID，客户端收到响应报文之后将该 Cookie 值存入浏览器中；</li><li>客户端之后对同一个服务器进行请求时会包含该 Cookie 值，服务器收到之后提取出 Session ID，从 Redis 中取出用户信息，继续之前的业务操作。</li></ul><p>应该注意 Session ID 的安全性问题，不能让它被恶意攻击者轻易获取，那么就不能产生一个容易被猜到的 Session ID 值。此外，还需要经常重新生成 Session ID。在对安全性要求极高的场景下，例如转账等操作，除了使用 Session 管理用户状态之外，还需要对用户进行重新验证，比如重新输入密码，或者使用短信验证码等方式。</p><h4 id="9-浏览器禁用-Cookie"><a href="#9-浏览器禁用-Cookie" class="headerlink" title="9. 浏览器禁用 Cookie"></a>9. 浏览器禁用 Cookie</h4><p>此时无法使用 Cookie 来保存用户信息，只能使用 Session。除此之外，不能再将 Session ID 存放到 Cookie 中，而是使用 URL 重写技术，将 Session ID 作为 URL 的参数进行传递。</p><h4 id="10-Cookie-与-Session-选择"><a href="#10-Cookie-与-Session-选择" class="headerlink" title="10. Cookie 与 Session 选择"></a>10. Cookie 与 Session 选择</h4><ul><li>Cookie 只能存储 ASCII 码字符串，而 Session 则可以存储任何类型的数据，因此在考虑数据复杂性时首选 Session；</li><li>Cookie 存储在浏览器中，容易被恶意查看。如果非要将一些隐私数据存在 Cookie 中，可以将 Cookie 值进行加密，然后在服务器进行解密；</li><li>对于大型网站，如果用户所有的信息都存储在 Session 中，那么开销是非常大的，因此不建议将所有的用户信息都存储到 Session 中。</li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="1-优点"><a href="#1-优点" class="headerlink" title="1. 优点"></a>1. 优点</h4><ul><li>缓解服务器压力；</li><li>降低客户端获取资源的延迟：缓存通常位于内存中，读取缓存的速度更快。并且缓存服务器在地理位置上也有可能比源服务器来得近，例如浏览器缓存。</li></ul><h4 id="2-实现方法"><a href="#2-实现方法" class="headerlink" title="2. 实现方法"></a>2. 实现方法</h4><ul><li>让代理服务器进行缓存；</li><li>让客户端浏览器进行缓存。</li></ul><h4 id="3-Cache-Control"><a href="#3-Cache-Control" class="headerlink" title="3. Cache-Control"></a>3. Cache-Control</h4><p>HTTP/1.1 通过 Cache-Control 首部字段来控制缓存。</p><p><strong>3.1 禁止进行缓存</strong></p><p>no-tore 指令规定不能对请求或响应的任何一部分进行缓存。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-store</span><br></pre></td></tr></tbody></table></figure><p><strong>3.2 强制确认缓存</strong></p><p>no-cache 指令规定缓存服务器需要先向源服务器验证缓存资源的有效性，只有当缓存资源有效时才能使用该缓存对客户端的请求进行响应。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></tbody></table></figure><p><strong>3.3 私有缓存和公共缓存</strong></p><p>private 指令规定了将资源作为私有缓存，只能被单独用户使用，一般存储在用户浏览器中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: private</span><br></pre></td></tr></tbody></table></figure><p>public 指令规定了将资源作为公共缓存，可以被多个用户使用，一般存储在代理服务器中。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: public</span><br></pre></td></tr></tbody></table></figure><p><strong>3.4 缓存过期机制</strong></p><p>max-age 指令出现在请求报文，并且缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p><p>max-age 指令出现在响应报文，表示缓存资源在缓存服务器中保存的时间。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></tbody></table></figure><p>Exires 首部字段也可以用于告知缓存服务器该资源什么时候会过期。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expires: Wed, 04 Jul 2012 08:26:05 GMT</span><br></pre></td></tr></tbody></table></figure><ul><li>在 HTTP/1.1 中，会优先处理 max-age 指令；</li><li>在 HTTP/1.0 中，max-age 指令会被忽略掉。</li></ul><h4 id="4-缓存验证"><a href="#4-缓存验证" class="headerlink" title="4. 缓存验证"></a>4. 缓存验证</h4><p>需要先了解 ETag 首部字段的含义，它是资源的唯一标识。URL 不能唯一表示资源，例如 <code>http://www.google.com/</code> 有中文和英文两个资源，只有 ETag 才能对这两个资源进行唯一标识。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: "82e22293907ce725faf67773957acd12"</span><br></pre></td></tr></tbody></table></figure><p>可以将缓存资源的 ETag 值放入 If-None-Match 首部，服务器收到该请求后，判断缓存资源的 ETag 值和资源的最新 ETag 值是否一致，如果一致则表示缓存资源有效，返回 304 Not Modified。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-None-Match: "82e22293907ce725faf67773957acd12"</span><br></pre></td></tr></tbody></table></figure><p>Last-Modified 首部字段也可以用于缓存验证，它包含在源服务器发送的响应报文中，指示源服务器对资源的最后修改时间。但是它是一种弱校验器，因为只能精确到一秒，所以它通常作为 ETag 的备用方案。如果响应首部字段里含有这个信息，客户端可以在后续的请求中带上 If-Modified-Since 来验证缓存。服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200 OK。如果请求的资源从那时起未经修改，那么返回一个不带有实体主体的 304 Not Modified 响应报文。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></tbody></table></figure><h3 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h3><p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p><h4 id="1-类型"><a href="#1-类型" class="headerlink" title="1. 类型"></a>1. 类型</h4><p><strong>1.1 服务端驱动型</strong></p><p>客户端设置特定的 HTTP 首部字段，例如 Accept、Accept-Charset、Accept-Encoding、Accept-Language，服务器根据这些字段返回特定的资源。</p><p>它存在以下问题：</p><ul><li>服务器很难知道客户端浏览器的全部信息；</li><li>客户端提供的信息相当冗长（HTTP/2 协议的首部压缩机制缓解了这个问题），并且存在隐私风险（HTTP 指纹识别技术）；</li><li>给定的资源需要返回不同的展现形式，共享缓存的效率会降低，而服务器端的实现会越来越复杂。</li></ul><p><strong>1.2 代理驱动型</strong></p><p>服务器返回 300 Multiple Choices 或者 406 Not Acceptable，客户端从中选出最合适的那个资源。</p><h4 id="2-Vary"><a href="#2-Vary" class="headerlink" title="2. Vary"></a>2. Vary</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vary: Accept-Language</span><br></pre></td></tr></tbody></table></figure><p>在使用内容协商的情况下，只有当缓存服务器中的缓存满足内容协商条件时，才能使用该缓存，否则应该向源服务器请求该资源。</p><p>例如，一个客户端发送了一个包含 Accept-Language 首部字段的请求之后，源服务器返回的响应包含 <code>Vary: Accept-Language</code> 内容，缓存服务器对这个响应进行缓存之后，在客户端下一次访问同一个 URL 资源，并且 Accept-Language 与缓存中的对应的值相同时才会返回该缓存。</p><h3 id="内容编码"><a href="#内容编码" class="headerlink" title="内容编码"></a>内容编码</h3><p>内容编码将实体主体进行压缩，从而减少传输的数据量。</p><p>常用的内容编码有：gzip、compress、deflate、identity。</p><p>浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级。服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，响应报文的 Vary 首部字段至少要包含 Content-Encoding。</p><h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p>如果网络出现中断，服务器只发送了一部分数据，范围请求可以使得客户端只请求服务器未发送的那部分数据，从而避免服务器重新发送所有数据。</p><h4 id="1-Range"><a href="#1-Range" class="headerlink" title="1. Range"></a>1. Range</h4><p>在请求报文中添加 Range 首部字段指定请求的范围。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></tbody></table></figure><p>请求成功的话服务器返回的响应包含 206 Partial Content 状态码。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></tbody></table></figure><h4 id="2-Accept-Ranges"><a href="#2-Accept-Ranges" class="headerlink" title="2. Accept-Ranges"></a>2. Accept-Ranges</h4><p>响应首部字段 Accept-Ranges 用于告知客户端是否能处理范围请求，可以处理使用 bytes，否则使用 none。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></tbody></table></figure><h4 id="3-响应状态码"><a href="#3-响应状态码" class="headerlink" title="3. 响应状态码"></a>3. 响应状态码</h4><ul><li>在请求成功的情况下，服务器会返回 206 Partial Content 状态码。</li><li>在请求的范围越界的情况下，服务器会返回 416 Requested Range Not Satisfiable 状态码。</li><li>在不支持范围请求的情况下，服务器会返回 200 OK 状态码。</li></ul><h3 id="分块传输编码"><a href="#分块传输编码" class="headerlink" title="分块传输编码"></a>分块传输编码</h3><p>Chunked Transfer Encoding，可以把数据分割成多块，让浏览器逐步显示页面。</p><h3 id="多部分对象集合"><a href="#多部分对象集合" class="headerlink" title="多部分对象集合"></a>多部分对象集合</h3><p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p><p>例如，上传多个表单时可以使用如下方式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="submit-name"</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></tbody></table></figure><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>HTTP/1.1 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p><h3 id="通信数据转发"><a href="#通信数据转发" class="headerlink" title="通信数据转发"></a>通信数据转发</h3><h4 id="1-代理"><a href="#1-代理" class="headerlink" title="1. 代理"></a>1. 代理</h4><p>代理服务器接受客户端的请求，并且转发给其它服务器。</p><p>使用代理的主要目的是：</p><ul><li>缓存</li><li>负载均衡</li><li>网络访问控制</li><li>访问日志记录</li></ul><p>代理服务器分为正向代理和反向代理两种：</p><ul><li>用户察觉得到正向代理的存在。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162424.png" alt="image"></p><ul><li>而反向代理一般位于内部网络中，用户察觉不到。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162430.png" alt="image"></p><h4 id="2-网关"><a href="#2-网关" class="headerlink" title="2. 网关"></a>2. 网关</h4><p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p><h4 id="3-隧道"><a href="#3-隧道" class="headerlink" title="3. 隧道"></a>3. 隧道</h4><p>使用 SSL 等加密手段，在客户端和服务器之间建立一条安全的通信线路。</p><h2 id="六、HTTPS"><a href="#六、HTTPS" class="headerlink" title="六、HTTPS"></a>六、HTTPS</h2><p>HTTP 有以下安全性问题：</p><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。</p><p>通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162437.jpeg" alt="image"></p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><h4 id="1-对称密钥加密"><a href="#1-对称密钥加密" class="headerlink" title="1. 对称密钥加密"></a>1. 对称密钥加密</h4><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。</p><ul><li>优点：运算速度快；</li><li>缺点：无法安全地将密钥传输给通信方。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162449.png" alt="image"></p><h4 id="2-非对称密钥加密"><a href="#2-非对称密钥加密" class="headerlink" title="2.非对称密钥加密"></a>2.非对称密钥加密</h4><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p><ul><li>优点：可以更安全地将公开密钥传输给通信发送方；</li><li>缺点：运算速度慢。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162453.png" alt="image"></p><h4 id="3-HTTPS-采用的加密方式"><a href="#3-HTTPS-采用的加密方式" class="headerlink" title="3. HTTPS 采用的加密方式"></a>3. HTTPS 采用的加密方式</h4><p>上面提到对称密钥加密方式的传输效率更高，但是无法安全地将密钥 Secret Key 传输给通信方。而非对称密钥加密方式可以保证传输的安全性，因此我们可以利用非对称密钥加密方式将 Secret Key  传输给通信方。HTTPS 采用混合的加密机制，正是利用了上面提到的方案：</p><ul><li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性;</li><li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key）</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162457.png" alt="image"></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>通过使用  <strong>证书</strong>  来对通信方进行认证。</p><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p><p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p><p>进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162501.png" alt="image"></p><h3 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h3><p>SSL 提供报文摘要功能来进行完整性保护。</p><p>HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</p><p>HTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。</p><h3 id="HTTPS-的缺点"><a href="#HTTPS-的缺点" class="headerlink" title="HTTPS 的缺点"></a>HTTPS 的缺点</h3><ul><li>因为需要进行加密解密等过程，因此速度会更慢；</li><li>需要支付证书授权的高额费用。</li></ul><h2 id="七、HTTP-2-0"><a href="#七、HTTP-2-0" class="headerlink" title="七、HTTP/2.0"></a>七、HTTP/2.0</h2><h3 id="HTTP-1-x-缺陷"><a href="#HTTP-1-x-缺陷" class="headerlink" title="HTTP/1.x 缺陷"></a>HTTP/1.x 缺陷</h3><p>HTTP/1.x 实现简单是以牺牲性能为代价的：</p><ul><li>客户端需要使用多个连接才能实现并发和缩短延迟；</li><li>不会压缩请求和响应首部，从而导致不必要的网络流量；</li><li>不支持有效的资源优先级，致使底层 TCP 连接的利用率低下。</li></ul><h3 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h3><p>HTTP/2.0 将报文分成 HEADERS 帧和 DATA 帧，它们都是二进制格式的。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162506.png" alt="image"></p><p>在通信过程中，只会有一个 TCP 连接存在，它承载了任意数量的双向数据流（Stream）。</p><ul><li>一个数据流（Stream）都有一个唯一标识符和可选的优先级信息，用于承载双向信息。</li><li>消息（Message）是与逻辑请求或响应对应的完整的一系列帧。</li><li>帧（Frame）是最小的通信单位，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装。</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162511.png" alt="image"></p><h3 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h3><p>HTTP/2.0 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 page.html 页面，服务端就把 script.js 和 style.css 等与之相关的资源一起发给客户端。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162515.png" alt="image"></p><h3 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h3><p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。</p><p>HTTP/2.0 要求客户端和服务器同时维护和更新一个包含之前见过的首部字段表，从而避免了重复传输。</p><p>不仅如此，HTTP/2.0 也使用 Huffman 编码对首部字段进行压缩。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201129162520.png" alt="image"></p><h2 id="八、HTTP-1-1-新特性"><a href="#八、HTTP-1-1-新特性" class="headerlink" title="八、HTTP/1.1 新特性"></a>八、HTTP/1.1 新特性</h2><p>详细内容请见上文</p><ul><li>默认是长连接</li><li>支持流水线</li><li>支持同时打开多个 TCP 连接</li><li>支持虚拟主机</li><li>新增状态码 100</li><li>支持分块传输编码</li><li>新增缓存处理指令 max-age</li></ul><h2 id="九、GET-和-POST-比较"><a href="#九、GET-和-POST-比较" class="headerlink" title="九、GET 和 POST 比较"></a>九、GET 和 POST 比较</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>GET 用于获取资源，而 POST 用于传输实体主体。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在实体主体中。不能因为 POST 参数存储在实体主体中就认为它的安全性更高，因为照样可以通过一些抓包工具（Fiddler）查看。</p><p>因为 URL 只支持 ASCII 码，因此 GET 的参数中如果存在中文等字符就需要先进行编码。例如 <code>中文</code> 会转换为 <code>%E4%B8%AD%E6%96%87</code>，而空格会转换为 <code>%20</code>。POST 参数支持标准字符集。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /test/demo_form.asp?name1=value1&amp;name2=value2 HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /test/demo_form.asp HTTP/1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></tbody></table></figure><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。</p><p>GET 方法是安全的，而 POST 却不是，因为 POST 的目的是传送实体主体内容，这个内容可能是用户上传的表单数据，上传成功之后，服务器可能把这个数据存储到数据库中，因此状态也就发生了改变。</p><p>安全的方法除了 GET 之外还有：HEAD、OPTIONS。</p><p>不安全的方法除了 POST 之外还有 PUT、DELETE。</p><h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><p>幂等的 HTTP 方法，同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。换句话说就是，幂等方法不应该具有副作用（统计用途除外）。</p><p>所有的安全方法也都是幂等的。</p><p>在正确实现的条件下，GET，HEAD，PUT 和 DELETE 等方法都是幂等的，而 POST 方法不是。</p><p>GET /pageX HTTP/1.1 是幂等的，连续调用多次，客户端接收到的结果都是一样的：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br><span class="line">GET /pageX HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><p>POST /add_row HTTP/1.1 不是幂等的，如果调用多次，就会增加多行记录：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 1nd row</span><br><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 2nd row</span><br><span class="line">POST /add_row HTTP/1.1   -&gt; Adds a 3rd row</span><br></pre></td></tr></tbody></table></figure><p>DELETE /idX/delete HTTP/1.1 是幂等的，即使不同的请求接收到的状态码不一样：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 200 if idX exists</span><br><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 404 as it just got deleted</span><br><span class="line">DELETE /idX/delete HTTP/1.1   -&gt; Returns 404</span><br></pre></td></tr></tbody></table></figure><h3 id="可缓存"><a href="#可缓存" class="headerlink" title="可缓存"></a>可缓存</h3><p>如果要对响应进行缓存，需要满足以下条件：</p><ul><li>请求报文的 HTTP 方法本身是可缓存的，包括 GET 和 HEAD，但是 PUT 和 DELETE 不可缓存，POST 在多数情况下不可缓存的。</li><li>响应报文的状态码是可缓存的，包括：200, 203, 204, 206, 300, 301, 404, 405, 410, 414, and 501。</li><li>响应报文的 Cache-Control 首部字段没有指定不进行缓存。</li></ul><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>为了阐述 POST 和 GET 的另一个区别，需要先了解 XMLHttpRequest：</p><blockquote><p>XMLHttpRequest 是一个 API，它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 AJAX 中被大量使用。</p></blockquote><ul><li>在使用 XMLHttpRequest 的 POST 方法时，浏览器会先发送 Header 再发送 Data。但并不是所有浏览器会这么做，例如火狐就不会。</li><li>而 GET 方法 Header 和 Data 会一起发送。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode总结—二叉树的遍历</title>
      <link href="/2020/11/27/er-cha-shu-de-bian-li/"/>
      <url>/2020/11/27/er-cha-shu-de-bian-li/</url>
      
        <content type="html"><![CDATA[<p>二叉树是面试中常见的题目类型，这里，针对 leetcode 前200道题中的二叉树相关问题进行总结与思考，力求烂熟于心，能根据题目名回忆起题目的具体描述，进而用简洁的语言描述出算法的核心。具体的题目答案可打开 leetcode 查看历史提交记录。</p><h2 id="二叉树的遍历（binary-tree-traversal）"><a href="#二叉树的遍历（binary-tree-traversal）" class="headerlink" title="二叉树的遍历（binary-tree-traversal）"></a>二叉树的遍历（binary-tree-traversal）</h2><blockquote><p>二叉树的遍历是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p></blockquote><p><strong>为什么研究二叉树的遍历？</strong></p><p>因为计算机只会处理线性序列，而我们研究遍历，就是把树中的结点变成某种意义的线性序列，这给程序的实现带来了好处。</p><h2 id="1-三种基本遍历方式"><a href="#1-三种基本遍历方式" class="headerlink" title="1 三种基本遍历方式"></a>1 三种基本遍历方式</h2><p>首先是二叉树的遍历方式，最简单基础的也就是前序(preorder)、中序(inorder)、后序(postorder)三种遍历方式，对应题目 <a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144.二叉树的前序遍历</a> 、<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a> 、<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/">145. 二叉树的后序遍历</a>。</p><blockquote><p>前中后，指的是根节点相对于左右结点的访问顺序</p></blockquote><p><strong>先序：</strong>考察到一个节点后，即刻输出该节点的值，并继续遍历其左右子树。(根左右)</p><p><strong>中序：</strong>考察到一个节点后，将其暂存，遍历完左子树后，再输出该节点的值，然后遍历右子树。(左根右)</p><p><strong>后序：</strong>考察到一个节点后，将其暂存，遍历完左右子树后，再输出该节点的值。(左右根)</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165620.png" alt="image"></p><p><strong>这种类型的题一般都是有两种解题思路：递归和迭代。</strong></p><h3 id="1-1-递归法模板"><a href="#1-1-递归法模板" class="headerlink" title="1.1 递归法模板"></a>1.1 递归法模板</h3><blockquote><p>我们并不需要太过于在意具体的递归过程，而是要想清楚让计算机干什么。计算机都可能溢出，用人脑去遍历就不现实了。</p></blockquote><p>思路： 判断什么时候把结点的 <code>val</code> 加入 <code>res</code> 数组中，<code>res.add(root.val)</code>放的位置决定了遍历顺序。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">边界条件</span><br><span class="line"></span><br><span class="line">定义 dfs 函数：</span><br><span class="line">    如果root为空：返回</span><br><span class="line">    递归左子树</span><br><span class="line">    递归右子树</span><br><span class="line">    <span class="comment">// root 的值加入到结果</span></span><br><span class="line"></span><br><span class="line">执行递归函数，返回结果</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        helper(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;    </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 递归主程序</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span>  <span class="title">helper</span><span class="params">(TreeNode root,List&lt;Integer&gt; res)</span> </span>{</span><br><span class="line">        <span class="comment">// 判断root是否为空，是一个重要的递归终止的条件。</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// res.add(root.val);</span></span><br><span class="line">        helper(root.left,res);</span><br><span class="line">        helper(root.right,res);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>一样的代码，稍微调用一下位置就可以，如此固定的套路，使得只掌握递归解法并不足以令面试官信服=`=所以必须掌握迭代法加深对二叉树的理解！！</p><h3 id="1-2-迭代法模板"><a href="#1-2-迭代法模板" class="headerlink" title="1.2 迭代法模板"></a>1.2 迭代法模板</h3><p>本质上是在模拟递归，因为在递归的过程中使用了系统栈，所以在迭代的解法中常用<code>Stack</code>来模拟系统栈。</p><p><strong>思路：</strong>用<code>while</code>循环先将根节点和所有左孩子加入栈和结果数组中，直至<code>cur</code>为空。然后，每弹出一个栈顶元素 <code>tmp</code>，就到达它的右孩子，再将这个节点当作 <code>cur</code> 重新按上面的步骤来一遍，直至栈为空。这里又需要一个 <code>while</code> 循环。</p><p>使用这个迭代模板处理前序和中序遍历，只要更改 <code>res.add(cur.val)</code> 的位置即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">边界条件</span><br><span class="line">    </span><br><span class="line">初始化stack,res,cur</span><br><span class="line"><span class="keyword">while</span> stack或cur 非空：</span><br><span class="line">    <span class="keyword">while</span> cur非空：</span><br><span class="line">        cur的值入栈stack</span><br><span class="line">        <span class="comment">// cur的值加入res 前序</span></span><br><span class="line">        cur 向左下或右下遍历</span><br><span class="line">    弹出节点tmp</span><br><span class="line">    cur回到tmp的左或右子树</span><br><span class="line">        </span><br><span class="line">返回结果</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>||!stack.isEmpty()){</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                <span class="comment">//res.add(cur.val);前序</span></span><br><span class="line">                cur=cur.left;</span><br><span class="line">            }</span><br><span class="line">            tmp=stack.pop();</span><br><span class="line">            <span class="comment">//res.add(tmp.val);中序</span></span><br><span class="line">            cur=tmp.right;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>但是后序并不能使用，取巧的方法是使用模板(根右左)，对其取反<code>Collections.reverse(res)</code>就是后序遍历的结果(左右根)</p><blockquote><p>利用了结果的特点反向输出，不免显得技术含量不足，因此掌握后序遍历标准的栈操作解法是必要的！</p></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        TreeNode p=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span> || !stack.isEmpty()){</span><br><span class="line">            <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur=cur.left;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//peek不删除栈顶，pop删除</span></span><br><span class="line">            cur=stack.peek();</span><br><span class="line">            <span class="comment">// 一种情况是cur为最下面的子节点，需要加入到res，另一种是当前为遍历过右子树的根节点也需要加入到res</span></span><br><span class="line">            <span class="keyword">if</span>(cur.right==<span class="keyword">null</span>||cur.right==p){</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">                stack.pop();</span><br><span class="line">                p=cur;</span><br><span class="line">                cur=<span class="keyword">null</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                cur=cur.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-层序遍历及其变题"><a href="#2-层序遍历及其变题" class="headerlink" title="2 层序遍历及其变题"></a>2 层序遍历及其变题</h2><p>除了基本的三种遍历使用DFS，使用BFS广度优先搜索的层序遍历也很重要<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p><p>下面是两种解决此类问题的方法，一般使用左边的BFS</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165618.png" alt="image.png"></p><h3 id="2-1-BFS层序遍历"><a href="#2-1-BFS层序遍历" class="headerlink" title="2.1 BFS层序遍历"></a>2.1 BFS层序遍历</h3><p>BFS遍历的标准写法如下，使用的是<strong>队列</strong>数据结构：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    queue.add(root);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">        TreeNode node = queue.poll(); <span class="comment">// Queue 中 remove() 和 poll()都是用来从队列头部删除一个元素。</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">            queue.add(node.left);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">            queue.add(node.right);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们可以直接用 BFS 得出层序遍历结果。然而，层序遍历要求的输入结果和 BFS 是不同的。层序遍历要求我们区分每一层，也就是返回一个二维数组。而 BFS 的遍历结果是一个一维数组，无法区分每一层，见下图的对比。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165619.jpeg" alt="image"></p><p>因此，我们需要在每一层前微修改一下代码，在每一层遍历开始前，先记录队列中的结点数量 n（也就是这一层的节点数量），然后一口气处理完这一层的 n个结点。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) {</span><br><span class="line">        queue.add(root);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) {</span><br><span class="line">        <span class="keyword">int</span> n = queue.size();</span><br><span class="line">        List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) { </span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            level.add(node.val);</span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) {</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) {</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        res.add(level);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样，我们就可以用BFS来解决层序遍历问题了，<strong>重点是记录了每一层节点的数量，动图如下</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165622.gif" alt="image"></p><h3 id="2-2-选看-DFS层序遍历"><a href="#2-2-选看-DFS层序遍历" class="headerlink" title="2.2 (选看)DFS层序遍历"></a>2.2 (选看)DFS层序遍历</h3><p>DFS 遍历标准写法如下，使用的是<strong>递归</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    dfs(root.left);</span><br><span class="line">    dfs(root.right);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>看起来比BFS的代码简洁很多，但观看下图就可以发现两者的遍历顺序是不同的，BFS其实更贴近我们想要的层序遍历逻辑。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165621.gif" alt="image"></p><p>那DFS究竟可不可以解决层序遍历问题呢？当然是可以的！</p><p>把这个二叉树的样子调整一下，摆成一个田字形的样子。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165623.jpeg" alt="image"><br><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165626.gif" alt="image"></p><p>田字形的每一层就对应一个 list，每次递归的时候都需要<strong>带一个 index(表示当前的层数)</strong>，也就对应那个田字格子中的第几行，如果当前行对应的 list 不存在，就加入一个空 list 进去。代码实现如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//用来存放最终结果</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        dfs(<span class="number">1</span>,root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index,TreeNode root, List&lt;List&lt;Integer&gt;&gt; res)</span> </span>{</span><br><span class="line">        <span class="comment">//假设res是[ [1],[2,3] ]， index是3，就再插入一个空list放到res中</span></span><br><span class="line">        <span class="keyword">if</span>(res.size()&lt;index) {</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//将当前节点的值加入到res中，index代表当前层，假设index是3，节点值是99</span></span><br><span class="line">        <span class="comment">//res是[ [1],[2,3] [4] ]，加入后res就变为 [ [1],[2,3] [4,99] ]</span></span><br><span class="line">        res.get(index-<span class="number">1</span>).add(root.val);</span><br><span class="line">        <span class="comment">//递归的处理左子树，右子树，同时将层数index+1</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>) {</span><br><span class="line">            dfs(index+<span class="number">1</span>, root.left, res);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="keyword">null</span>) {</span><br><span class="line">            dfs(index+<span class="number">1</span>, root.right, res);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>感觉有点像二叉树的前序遍历，根左右</p><h3 id="2-3-变题-二叉树的锯齿形层次遍历"><a href="#2-3-变题-二叉树的锯齿形层次遍历" class="headerlink" title="2.3 (变题) 二叉树的锯齿形层次遍历"></a>2.3 (变题) <a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">二叉树的锯齿形层次遍历</a></h3><p>该题是leetcode103题，medium难度，一句话题干描述：层序遍历，不过是之字形的。</p><p>总体思路：用个变量flag来判断是从左往右还是从右往左打印</p><p><strong>解决方案1(容易理解)：</strong> 在层序遍历代码的基础上，更改节点数值进入list的顺序</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (leftToRight) {</span><br><span class="line">    level.add(node.val);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    level.add(<span class="number">0</span>, node.val);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案2(画图理解)：</strong> 使用deuqe双端队列：可以在两边同时添加和删除的队列</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (leftToRight) {</span><br><span class="line">    <span class="comment">//从左边往右边打印</span></span><br><span class="line">    <span class="comment">//移除队列头部的元素，如果子节点不为空加入到队列的尾部</span></span><br><span class="line">    cur = deque.removeFirst();</span><br><span class="line">    <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)</span><br><span class="line">        deque.addLast(cur.right);</span><br><span class="line">    <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)</span><br><span class="line">        deque.addLast(cur.left);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    <span class="comment">//从右边往左边打印</span></span><br><span class="line">    <span class="comment">//移除队列尾部的元素，如果子节点不为空加入到队列的头部</span></span><br><span class="line">    cur = deque.removeLast();</span><br><span class="line">    <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>)</span><br><span class="line">        deque.addFirst(cur.left);</span><br><span class="line">    <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>)</span><br><span class="line">        deque.addFirst(cur.right);</span><br><span class="line">}</span><br><span class="line">level.add(cur.val);</span><br></pre></td></tr></tbody></table></figure><p>deque中把每一行的节点值反序列表示，然后每次打印判断从左往右读deque还是从右往左。读的时候相应的也要改变左右孩子入队列的顺序来保持 deque中每一行的节点值反序表示。</p><h3 id="2-4-变题-二叉树的右视图"><a href="#2-4-变题-二叉树的右视图" class="headerlink" title="2.4 (变题) 二叉树的右视图"></a>2.4 (变题) <a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/">二叉树的右视图</a></h3><p>该题是leetcode199题，medium难度，一句话题干描述：从上到下返回每一层最后一个元素</p><p>总体思路：利用 BFS 进行层次遍历，记录下每层的最后一个元素。</p><p><strong>解决方案1(BFS)：</strong> 在层序遍历代码基础上，判断当前节点是不是这层的最后一个节点，是的话才添加进结果数组。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(i==n-<span class="number">1</span>) res.add(cur.val);</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案2(DFS)：</strong>我们按照 「根结点 -&gt; 右子树 -&gt; 左子树」 的顺序访问，就可以保证每层都是最先访问最右边的节点的。（与先序遍历 「根结点 -&gt; 左子树 -&gt; 右子树」 正好相反，先序遍历每层最先访问的是最左边的节点）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    List&lt;Integer&gt; res= <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">rightSideView</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        dfs(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root,<span class="keyword">int</span> depth)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(depth==res.size()){</span><br><span class="line">            res.add(root.val);</span><br><span class="line">        }</span><br><span class="line">        depth++;</span><br><span class="line">        dfs(root.right,depth);</span><br><span class="line">        dfs(root.left,depth);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-5-变题-填充每个节点的下一个右侧节点指针"><a href="#2-5-变题-填充每个节点的下一个右侧节点指针" class="headerlink" title="2.5 (变题) 填充每个节点的下一个右侧节点指针"></a>2.5 (变题) <a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/">填充每个节点的下一个右侧节点指针</a></h3><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165624.png" alt="image"></p><p>该题是leetcode116题，medium难度，一句话题干描述：使得每个节点的next指针指向它右侧的节点<strong>(完全二叉树)</strong></p><p>总体思路：利用 BFS 进行层次遍历队列，队列中保存了第 i 层节点的信息，我们利用这个特点，将队列中的元素都串联一遍就可以了。</p><p><strong>解决方案1(基础版)：</strong>使用队列<strong>，</strong>直接把层序遍历的代码改一改， 把每一层的节点连接起来,这种方法同样适用于不是完全二叉树的情况。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">    <span class="keyword">int</span> size=queue.size();</span><br><span class="line">    <span class="comment">//前一个节点</span></span><br><span class="line">    Node pre = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) {</span><br><span class="line">        <span class="comment">//出队</span></span><br><span class="line">        Node node = queue.poll();</span><br><span class="line">        <span class="comment">//如果pre为空就表示node节点是这一行的第一个，</span></span><br><span class="line">        <span class="comment">//没有前一个节点指向他，否则就让前一个节点指向他</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="keyword">null</span>) {</span><br><span class="line">            pre.next = node;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//然后再让当前节点成为前一个节点</span></span><br><span class="line">        pre = node;</span><br><span class="line">        <span class="comment">//层序遍历的代码：左右子节点如果不为空就入队</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</span><br><span class="line">            queue.add(node.left);</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</span><br><span class="line">            queue.add(node.right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面运行效率并不是很高，这是因为我们把节点不停的入队然后再不停的出队，其实可以不需要队列，每一行都可以看成一个链表比如第一行就是只有一个节点的链表，第二行是只有两个节点的链表</p><p><strong>解决方案2(优化版)：</strong>观察这样的串联树可以发现，有两种了连接方式</p><ol><li>两个串联的节点都有一个共同的父节点，通过父节点就可以将这两个子节点串联起来</li><li>这两个串联的节点的父节点不同，对于这种情况，如果我们能将这一层的上一层串联好。那么可以通过父节点的 <code>next</code> 找到邻居，完成串联。即 <code>root.right.next =&gt; root.next.left</code>，这里我们需要保证 root.next 不为空就可以了。</li></ol><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165625.gif" alt="image"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Node pre=root;</span><br><span class="line"><span class="comment">//当前节点的left为空则退出循环</span></span><br><span class="line"><span class="keyword">while</span>(pre.left!=<span class="keyword">null</span>){</span><br><span class="line">    Node tmp=pre;</span><br><span class="line">    <span class="comment">// 这层连接完成，则退出</span></span><br><span class="line">    <span class="keyword">while</span>(tmp!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="comment">//将tmp的左右节点都串联起来</span></span><br><span class="line">        <span class="comment">//注:外层循环已经判断了当前节点的left不为空</span></span><br><span class="line">        tmp.left.next = tmp.right;</span><br><span class="line">        <span class="comment">//下一个不为空说明上一层已经帮我们完成串联了</span></span><br><span class="line">        <span class="keyword">if</span>(tmp.next!=<span class="keyword">null</span>) {</span><br><span class="line">            tmp.right.next = tmp.next.left;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//继续右边遍历</span></span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//从下一层的最左边开始遍历</span></span><br><span class="line">    pre = pre.left;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>解决方案3(递归骚操作)：</strong>递归从上往下，先处理当前节点，再处理它的左、右子树中的节点——前序遍历。</p><p>递归终止条件：当遍历到叶子节点，没有孩子节点。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165627.png" alt="image"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>{</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node root)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(root.left!=<span class="keyword">null</span>){</span><br><span class="line">        root.left.next = root.right;</span><br><span class="line">        <span class="keyword">if</span> (root.next!=<span class="keyword">null</span>){</span><br><span class="line">            root.right.next = root.next.left;</span><br><span class="line">        }     </span><br><span class="line">    }</span><br><span class="line">    connect(root.left);</span><br><span class="line">    connect(root.right);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 更牛逼的写法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Node node, Node next)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span>(node != <span class="keyword">null</span>) {</span><br><span class="line">        node.next = next;</span><br><span class="line">        dfs(node.left, node.right);</span><br><span class="line">        dfs(node.right, node.next != <span class="keyword">null</span> ? node.next.left : <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结：**</strong>每个 node 左子树的 next , 就是 node 的右子树、每个 node 右子树的 next, 就是 node next 的 左子树**</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-6-变题-填充每个节点的下一个右侧节点指针II"><a href="#2-6-变题-填充每个节点的下一个右侧节点指针II" class="headerlink" title="2.6 (变题) 填充每个节点的下一个右侧节点指针II"></a>2.6 (变题) <a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/">填充每个节点的下一个右侧节点指针II</a></h3><p>该题是leetcode117题，medium难度，一句话题干描述：使得每个节点的next指针指向它右侧的节点<strong>(非完全二叉树)</strong></p><p>总体思路：和上一题一样的思路</p><p><strong>解决方案1(基础版)：</strong>使用队列<strong>，</strong>直接把层序遍历的代码改一改， 把每一层的节点连接起来,同上一题代码，略。</p><p><strong>解决方案2(优化版)：</strong>更改上一题的相关代码，增加哑节点(找到下一层的第一个节点)，此代码也可用于上题</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201128165537.png" alt="image"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Node cur=root;</span><br><span class="line"><span class="comment">//当前节点的left为空则退出循环</span></span><br><span class="line"><span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</span><br><span class="line">    Node dummy = <span class="keyword">new</span> Node(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//pre表示访下一层节点的前一个节点</span></span><br><span class="line">    Node pre = dummy;</span><br><span class="line">    <span class="comment">// 这层连接完成，则退出</span></span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span>){</span><br><span class="line">        <span class="comment">//如果当前节点的左子节点不为空，就让pre节点的next指向他，也就是把它串起来</span></span><br><span class="line">        <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>){</span><br><span class="line">            pre.next=cur.left;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>){</span><br><span class="line">            pre.next=cur.right;</span><br><span class="line">            pre=pre.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//继续访问这一行的下一个节点</span></span><br><span class="line">        cur = cur.next;</span><br><span class="line">    }</span><br><span class="line">   <span class="comment">//把下一层串联成一个链表之后，让他赋值给cur，后续继续循环，直到cur为空为止</span></span><br><span class="line">   cur = dummy.next;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>此外，除了这些题外，还有以下题</p><p><a href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/">637.二叉树的层平均值</a></p><p><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429.N叉树的前序遍历</a></p><p><a href="https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/">515.在每个树行中找最大值</a></p><p>参考资料：leetcode题解，感谢这些大佬的配图以及易懂的语言！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/11/26/linux-chang-yong-ming-ling/"/>
      <url>/2020/11/26/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="一、文件-文件夹管理"><a href="#一、文件-文件夹管理" class="headerlink" title="一、文件/文件夹管理"></a><strong>一、文件/文件夹管理</strong></h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出当前目录文件（不包括隐含文件） </span></span><br><span class="line">ls </span><br><span class="line"><span class="comment">#列出当前目录文件（包括隐含文件）</span></span><br><span class="line">ls -a  </span><br><span class="line"><span class="comment">#列出当前目录下文件的详细信息 </span></span><br><span class="line">ls -l </span><br><span class="line"><span class="comment">#筛选命令，比如我想查找当前目录下的 markdown 文件</span></span><br><span class="line">ls -lh | grep .md</span><br><span class="line"></span><br><span class="line"><span class="comment">#回当前用户的宿主目录 </span></span><br><span class="line"><span class="built_in">cd</span></span><br><span class="line"><span class="comment">#回当前目录的上一级目录 </span></span><br><span class="line"><span class="built_in">cd</span> .. </span><br><span class="line"><span class="comment">#回上一次所在的目录 </span></span><br><span class="line"><span class="built_in">cd</span> - </span><br><span class="line"><span class="comment">#来指出当前所在的路径</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个目录 </span></span><br><span class="line">mkdir 目录名 </span><br><span class="line"><span class="comment">#删除一个空目录 </span></span><br><span class="line">rmdir 空目录名 </span><br><span class="line"><span class="comment">#删除一个文件或多个文件 </span></span><br><span class="line">rm 文件名 文件名 </span><br><span class="line"><span class="comment">#删除一个非空目录下的一切 </span></span><br><span class="line">rm -rf 非空目录名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建空文件</span></span><br><span class="line">touch 文件名</span><br><span class="line"><span class="comment">#删除文件</span></span><br><span class="line">rm -rf 文件名</span><br><span class="line"><span class="comment">#查看文件</span></span><br><span class="line">cat 文件名【显示全部内容，文件太大无法全部显示】</span><br><span class="line">cat -n 文件名 【查看内容，并添加行号】</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝到目标位置，或者新位置</span></span><br><span class="line">cp原文件名或目录名 目标位置 </span><br><span class="line">mv 原文件名或目录名 新文件名或目录</span><br></pre></td></tr></tbody></table></figure><h2 id="二、系统信息管理"><a href="#二、系统信息管理" class="headerlink" title="二、系统信息管理"></a><strong>二、系统信息管理</strong></h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看内核版本 </span></span><br><span class="line">uname -a </span><br><span class="line"><span class="comment">#查看ubuntu版本 </span></span><br><span class="line">cat /etc/issue </span><br><span class="line"><span class="comment">#查看CPU信息 </span></span><br><span class="line">cat /proc/cpuinfo </span><br><span class="line"><span class="comment">#查看usb设备 </span></span><br><span class="line">lsusb </span><br><span class="line"><span class="comment">#查看PCI设备 </span></span><br><span class="line">lspci</span><br><span class="line"><span class="comment">#查看网络信息</span></span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment">#查看磁盘信息 </span></span><br><span class="line">sudo fdisk -l </span><br><span class="line"><span class="comment">#查看硬盘剩余空间</span></span><br><span class="line">df -h  </span><br><span class="line"><span class="comment">#查看当前的内存使用情况 </span></span><br><span class="line">free -m</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前有哪些进程 </span></span><br><span class="line">ps -A </span><br><span class="line"><span class="comment">#(就是ps -A中的第一列的数字)或者 killall 进程名( 杀死一个进程) </span></span><br><span class="line"><span class="built_in">kill</span> 进程号</span><br><span class="line"><span class="comment">#强制杀死一个进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 进程号  </span><br><span class="line"></span><br><span class="line"><span class="comment">#更改系统用户密码</span></span><br><span class="line">sudo passwd root </span><br><span class="line"></span><br><span class="line"><span class="comment">#进入root权限</span></span><br><span class="line">sudo su</span><br><span class="line"></span><br><span class="line"><span class="comment">#从服务器上同步时间 </span></span><br><span class="line">sudo ntpdate time.nist.gov </span><br><span class="line">sudo ntpdate time.windows.com </span><br></pre></td></tr></tbody></table></figure><h2 id="三、压缩文件处理"><a href="#三、压缩文件处理" class="headerlink" title="三、压缩文件处理"></a><strong>三、压缩文件处理</strong></h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压缩 xxx.tar.gz </span></span><br><span class="line">tar -zxvf xxx.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment">#解压缩 xxx.tar.bz2 </span></span><br><span class="line">tar -jxvf xxx.tar.bz2 </span><br><span class="line"></span><br><span class="line"><span class="comment">#压缩aaa bbb目录为xxx.tar.gz </span></span><br><span class="line">tar -zcvf xxx.tar.gz aaa bbb </span><br><span class="line"></span><br><span class="line"><span class="comment">#压缩aaa bbb目录为xxx.tar.bz2 </span></span><br><span class="line">tar -jcvf xxx.tar.bz2 aaa bbb </span><br><span class="line"></span><br><span class="line"><span class="comment">#解压缩 RAR 文件 </span></span><br><span class="line"><span class="comment">#1) 先安装 </span></span><br><span class="line">sudo apt-get install rar unrar </span><br><span class="line">sudo ln -f /usr/bin/rar /usr/bin/unrar </span><br><span class="line"><span class="comment">#2) 解压 </span></span><br><span class="line">unrar x aaaa.rar </span><br><span class="line"><span class="comment">#安装deb文件</span></span><br><span class="line">sudo dpkg -i xxx.deb </span><br></pre></td></tr></tbody></table></figure><h2 id="四、换国内源"><a href="#四、换国内源" class="headerlink" title="四、换国内源"></a><strong>四、换国内源</strong></h2><h3 id="apt换源"><a href="#apt换源" class="headerlink" title="apt换源"></a>apt换源</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新源</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></tbody></table></figure><h3 id="conda换源"><a href="#conda换源" class="headerlink" title="conda换源"></a>conda换源</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前的下载源</span></span><br><span class="line">conda config --show</span><br><span class="line"></span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"><span class="comment">#设置搜索时显示通道地址 从channel中安装包时显示channel的url，这样就可以知道包的安装来源</span></span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看现在的下载源</span></span><br><span class="line">conda config --show</span><br></pre></td></tr></tbody></table></figure><h3 id="conda命令"><a href="#conda命令" class="headerlink" title="conda命令"></a>conda命令</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个名为python34的环境，指定Python版本是3.4</span></span><br><span class="line">conda create --name python34 python=3.4</span><br><span class="line"><span class="comment">#使用activate激活某个环境</span></span><br><span class="line"><span class="built_in">source</span> activate python34 <span class="comment"># for Linux &amp; Mac</span></span><br><span class="line"><span class="comment"># 离开环境</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br><span class="line"><span class="comment">#删除一个已有的环境</span></span><br><span class="line">conda remove --name python34 --all</span><br><span class="line"><span class="comment">#克隆环境</span></span><br><span class="line">conda create --name newname --<span class="built_in">clone</span> oldname </span><br><span class="line"><span class="comment">#列出所有环境</span></span><br><span class="line">conda info -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已经安装的packages</span></span><br><span class="line">conda list</span><br><span class="line"><span class="comment"># 查看某个指定环境的已安装包</span></span><br><span class="line">conda list -n python34</span><br><span class="line"></span><br><span class="line"><span class="comment"># pip安装加上国内源</span></span><br><span class="line">pip install &lt;name&gt; -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">pip install &lt;name&gt; -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></tbody></table></figure><h2 id="五、apt命令"><a href="#五、apt命令" class="headerlink" title="五、apt命令"></a><strong>五、apt命令</strong></h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install package 安装包 </span><br><span class="line">sudo apt-get install package - - reinstall 重新安装包 </span><br><span class="line">sudo apt-get -f install 修复安装”-f = –fix-missing” </span><br><span class="line">sudo apt-get remove package 删除包 </span><br><span class="line">sudo apt-get remove package - - purge 删除包，包括删除配置文件等 </span><br><span class="line">sudo apt-get update 更新源 </span><br><span class="line">sudo apt-get upgrade 更新已安装的包 </span><br><span class="line">sudo apt-get clean 清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）</span><br><span class="line">sudo apt-get autoclean 清理旧版本的软件缓存 </span><br><span class="line">sudo apt-get autoremove  删除系统不再使用的孤立软件</span><br></pre></td></tr></tbody></table></figure><h2 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a><strong>六、其他</strong></h2><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给运行权限</span></span><br><span class="line">chmod +x  *.sh</span><br><span class="line"><span class="comment"># 给所有权限</span></span><br><span class="line">chmod 777  *.sh</span><br><span class="line"><span class="comment"># 每10s显卡情况</span></span><br><span class="line">watch -n 10 nvidia-smi</span><br><span class="line"><span class="comment"># 查看cuda版本</span></span><br><span class="line">nvcc -V</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 备忘录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用LXD搭建多人共用GPU</title>
      <link href="/2020/11/26/lxd-gpu2.0/"/>
      <url>/2020/11/26/lxd-gpu2.0/</url>
      
        <content type="html"><![CDATA[<h2 id="1、-背景"><a href="#1、-背景" class="headerlink" title="1、 背景"></a>1、 背景</h2><p>对实验室多台工作站的多块GPU进行合理的管理和使用分配规划及申请/授权/使用自动管理，希望工作站可以作为服务器使用，能够多人同时使用，互不影响。</p><h2 id="2、需求"><a href="#2、需求" class="headerlink" title="2、需求"></a>2、需求</h2><ul><li>不同用户之间不能相互影响且可以同时使用</li><li>用户注册登录使用需要被授权</li><li>用户要能方便地访问自己的“机器”</li><li>用户要有足够大的权限，能自由地安装程序，能自由地访问网络</li><li>用户不被允许直接操作宿主机</li></ul><h2 id="3、具体方案"><a href="#3、具体方案" class="headerlink" title="3、具体方案"></a>3、具体方案</h2><h3 id="3-1、LXD-ZFS-安装及配置"><a href="#3-1、LXD-ZFS-安装及配置" class="headerlink" title="3.1、LXD/ZFS 安装及配置"></a>3.1、LXD/ZFS 安装及配置</h3><h4 id="LXD-软件安装s"><a href="#LXD-软件安装s" class="headerlink" title="LXD 软件安装s"></a>LXD 软件安装s</h4><p>LXD：用于创建和管理容器<br>ZFS：用于管理物理磁盘，支持 LXD 高级功能，负责容器存储。<br>Bridge-Utils：用于搭建网桥，负责容器上网。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lxd zfsutils-linux bridge-utils</span><br></pre></td></tr></tbody></table></figure><h4 id="初始化-LXD"><a href="#初始化-LXD" class="headerlink" title="初始化 LXD"></a>初始化 LXD</h4><p>运行 <code>sudo lxd init</code> 进行 LXD 初始化配置，选项如下图：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/lxd.png" alt="lxd"></p><ul><li>LXD Clustering：不需要</li><li>new storage pool：需要创建一个存储池</li><li>Name of storage pool：给存储池命名</li><li>storage backend：存储后端，使用 ZFS</li><li>Create a new ZFS pool：需要创建一个 ZFS 池</li><li>use an existing block device：Yes</li><li>Path to block device：使用已有的磁盘分区用于 ZFS 的存储后端。这里用的2T硬盘</li><li>MAAS server?：不知道是啥，不需要</li><li>new local network bridge?：需要，我只需要使用 LXD 默认的网桥即可。</li><li>new bridge be called：给网桥命名</li><li>iPv4：默认 auto</li><li>IPv6：默认 auto</li><li>LXD available over the network？：默认 no</li><li>stale cached？：默认 yes</li><li>YAML printed？：选择yes，查看容器配置信息</li></ul><h4 id="新建容器"><a href="#新建容器" class="headerlink" title="新建容器"></a>新建容器</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建一个remote链接，指向TUNA镜像站。</span></span><br><span class="line">sudo lxc remote add tuna-images https://mirrors.tuna.tsinghua.edu.cn/lxc-images/ --protocol=simplestreams --public</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像列表，寻找合适的镜像的FINGERPRINT，用于下载</span></span><br><span class="line">sudo lxc image list tuna-images: </span><br><span class="line"><span class="meta">#</span><span class="bash"> 举例，创建一个名为tiger的容器。在lxc清华源中使用ubuntu/18.04</span></span><br><span class="line">sudo lxc launch tuna-images:ubuntu/18.04 tiger</span><br></pre></td></tr></tbody></table></figure><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><p>运行 <code>sudo lxc list</code> 进行容器列表查看。</p><p>运行 <code>sudo lxc exec &lt;ContainerTemplateName&gt; bash</code>  可进入容器的 root 用户下 bash。</p><p>可以使用 <code>su ubuntu</code> 或 <code>sudo su</code> 进行用户切换。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用以下命令更改容器系统用户密码</span></span><br><span class="line">passwd ubuntu </span><br><span class="line">passwd root</span><br><span class="line"><span class="meta">#</span><span class="bash">后面远程登陆会用到</span></span><br></pre></td></tr></tbody></table></figure><h4 id="设置容器"><a href="#设置容器" class="headerlink" title="设置容器"></a>设置容器</h4><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#换源，加速apt-get insatll</span></span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line">====</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">===</span><br><span class="line"><span class="comment">#刷新源</span></span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment">#安装必要工具</span></span><br><span class="line">apt install make cmake openssh-server gcc g++ build-essential</span><br><span class="line"><span class="comment">#启动ssh命令 </span></span><br><span class="line">sudo service ssh start</span><br><span class="line"><span class="comment">#端口转发60601是我们定的端口号，通过宿主机的60601端口号监听容器中22端口号（SSH默认端口号）</span></span><br><span class="line">sudo lxc config device add &lt;container&gt; proxy0 proxy listen=tcp:172.22.24.126:60601 connect=tcp:10.152.210.183:22 <span class="built_in">bind</span>=host</span><br><span class="line"><span class="comment">#此时就可以使用校园网访问</span></span><br><span class="line">ssh ubuntu@172.22.24.126 -p 60601</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2、配置共享目录和-GPU"><a href="#3-2、配置共享目录和-GPU" class="headerlink" title="3.2、配置共享目录和 GPU"></a>3.2、配置共享目录和 GPU</h3><p>配置共享目录</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc config <span class="built_in">set</span> &lt;yourContainerName&gt; security.privileged <span class="literal">true</span></span><br><span class="line">sudo lxc config device add &lt;yourContainerName&gt; &lt;shareName&gt; disk <span class="built_in">source</span>=path1 path=path2</span><br><span class="line"><span class="comment">#举例</span></span><br><span class="line">sudo lxc config device add tiger father disk <span class="built_in">source</span>=/home/gdz path=/father</span><br><span class="line"><span class="comment"># path1为宿主机路径，path2为容器内路径</span></span><br></pre></td></tr></tbody></table></figure><p>配置GPU</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为容器添加所有GPU:</span></span><br><span class="line">sudo lxc config device add &lt;yourContainerName&gt; gpu gpu</span><br><span class="line"><span class="comment">#添加指定GPU： </span></span><br><span class="line">sudo lxc config device add &lt;yourContainerName&gt; gpu0 gpu id=0</span><br><span class="line"><span class="comment"># 安装驱动：在容器中显卡驱动不需要安装内核文件，安装宿主机显卡驱动的版本，通过共享目录传至容器中</span></span><br><span class="line">sudo sh /NVIDIA-Linux-x86_64-xxx.xx.run --no-kernel-module </span><br></pre></td></tr></tbody></table></figure><p>挂载 <code>nvidia-uvm</code></p><p>①如果宿主机没有<code>/dev/nvidia-uvm</code>设备，需要通过以下命令挂载设备：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/modprobe nvidia-uvm</span><br><span class="line">D=`grep nvidia-uvm /proc/devices | awk <span class="string">'{print $1}'</span>`</span><br><span class="line">mknod -m 666 /dev/nvidia-uvm c <span class="variable">$D</span> 0</span><br></pre></td></tr></tbody></table></figure><p>②挂载设备到容器：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc config device add yourContainerName nvidia-uvm unix-char path=/dev/nvidia-uvm</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3、配置图形桌面"><a href="#3-3、配置图形桌面" class="headerlink" title="3.3、配置图形桌面"></a>3.3、配置图形桌面</h3><blockquote><p>Xrdp 是 Microsoft 远程桌面协议 (RDP) 的开源实现，允许以图形方式控制远程系统。使用 RDP 可以登录到远程计算机并创建一个真实的桌面会话，就像您已登录到本地计算机一样。</p><p>Ubuntu 存储库中有好几个桌面环境，这里我们将安装 Xfce 。它是一个快速，稳定和轻量级的桌面环境，非常适合在远程服务器上使用</p></blockquote><p><strong>安装 Xrdp</strong></p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xrdp</span><br><span class="line"><span class="comment"># 安装完成后 Xrdp 服务将自动运行，您可以通过键入以下指令来验证 Xrdp 是否正在运行</span></span><br><span class="line">sudo systemctl status xrdp</span><br></pre></td></tr></tbody></table></figure><p><strong>配置 Xrdp</strong></p><p>Xrdp 的配置文件位于 /etc/xrdp 目录。对于 Xrdp 的基本连接，只需要配置 Xrdp 即可使用 Xfce 。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/xrdp/xrdp.ini</span><br></pre></td></tr></tbody></table></figure><p>在文件末尾添加以下内容并保存：</p><p>exec startxfce4</p><p>此外，该文件中可配置 xrdp 远程桌面服务的端口号（默认端口为3389）</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新启动 Xrdp 服务：</span></span><br><span class="line">sudo systemctl restart xrdp</span><br></pre></td></tr></tbody></table></figure><p><strong>端口转发</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在安装好XRDP后，与之前一样，因为我们ping不通容器，所以我们需要使用宿主机的端口号监听容器的xrdp的端口3389</span><br><span class="line">sudo lxc config device add &lt;container&gt; proxy1 proxy listen=tcp:172.22.24.126:60611 connect=tcp:10.152.210.183:3389 bind=host</span><br></pre></td></tr></tbody></table></figure><p>现在可以通过windows的远程连接或者ubuntu的Remmina 来使用容器。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201126002245828.png" alt="1"></p><h3 id="3-4、创建容器模板并分发"><a href="#3-4、创建容器模板并分发" class="headerlink" title="3.4、创建容器模板并分发"></a>3.4、创建容器模板并分发</h3><p><strong>为容器修改参数配置</strong></p> <figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc config edit YourContainerName</span><br></pre></td></tr></tbody></table></figure><p>一般使用以下的配置即可满足</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1.png" alt="img"></p><p>配置默认容器参数（新容器的参数会继承default配置的参数，容器会优先使用自己的参数）</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc profile edit default</span><br></pre></td></tr></tbody></table></figure><p><strong>我们把这个配置好的容器当成模板，保存为镜像</strong>。</p><p>停止容器</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc stop test</span><br></pre></td></tr></tbody></table></figure><p>将该容器复制为ubuntudemo，作为以后容器分发的模板</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc copy tiger ubuntudemo</span><br></pre></td></tr></tbody></table></figure><p>并删除端口转发</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc config device remove ubuntudemo proxy1</span><br></pre></td></tr></tbody></table></figure><p>现在，建立第二个容器bigdog吧，记得把端口转发设置下，并设置容器的初始密码</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo lxc copy tiger ubuntudemo</span><br><span class="line">sudo lxc config device add bigdog proxy1 proxy listen=tcp:xx.xx.xx.xx:60621 connect=tcp:10.176.88.68:3389 <span class="built_in">bind</span>=host</span><br></pre></td></tr></tbody></table></figure><h3 id="3-5、LXDUI-可视化管理界面"><a href="#3-5、LXDUI-可视化管理界面" class="headerlink" title="3.5、LXDUI 可视化管理界面"></a>3.5、LXDUI 可视化管理界面</h3><p>在宿主机上根据<a href="https://github.com/AdaptiveScale/lxdui">AdaptiveScale/lxdui: LXDUI is a web UI for the native Linux container technology LXD/LXC (github.com)</a>配置可视化管理界面，如下，方便地管理容器</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201126153135876.png" alt=""></p><h2 id="4、宿主机的远程访问"><a href="#4、宿主机的远程访问" class="headerlink" title="4、宿主机的远程访问"></a>4、宿主机的远程访问</h2><p>使用xdrp访问宿主机默认桌面</p><h3 id="4-1、设置ubuntu"><a href="#4-1、设置ubuntu" class="headerlink" title="4.1、设置ubuntu"></a>4.1、设置ubuntu</h3><blockquote><p>首先，我们先设置Ubuntu的远程控制，将其设置为允许被远程连接，进入系统-》首选项-》桌面共享，或者直接搜索桌面共享</p><p>将【允许其他人查看您的桌面】这一项勾上，然后在安全那项，勾选【要求远程用户输入此密码】，并设置远程密码。并且我们取消勾选【必须为对本机器的每次访问进行确定】（这样做，是为了被远程的时候不需要再确认，否则每次远程都要人为确认才能被远程，会很繁琐）如图所示：</p></blockquote><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201126153209005.png" alt=""></p><h3 id="4-2、安装xdrp-vnc"><a href="#4-2、安装xdrp-vnc" class="headerlink" title="4.2、安装xdrp+vnc"></a>4.2、安装xdrp+vnc</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#步骤一、安装TigerVNC Server软件包</span></span><br><span class="line">sudo apt-get install tightvncserver （使用在线安装）</span><br><span class="line"><span class="comment">#步骤二、安装xrdp</span></span><br><span class="line">sudo apt-get install xrdp -y</span><br><span class="line"><span class="comment">#步骤三、编辑配置：</span></span><br><span class="line">sudo vi /etc/xrdp/startwm.sh</span><br><span class="line"><span class="comment">#把最下面的test和exec两行注释掉，添加一行</span></span><br><span class="line">unity</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3、安装dconf-editor-取消权限限制"><a href="#4-3、安装dconf-editor-取消权限限制" class="headerlink" title="4.3、安装dconf-editor(取消权限限制)"></a>4.3、安装dconf-editor(取消权限限制)</h3><p>再次，我们需要取消掉请求加密的功能，否则缺少这一步是无法远程上的，这个时候我们需要安装dconf-editor工具进行配置，输入以下命令：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dconf-editor</span><br></pre></td></tr></tbody></table></figure><p>安装完成之后，我们需要打开dconf-editor工具，在桌面搜索dconf-editor打开，如图所示：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201126153453473.png" alt=""></p><p>打开之后，依次展开org-&gt;gnome-&gt;desktop-&gt;remote-access，然后取消 “requlre-encryption”的勾选即可。如图所示：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201126153555644.png" alt=""></p><p>至此，前期准备工作已经完成，后面直接通过VNC工具或者Windows自带的mstsc(远程桌面控制)进行访问就行。</p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p>现在就可以在宿舍或家里使用校园网访问工作站了，不管是宿主机还是容器都可以远程访问桌面。容器内已安装好cuda和显卡驱动，以及pycharm、miniconda、Chrome浏览器。</p><p>通过此次练习与配置，对Linux环境更加熟悉了，准备整理一篇Linux常用命令供自己查阅使用。</p><p>参考链接：</p><p><a href="https://github.com/shenuiuin/LXD_GPU_SERVER">shenuiuin/LXD_GPU_SERVER: 实验室GPU服务器的LXD虚拟化 (github.com)</a></p><p><a href="https://blog.csdn.net/wangke0809/article/details/80235989">https://blog.csdn.net/wangke0809/article/details/80235989</a></p><p><a href="https://blog.yangl1996.com/post/gpu-passthrough-for-lxc/">https://blog.yangl1996.com/post/gpu-passthrough-for-lxc/</a></p><p><a href="https://abcdabcd987.com/setup-shared-gpu-server-for-labs/">https://abcdabcd987.com/setup-shared-gpu-server-for-labs/</a></p><p><a href="https://github.com/abcdabcd987/lxc-gpu">https://github.com/abcdabcd987/lxc-gpu</a></p><p><a href="https://blog.csdn.net/weixin_42749767/article/details/83720831?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.pc_relevant_is_cache&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.pc_relevant_is_cache">https://blog.csdn.net/weixin_42749767/article/details/83720831?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.pc_relevant_is_cache&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.pc_relevant_is_cache</a></p><p><a href="https://developer.aliyun.com/article/578196">https://developer.aliyun.com/article/578196</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文-时空双流Two Stream及衍生方法</title>
      <link href="/2020/10/29/yuque/lun-wen-shi-kong-shuang-liu-two-stream-ji-yan-sheng-fang-fa/"/>
      <url>/2020/10/29/yuque/lun-wen-shi-kong-shuang-liu-two-stream-ji-yan-sheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898263723-c04fb58f-cc6a-43d9-9d0f-0ccae9176348.png#height=578&amp;id=yX33P&amp;originHeight=578&amp;originWidth=1233&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=1233" alt=""></p><h2 id="1-Two-Stream-Convolutional-Networks-2014NIPS"><a href="#1-Two-Stream-Convolutional-Networks-2014NIPS" class="headerlink" title="1. Two-Stream Convolutional Networks-2014NIPS"></a>1. Two-Stream Convolutional Networks-2014NIPS</h2><blockquote><p>概述：基于 RGB 视频的动作识别方法中 Two Stream 的开山之作<br>关键词：Two Stream , optical flow ,<br>论文地址：<a href="https://arxiv.org/pdf/1406.2199.pdf">https://arxiv.org/pdf/1406.2199.pdf</a><br>论文翻译地址：<a href="https://blog.csdn.net/liuxiao214/article/details/78377791">https://blog.csdn.net/liuxiao214/article/details/78377791</a></p></blockquote><h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><ul><li>首先，论文提出了 two-stream 结构的 CNN，由空间和时间两个维度的网络组成。</li><li>其次，作者提出了利用网络训练多帧密度光流，以此作为输入，能在有限训练数据的情况下取得不错的结果。</li><li>最后，采用多任务训练的方法将两个行为分类的数据集联合起来，增加训练数据，最终在两个数据集上都取得了更好的效果。（作者提到，联合训练也可以去除过拟合的可能）</li></ul><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><h4 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h4><p>对与两个分支使用了相同的 2D CNN 网络结构，其网络结构见下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898263687-0c0bcf10-06f7-472f-8787-e3f03880e7c2.png#height=161&amp;id=nybyO&amp;originHeight=161&amp;originWidth=832&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=832" alt=""></p><ul><li><strong>在空间部分</strong>，以单个帧上的外观形式，携带了视频描绘的场景和目标信息。 其自身静态外表是一个很有用的线索，因为一些动作很明显地与特定的目标有联系。</li><li><strong>在时间部分</strong>，以多帧上的运动形式，表达了观察者（摄像机）和目标者的运动。</li></ul><h4 id="什么是-optical-flow"><a href="#什么是-optical-flow" class="headerlink" title="什么是 optical flow?"></a>什么是 optical flow?</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898263478-37c2e003-bc9e-4515-b116-5084877aecb0.png#height=293&amp;id=Ccefg&amp;originHeight=293&amp;originWidth=777&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=777" alt=""></p><blockquote><p>(a)、(b):一对连续的视频帧，用青色矩形勾勒出移动的手周围的区域。<br>(c): 轮廓区域密集光流的特写镜头，表示一个 optical flow。<br>(d):位移矢量场的水平分量 dxo(高强度对应正值，低强度对应负值)。<br>(e):垂直分量 dy。注意(d)和(e)如何突出移动的手和弓。</p></blockquote><p><strong>optical flow 是由一些 displacement vector fields（位移矢量场）（每个 vector 用 dt 表示）组成的</strong>，其中 dt 是一个向量，表示第 t 帧的 displacement vector，是通过第 t 和第 t+1 帧图像得到的。dt 包含水平部分 dtx 和竖直部分 dty，可以看 Figure2 中的（d）和（e）。因此如果一个 video 有 L 帧，那么一共可以得到 2L 个 channel 的 optical flow，然后才能作为上图中 temporal stream convnet 网络的输入。</p><h4 id="optical-flow-stacking-和-trajectory-stacking？"><a href="#optical-flow-stacking-和-trajectory-stacking？" class="headerlink" title="optical flow stacking 和 trajectory stacking？"></a>optical flow stacking 和 trajectory stacking？</h4><p>作者在这里讨论了几种输入方式，虽然都是计算多帧之间光流场。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898263682-d9709456-0506-446a-9a46-44101ab1a9e4.png#height=328&amp;id=Y7pds&amp;originHeight=328&amp;originWidth=832&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=832" alt=""></p><ul><li><strong>optical flow stacking</strong> ： 光流栈，或者叫做光流的简单叠加。简单的来说就是计算每两帧之间的光流，然后简单的 stacking。</li><li><strong>trajectory stacking</strong>： 顾名思义，轨迹叠加就是假设第一帧的某个像素点，我们可以通过光流来追踪它在视频中的轨迹。而简单的光流场叠加并没有追踪，每个都是计算的某帧 T+1 中某个像素点 P 相对于 T 帧中对应像素点 q 的位移，如上图所示，光流场叠加最终得到的是每个像素点的两帧之间的光流图</li></ul><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><ol><li>对视频序列中每两帧计算密集光流，得到密集光流的序列（即 temporal 信息）。</li><li>然后对于视频图像（spatial）和密集光流（temporal）分别训练 CNN 模型， 两个分支的网络分别对动作的类别进行判断，</li><li>最后直接对两个网络的 class score 进行 fusion（包括直接平均和 svm 两种方法），得到最终的分类结果。</li></ol><h3 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898263516-05046632-e5bb-4076-a5d7-198c1c5ab75b.png#height=207&amp;id=uAX5C&amp;originHeight=207&amp;originWidth=579&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=579" alt=""></p><h2 id="2-Convolutional-Two-Stream-Network-Fusion-2016CVPR"><a href="#2-Convolutional-Two-Stream-Network-Fusion-2016CVPR" class="headerlink" title="2. Convolutional Two-Stream Network Fusion-2016CVPR"></a>2. Convolutional Two-Stream Network Fusion-2016CVPR</h2><blockquote><p>概述：对论文 1 的改进：CNN 网络进行了 spatial 以及 temporal 的融合<br>关键词：Two Stream , fusion，<br>论文地址：<a href="https://arxiv.org/pdf/1604.06573.pdf">https://arxiv.org/pdf/1604.06573.pdf</a><br>论文翻译地址：<a href="https://blog.csdn.net/weixin_42164269/article/details/80689653">https://blog.csdn.net/weixin_42164269/article/details/80689653</a><br>源码：<a href="https://github.com/feichtenhofer/twostreamfusion">https://github.com/feichtenhofer/twostreamfusion</a></p></blockquote><h2 id="3-TSN-Temporal-Segment-Networks-Towards-Good-Practices-for-Deep-Action-Recognition-2016ECCV"><a href="#3-TSN-Temporal-Segment-Networks-Towards-Good-Practices-for-Deep-Action-Recognition-2016ECCV" class="headerlink" title="3. (TSN)Temporal Segment Networks: Towards Good Practices for Deep Action Recognition-2016ECCV"></a>3. (TSN)Temporal Segment Networks: Towards Good Practices for Deep Action Recognition-2016ECCV</h2><blockquote><p>概述：<br>关键词：<br>论文地址：<br>论文翻译地址：<br>源码：</p></blockquote><h2 id="4-UntrimmedNets-UntrimmedNets-for-Weakly-Supervised-Action-Recognition-and-Detection-2017CVPR"><a href="#4-UntrimmedNets-UntrimmedNets-for-Weakly-Supervised-Action-Recognition-and-Detection-2017CVPR" class="headerlink" title="4. (UntrimmedNets)UntrimmedNets for Weakly Supervised Action Recognition and Detection-2017CVPR"></a>4. (UntrimmedNets)UntrimmedNets for Weakly Supervised Action Recognition and Detection-2017CVPR</h2><blockquote><p>概述：<br>关键词：<br>论文地址：<br>论文翻译地址：<br>源码：<a href="https://github.com/wanglimin/UntrimmedNet">https://github.com/wanglimin/UntrimmedNet</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动作识别 </tag>
            
            <tag> Two Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文-3D卷积 C3D 及衍生方法</title>
      <link href="/2020/10/28/yuque/lun-wen-3d-juan-ji-c3d-ji-yan-sheng-fang-fa/"/>
      <url>/2020/10/28/yuque/lun-wen-3d-juan-ji-c3d-ji-yan-sheng-fang-fa/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="1-C3D-Learning-spatiotemporal-features-with-3d-convolutional-networks-2015ICCV-facebook"><a href="#1-C3D-Learning-spatiotemporal-features-with-3d-convolutional-networks-2015ICCV-facebook" class="headerlink" title="1. (C3D)Learning spatiotemporal features with 3d convolutional networks-2015ICCV-facebook"></a>1. (C3D)Learning spatiotemporal features with 3d convolutional networks-2015ICCV-facebook</h2><blockquote><p>概述：采用 3D 卷积和 3D Pooling 构建了网络。 通过 3D 卷积，C3D 可以直接处理视频（或者说是视频帧的 volume）<br>关键词：C3D，速度快，模型简单<br>论文地址：<a href="https://arxiv.org/pdf/1412.0767.pdf">https://arxiv.org/pdf/1412.0767.pdf</a><br>论文翻译地址：<a href="https://www.jianshu.com/p/09d1d8ffe8a4">https://www.jianshu.com/p/09d1d8ffe8a4</a><br>caff 源码:<a href="https://github.com/facebook/C3D">https://github.com/facebook/C3D</a></p></blockquote><h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><p>1）与 2DCNN 相比，3DCNN 更适合时空特征学习；</p><p>2）对于 3D ConvNet 而言，在所有层使用 3×3×3 的小卷积核效果最好；</p><p>3）我们通过简单的线性分类器学到的特征名为 C3D(Convolutional 3D)，在 4 个不同的基准上优于现有的方法，并在其他 2 个基准上与目前最好的方法相当。</p><p>此外，特征是紧凑的：在 UCF101 数据集上得到 52.8%的准确率只用了 10 维，并且由于 ConvNets 的推断快，计算效率非常高。最后，它们在概念上非常简单，易于训练和使用。</p><h3 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h3><p>速度 C3D 的最大优势在于其速度，在文章中其速度为 314fps。而实际上这是基于两年前的显卡了。 用 Nvidia 1080 显卡可以达到 600fps 以上。 所以 C3D 的效率是要远远高于其他方法的，个人认为这使得 C3D 有着很好的应用前景。</p><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p>与 2D ConvNet 相比，3D ConvNet 能够通过 3D 卷积和 3D 池化操作更好地建模时间信息。在 3D ConvNets 中，卷积和池化操作在时空上执行，而在 2D ConvNets 中，它们仅在空间上完成。下图展现出了差异，应用于一个图像的 2D 卷积将输出一个图像，施加在多个图像上的 2D 卷积(将它们视为不同的通道)也输出一个图像。因此，2D ConvNets 在每次卷积运算之后就会丢失输入信号的时间信息。只有 3D 卷积才能保留输入信号的时间信息。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898415385-90eb1703-b84a-4947-904e-930775f7258e.png#height=136&amp;id=wiKDw&amp;originHeight=136&amp;originWidth=928&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=928" alt=""></p><p>（a）和（b）分别为 2D 卷积用于单通道图像和多通道图像的情况（此处多通道图像可以指同一张图片的 3 个颜色通道，也指多张堆叠在一起的图片，即一小段视频），对于一个滤波器，输出为一张二维的特征图，多通道的信息被完全压缩了。而（c）中的 3D 卷积的输出仍然为 3D 的特征图，即保留了时间信息。</p><h3 id="网络架构"><a href="#网络架构" class="headerlink" title="网络架构"></a>网络架构</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898415463-6f36965e-b043-4048-9f98-fa6ea8b48d5f.png#height=164&amp;id=EZnvM&amp;originHeight=164&amp;originWidth=855&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=855" alt=""></p><p>3×3×3 卷积核的均匀设置是 3D ConvNets 的最佳选择。这个发现与 2D ConvNets 一致。使用大型数据集，可以根据机器内存限制和计算承受能力，尽可能深入地训练具有 3×3×3 核的 3D ConvNet。使用目前的 GPU 内存，我们设计了 3D ConvNet，具有 8 个卷积层、5 个池化层、两个全连接层，以及一个 softmax 输出层。网络架构如图 3 所示。为了简单起见，我们从现在开始将这个网络称为 C3D。所有 3D 卷积滤波器均为 3×3×3，步长为 1×1×1。为了保持早期的时间信息设置 pool1 核大小为 1×2×2、步长 1×2×2，其余所有 3D 池化层均为 2×2×2，步长为 2×2×2。每个全连接层有 4096 个输出单元。</p><h3 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1164521/1603898415419-f88654b4-6ec3-43aa-8795-51d8d1e9d13d.png#height=665&amp;id=WpuCf&amp;originHeight=665&amp;originWidth=662&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=662" alt=""></p><p>实验效果：UCF101-85.2% 可以看出其在 UCF101 上的效果距离 two stream 方法还有不小差距。         我认为这主要是网络结构造成的</p><h2 id="2-I3D-Inception-V1-Quo-Vadis-Action-Recognition-A-New-Model-and-the-Kinetics-Dataset-2017CVPR-facebook"><a href="#2-I3D-Inception-V1-Quo-Vadis-Action-Recognition-A-New-Model-and-the-Kinetics-Dataset-2017CVPR-facebook" class="headerlink" title="2. (I3D-Inception-V1)Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset-2017CVPR-facebook"></a>2. (I3D-Inception-V1)Quo Vadis, Action Recognition? A New Model and the Kinetics Dataset-2017CVPR-facebook</h2><blockquote><p>概述：以往的 Conv3D 效果很差的原因之一就是数据集太小，喂不饱网络。文章中的 3D 网络并不是随机初始化的，而是将在 ImageNet 训好的 2D 模型参数展开成 3D，之后再训练。因此叫 Inflating 3D ConvNets。<br>关键词：I3D，Inception-V1，数据集 kinetics，DeepMind 实验室牛逼有钱<br>论文地址：<a href="https://openaccess.thecvf.com/content_cvpr_2017/papers/Carreira_Quo_Vadis_Action_CVPR_2017_paper.pdf">https://openaccess.thecvf.com/content_cvpr_2017/papers/Carreira_Quo_Vadis_Action_CVPR_2017_paper.pdf</a><br>论文翻译地址：<a href="https://www.jianshu.com/p/71d35fda32d3">https://www.jianshu.com/p/71d35fda32d3</a><br>论文源码:<a href="https://github.com/deepmind/kinetics-i3d">https://github.com/deepmind/kinetics-i3d</a></p></blockquote><h3 id="主要贡献-1"><a href="#主要贡献-1" class="headerlink" title="主要贡献"></a>主要贡献</h3><p>1）提出了大数据集 kinetics，文章又把之前的经典方法都在这个数据集上做了实验，并且实验了在 kinetics 上预训练的模型对于小数据集的结果是否会有提升，实验结果表明使用 kinetics 预训练的模型能得到更高的准确率。</p><p>2）提出了一种 I3D（Two-Stream Inflated 3D ConvNets）模型，该 3DCNN 模型是由 2DCNN Inception-V1 扩张而来，并且可以使用在 ImageNet 上预训练的参数，实验结果表明这个模型在各个标准数据集上都取得了当时最好的结果。</p><h3 id="NOTE-1"><a href="#NOTE-1" class="headerlink" title="NOTE"></a>NOTE</h3><p>迁移学习：提出一个 <strong>infalted</strong>的思想，利用现阶段已有的 imageNet 去训练 2D 网络，再膨胀为 3D，也就是著名的<strong>I3D</strong>的方法。</p><p>预训练：预训练，这一神奇的操作，来源就是产生于此。在现阶段的 video 方面的方法中，大多数方法在使用了预训练的方法。都可以产生一定的提升。从大规模优化的角度来说，预训练就是在网络中产生了一个较好的初始参数值，之后微调进行收敛，达到一个较好的<strong>局部</strong>最优解。虽然不知道具体怎么解释，但一定比随机初始化要好。</p><h2 id="3-P3D-ResNet-Learning-Spatio-Temporal-Representation-with-Pseudo-3D-Residual-Networks-2017ICCV"><a href="#3-P3D-ResNet-Learning-Spatio-Temporal-Representation-with-Pseudo-3D-Residual-Networks-2017ICCV" class="headerlink" title="3.(P3D-ResNet)Learning Spatio-Temporal Representation with Pseudo-3D Residual Networks-2017ICCV"></a>3.(P3D-ResNet)<strong>Learning Spatio-Temporal Representation with Pseudo-3D Residual Networks</strong>-2017ICCV</h2><h2 id="4-R-2-1-D-A-Closer-Look-at-Spatiotemporal-Convolutions-for-Action-Recognition-2018CVPR"><a href="#4-R-2-1-D-A-Closer-Look-at-Spatiotemporal-Convolutions-for-Action-Recognition-2018CVPR" class="headerlink" title="4.(R(2+1)D)A Closer Look at Spatiotemporal Convolutions for Action Recognition-2018CVPR"></a>4.(R(2+1)D)A Closer Look at Spatiotemporal Convolutions for Action Recognition-2018CVPR</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D卷积 </tag>
            
            <tag> 动作识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="/2020/10/21/ssm-kuang-jia-zheng-he/"/>
      <url>/2020/10/21/ssm-kuang-jia-zheng-he/</url>
      
        <content type="html"><![CDATA[<h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><h4 id="1-1-新建一Maven项目！ssmbuild-，-添加web的支持"><a href="#1-1-新建一Maven项目！ssmbuild-，-添加web的支持" class="headerlink" title="1.1 新建一Maven项目！ssmbuild ， 添加web的支持"></a>1.1 新建一Maven项目！ssmbuild ， 添加web的支持</h4><h4 id="1-2-导入相关的pom依赖！"><a href="#1-2-导入相关的pom依赖！" class="headerlink" title="1.2 导入相关的pom依赖！"></a>1.2 导入相关的pom依赖！</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-3-Maven资源过滤设置"><a href="#1-3-Maven资源过滤设置" class="headerlink" title="1.3 Maven资源过滤设置"></a>1.3 Maven资源过滤设置</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="1-4-建立基本结构和配置框架！"><a href="#1-4-建立基本结构和配置框架！" class="headerlink" title="1.4 建立基本结构和配置框架！"></a>1.4 建立基本结构和配置框架！</h4><p>com.gdz.pojo<br>com.gdz.dao<br>com.gdz.service<br>com.gdz.controller<br><strong>mybatis-config.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-Mybatis层编写"><a href="#2-Mybatis层编写" class="headerlink" title="2. Mybatis层编写"></a>2. Mybatis层编写</h4><h4 id="2-1-数据库配置文件-database-properties"><a href="#2-1-数据库配置文件-database-properties" class="headerlink" title="2.1 数据库配置文件 database.properties"></a>2.1 数据库配置文件 database.properties</h4><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">gudongzhou678</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-IDEA关联数据库"><a href="#2-2-IDEA关联数据库" class="headerlink" title="2.2 IDEA关联数据库"></a>2.2 IDEA关联数据库</h4><h4 id="2-3-编写MyBatis的核心配置文件"><a href="#2-3-编写MyBatis的核心配置文件" class="headerlink" title="2.3 编写MyBatis的核心配置文件"></a>2.3 编写MyBatis的核心配置文件</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.gdz.pojo"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/gdz/dao/BookMapper.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-编写数据库对应的实体类"><a href="#2-4-编写数据库对应的实体类" class="headerlink" title="2.4 编写数据库对应的实体类"></a>2.4 编写数据库对应的实体类</h4><p>com.gdz.pojo.Books<br>使用lombok插件！</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdz.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookID;</span><br><span class="line">    <span class="keyword">private</span> String bookName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bookCounts;</span><br><span class="line">    <span class="keyword">private</span> String detail;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-5-编写Dao层的-Mapper接口！"><a href="#2-5-编写Dao层的-Mapper接口！" class="headerlink" title="2.5 编写Dao层的 Mapper接口！"></a>2.5 编写Dao层的 Mapper接口！</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdz.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gdz.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookMapper</span> </span>{</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-6-编写接口对应的-Mapper-xml-文件"><a href="#2-6-编写接口对应的-Mapper-xml-文件" class="headerlink" title="2.6 编写接口对应的 Mapper.xml 文件"></a>2.6 编写接口对应的 Mapper.xml 文件</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.gdz.dao.BookMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        insert into ssmbuild.books(bookName, bookCounts, detail)</span><br><span class="line">        values (#{bookName}, #{bookCounts}, #{detail})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteBookById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from ssmbuild.books</span><br><span class="line">        where bookID = #{bookID}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBook"</span> <span class="attr">parameterType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        update ssmbuild.books</span><br><span class="line">        set bookName   = #{bookName},</span><br><span class="line">            bookCounts = #{bookCounts},</span><br><span class="line">            detail     = #{detail}</span><br><span class="line">        where bookID = #{bookID}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBookById"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from ssmbuild.books</span><br><span class="line">        where bookID = #{bookID}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryAllBook"</span> <span class="attr">resultType</span>=<span class="string">"Books"</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        from ssmbuild.books</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-7-编写Service层的接口和实现类"><a href="#2-7-编写Service层的接口和实现类" class="headerlink" title="2.7 编写Service层的接口和实现类"></a>2.7 编写Service层的接口和实现类</h4><p>接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdz.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gdz.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="comment">//增加一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除一个Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新Book</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">    <span class="function">Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">    <span class="function">List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>实现类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gdz.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gdz.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.gdz.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">    <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.bookMapper = bookMapper;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addBook</span><span class="params">(Books book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateBook</span><span class="params">(Books books)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Books <span class="title">queryBookById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Books&gt; <span class="title">queryAllBook</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><hr><h3 id="3-Spring层"><a href="#3-Spring层" class="headerlink" title="3. Spring层"></a>3. Spring层</h3><h4 id="3-1-编写Spring整合Mybatis的配置文件"><a href="#3-1-编写Spring整合Mybatis的配置文件" class="headerlink" title="3.1 编写Spring整合Mybatis的配置文件"></a>3.1 编写Spring整合Mybatis的配置文件</h4><blockquote><p>spring-dao.xml</p></blockquote><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireRetryAttempts"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       &lt;propertyname="sqlSessionFactoryBeanName"value="sqlSessionFactory"/&gt;</span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.gdz.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>我们这里数据源使用c3p0连接池；</p><h4 id="3-2-Spring整合service层"><a href="#3-2-Spring整合service层" class="headerlink" title="3.2 Spring整合service层"></a>3.2 Spring整合service层</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.gdz.service"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"BookServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.gdz.service.BookServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookMapper"</span> <span class="attr">ref</span>=<span class="string">"bookMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</strong></p><h3 id="4-SpringMVC层"><a href="#4-SpringMVC层" class="headerlink" title="4. SpringMVC层"></a>4. SpringMVC层</h3><h4 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1 配置文件"></a>4.1 配置文件</h4><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.kuang.controller"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p> 配置文件，暂时结束！</p><h5 id="Spring配置整合文件，applicationContext-xml"><a href="#Spring配置整合文件，applicationContext-xml" class="headerlink" title="Spring配置整合文件，applicationContext.xml"></a>Spring配置整合文件，applicationContext.xml</h5><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dao.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-service.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-mvc.xml"</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-Controller-和-视图层编写"><a href="#4-2-Controller-和-视图层编写" class="headerlink" title="4.2 Controller 和 视图层编写"></a>4.2 Controller 和 视图层编写</h4><h5 id="BookController-类编写-，-方法一：查询全部书籍"><a href="#BookController-类编写-，-方法一：查询全部书籍" class="headerlink" title="BookController 类编写 ， 方法一：查询全部书籍"></a>BookController 类编写 ， 方法一：查询全部书籍</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/book")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier("BookServiceImpl")</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping("/allBook")</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">list</span><span class="params">(Model model)</span> </span>{</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"allBook"</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="编写首页-index-jsp"><a href="#编写首页-index-jsp" class="headerlink" title="编写首页 index.jsp"></a>编写首页 index.jsp</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">       a {</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: 18px;</span><br><span class="line">      }</span><br><span class="line">       h3 {</span><br><span class="line">           width: 180px;</span><br><span class="line">           height: 38px;</span><br><span class="line">           margin: 100px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 38px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: 4px;</span><br><span class="line">      }</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=<span class="string">"${pageContext.request.contextPath}/book/allBook"</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="书籍列表页面-allbook-jsp"><a href="#书籍列表页面-allbook-jsp" class="headerlink" title="书籍列表页面 allbook.jsp"></a>书籍列表页面 allbook.jsp</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 -------- 显示所有书籍&lt;/small&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-4 column"</span>&gt;</span><br><span class="line">            &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-primary"</span> href=<span class="string">"${pageContext.request.contextPath}/book/toAddBook"</span>&gt;新增书籍&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-mid-12 column"</span>&gt;</span><br><span class="line">            &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"table table-hover table-striped"</span>&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍名称&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &lt;/thead&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                    &lt;c:forEach <span class="keyword">var</span>=<span class="string">"book"</span> items=<span class="string">"${list}"</span>&gt;</span><br><span class="line">                        &lt;tr&gt;</span><br><span class="line">                            &lt;td&gt;${book.bookID}&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;${book.bookName}&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;${book.bookCounts}&lt;/td&gt;</span><br><span class="line">                            &lt;td&gt;${book.detail}&lt;/td&gt;</span><br><span class="line">                            &lt;th&gt;</span><br><span class="line">                                &lt;a href=<span class="string">"${pageContext.request.contextPath}/book/toUpdate?id=${book.bookID}"</span>&gt;修改&lt;/a&gt;</span><br><span class="line">                                &amp;nbsp | &amp;nbsp</span><br><span class="line">                                &lt;a href=<span class="string">"#"</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                            &lt;/th&gt;</span><br><span class="line">                        &lt;/tr&gt;</span><br><span class="line">                    &lt;/c:forEach&gt;</span><br><span class="line">                &lt;/tbody&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="BookController-类编写-，-方法二：添加书籍"><a href="#BookController-类编写-，-方法二：添加书籍" class="headerlink" title="BookController 类编写 ， 方法二：添加书籍"></a>BookController 类编写 ， 方法二：添加书籍</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping("/toAddBook")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toAddPaper</span><span class="params">()</span> </span>{</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"addBook"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping("/addBook")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addPaper</span><span class="params">(Books books)</span> </span>{</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="添加书籍页面：addBook-jsp"><a href="#添加书籍页面：addBook-jsp" class="headerlink" title="添加书籍页面：addBook.jsp"></a>添加书籍页面：addBook.jsp</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">"${pageContext.request.contextPath}/book/addBook"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;label&gt;书籍名称：&lt;/label&gt;</span><br><span class="line">           &lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> required&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;label&gt;书籍数量：&lt;/label&gt;</span><br><span class="line">           &lt;input type=<span class="string">"text"</span> name=<span class="string">"bookCounts"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> required&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;label&gt;书籍详情：&lt;/label&gt;</span><br><span class="line">           &lt;input type=<span class="string">"text"</span> name=<span class="string">"detail"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> required&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;input type=<span class="string">"submit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> value=<span class="string">"添加"</span>&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="BookController-类编写-，-方法三：修改书籍"><a href="#BookController-类编写-，-方法三：修改书籍" class="headerlink" title="BookController 类编写 ， 方法三：修改书籍"></a>BookController 类编写 ， 方法三：修改书籍</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/toUpdate")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpdatePaper</span><span class="params">(<span class="keyword">int</span> id,Model model)</span></span>{</span><br><span class="line">        Books books = bookService.queryBookById(id);</span><br><span class="line">        model.addAttribute(<span class="string">"book"</span>,books);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"updateBook"</span>;</span><br><span class="line">    }</span><br><span class="line"><span class="meta">@RequestMapping("/updateBook")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateBook</span><span class="params">(Books books)</span></span>{</span><br><span class="line">        bookService.updateBook(books);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h5 id="修改书籍页面-updateBook-jsp"><a href="#修改书籍页面-updateBook-jsp" class="headerlink" title="修改书籍页面  updateBook.jsp"></a>修改书籍页面  updateBook.jsp</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;修改书籍&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row clearfix"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-md-12 column"</span>&gt;</span><br><span class="line">           &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;修改书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">"${pageContext.request.contextPath}/book/updateBook"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">"hidden"</span> name=<span class="string">"bookID"</span> value=<span class="string">"${book.bookID}"</span>&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;label&gt;书籍名称：&lt;/label&gt;</span><br><span class="line">           &lt;input type=<span class="string">"text"</span> name=<span class="string">"bookName"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> value=<span class="string">"${book.bookName}"</span> required&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;label&gt;书籍数量：&lt;/label&gt;</span><br><span class="line">           &lt;input type=<span class="string">"text"</span> name=<span class="string">"bookCounts"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> value=<span class="string">"${book.bookCounts}"</span>  required&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;label&gt;书籍详情：&lt;/label&gt;</span><br><span class="line">           &lt;input type=<span class="string">"text"</span> name=<span class="string">"detail"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> value=<span class="string">"${book.detail}"</span> required&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">           &lt;input type=<span class="string">"submit"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> value=<span class="string">"修改"</span>&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><h5 id="BookController-类编写-，-方法四：删除书籍"><a href="#BookController-类编写-，-方法四：删除书籍" class="headerlink" title="BookController 类编写 ， 方法四：删除书籍"></a>BookController 类编写 ， 方法四：删除书籍</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/del/{bookId}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteBook</span><span class="params">(<span class="meta">@PathVariable("bookId")</span> <span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">   bookService.deleteBookById(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"redirect:/book/allBook"</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-项目结构"><a href="#5-项目结构" class="headerlink" title="5 项目结构"></a>5 项目结构</h3><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/image-20201021150917335.png" alt="image-20201021150917335"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> SSM </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础入门</title>
      <link href="/2020/10/08/mysql-ji-chu-ru-men/"/>
      <url>/2020/10/08/mysql-ji-chu-ru-men/</url>
      
        <content type="html"><![CDATA[<hr><p>下面是根据开源项目 <a href="https://github.com/jaywcjlove/mysql-tutorial/blob/master/21-minutes-MySQL-basic-entry.md">21分钟MySQL基础入门</a> 做的学习笔记</p><p><a href="https://www.w3school.com.cn/sql/sql_orderby.asp">W3SCHOOL</a>上的教程链接</p><hr><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>MySQL版本: Server version: 8.0.20 MySQL Community Server - GPL</p><p>MySQL为关系型数据库，一个关系型数据库是由一个或数个表格组成，如下图：<br><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/20201008103454.png" alt="">))</p><ul><li>表头： 每一列的名称；</li><li>列（col）: 具有相同数据类型的数据的集合</li><li>行(row) :  每一行用来描述某个人/物的具体信息;</li><li>值(value) : 行的具体信息, 每个值必须与该列的数据类型相同;</li><li>键(key) : 表中用来识别某个特定的人\物的方法, 键的值在当前列中具有唯一性。</li></ul><h2 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h2><p>在cmd中输入：mysql -h 主机名 -u 用户名 -p<br><u>参数说明：</u></p><ul><li>-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略；</li><li>-u : 登录的用户名；</li><li>-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。　　</li><li><strong>如果登录本机的MySQL数据库，只需要输入：mysql -u root -p</strong><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>u 用户名 <span class="operator">-</span>p</span><br><span class="line">mysql <span class="operator">-</span>D 所选择的数据库名 <span class="operator">-</span>h 主机名 <span class="operator">-</span>u 用户名 <span class="operator">-</span>p</span><br><span class="line">mysql<span class="operator">&gt;</span> exit # 退出 使用 “quit;” 或 “\q;” 一样的效果</span><br><span class="line">mysql<span class="operator">&gt;</span> status;  # 显示当前mysql的version的各种信息</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> version(); # 显示当前mysql的version信息</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">'port'</span>; # 查看MySQL端口号</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>对于表的操作需要先进入数据库  <u><strong>use 库名 ；</strong></u></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建一个 名为samp_db 的数据库，数据库字符编码指定为 gbk</span></span><br><span class="line"><span class="keyword">create</span> database samp_db <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br><span class="line"><span class="keyword">drop</span> database samp_db; <span class="comment">-- 删除库名为samp_db的库</span></span><br><span class="line"><span class="keyword">show</span> databases;            <span class="comment">-- 显示数据库列表</span></span><br><span class="line">use samp_db;                <span class="comment">-- 选择创建的数据库samp_db</span></span><br><span class="line"><span class="keyword">show</span> tables;                  <span class="comment">-- 显示samp_db下面所有的表名字</span></span><br><span class="line"><span class="keyword">describe</span> 表名；               <span class="comment">-- 显示数据表的结构</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名；           <span class="comment">-- 清空表中记录</span></span><br></pre></td></tr></tbody></table></figure><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><blockquote><p>使用create table 语句可完成对表的创建</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--如果数据库中存在 user_accounts表，就把它从数据库中drop掉</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF EXITS <span class="string">'user_accounts'</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">'user_accounts'</span>(</span><br><span class="line">`id`             <span class="type">int</span>(<span class="number">100</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT <span class="keyword">primary</span> key,</span><br><span class="line">  `password`       <span class="type">varchar</span>(<span class="number">32</span>)       <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'用户密码'</span>,</span><br><span class="line">  `reset_password` tinyint(<span class="number">32</span>)       <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">'用户类型：0－不需要重置密码；1-需要重置密码'</span>,</span><br><span class="line">  `mobile`         <span class="type">varchar</span>(<span class="number">20</span>)       <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'手机'</span>,</span><br><span class="line">  `create_at`      <span class="type">timestamp</span>(<span class="number">6</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>),</span><br><span class="line">  `update_at`      <span class="type">timestamp</span>(<span class="number">6</span>)      <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span>(<span class="number">6</span>),</span><br><span class="line">  <span class="comment">-- 创建唯一索引，不允许重复</span></span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX idx_user_mobile(`mobile`)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line">COMMENT<span class="operator">=</span><span class="string">'用户表信息'</span>;</span><br></pre></td></tr></tbody></table></figure><p>数据类型的属性解释</p><ul><li>NULL：数据列可包含NULL值；</li><li>NOT NULL：数据列不允许包含NULL值；</li><li>DEFAULT：默认值；</li><li>PRIMARY KEY：主键；</li><li>AUTO_INCREMENT：自动递增，适用于整数类型；</li><li>UNSIGNED：是指数值类型只能为正数；</li><li>CHARACTER SET name：指定一个字符集；</li><li>COMMENT：对表或者字段说明；</li></ul><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><blockquote><p>SELECT 语句用于从表中选取数据。<br>语法：SELECT 列名称 FROM 表名称<br>语法：SELECT * FROM 表名称</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 表station取个别名叫s，表station中不包含 字段id=13或者14 的，并且id不等于4的 查询出来，只显示id</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id <span class="keyword">from</span> station s <span class="keyword">WHERE</span> id <span class="keyword">in</span> (<span class="number">13</span>,<span class="number">14</span>) <span class="keyword">and</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从表 Persons 选取 LastName 列的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> LastName <span class="keyword">FROM</span> Persons</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">3</span> limit <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结果会自动去除company列的重复数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Company <span class="keyword">FROM</span> Orders </span><br><span class="line"><span class="comment">-- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值，</span></span><br><span class="line"><span class="comment">-- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段</span></span><br><span class="line"><span class="keyword">SELECT</span> p.LastName, p.FirstName, o.OrderNo <span class="keyword">FROM</span> Persons p, Orders o <span class="keyword">WHERE</span> p.Id_P <span class="operator">=</span> o.Id_P </span><br><span class="line"></span><br><span class="line"><span class="comment">-- gbk 和 utf8 中英文混合排序最简单的办法 </span></span><br><span class="line"><span class="comment">-- ci是 case insensitive, 即 “大小写不敏感”</span></span><br><span class="line"><span class="keyword">SELECT</span> tag, <span class="built_in">COUNT</span>(tag) <span class="keyword">from</span> news <span class="keyword">GROUP</span> <span class="keyword">BY</span> tag <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">convert</span>(tag <span class="keyword">using</span> gbk) <span class="keyword">collate</span> gbk_chinese_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> tag, <span class="built_in">COUNT</span>(tag) <span class="keyword">from</span> news <span class="keyword">GROUP</span> <span class="keyword">BY</span> tag <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">convert</span>(tag <span class="keyword">using</span> utf8) <span class="keyword">collate</span> utf8_unicode_ci;</span><br></pre></td></tr></tbody></table></figure><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><blockquote><p>Update 语句用于修改表中的数据。<br>语法：UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- update语句设置字段值为另一个结果取出来的字段</span></span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> (<span class="keyword">select</span> name <span class="keyword">from</span> user1 <span class="keyword">where</span> user1 .id <span class="operator">=</span> <span class="number">1</span> )</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> user2 <span class="keyword">where</span> user2 .name<span class="operator">=</span><span class="string">'小苏'</span>);</span><br><span class="line"><span class="comment">-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段</span></span><br><span class="line"> UPDATE `orders` <span class="keyword">set</span> title<span class="operator">=</span><span class="string">'这里是标题'</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><blockquote><p>INSERT INTO 语句用于向表格中插入新的行。<br>语法：INSERT INTO 表名称 VALUES (值1, 值2,….)<br>语法：INSERT INTO 表名称 (列1, 列2,…) VALUES (值1, 值2,….)</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'JSLite'</span>, <span class="string">'shanghai'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向表 meeting 插入 字段 a=1 和字段 b=2</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> meeting <span class="keyword">SET</span> a<span class="operator">=</span><span class="number">1</span>,b<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- -- SQL实现将一个表的数据插入到另外一个表的代码</span></span><br><span class="line"><span class="comment">-- 如果只希望导入指定字段，可以用这种方法：</span></span><br><span class="line"><span class="comment">-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (user_account_id, title) <span class="keyword">SELECT</span> m.user_id, m.title <span class="keyword">FROM</span> meeting m <span class="keyword">where</span> m.id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段；</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `charger` (`id`,`type`,`create_at`,`update_at`) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">2</span>,<span class="string">'2017-05-18 11:06:17'</span>,<span class="string">'2017-05-18 11:06:17'</span>) <span class="keyword">ON</span> DUPLICATE KEY UPDATE `id`<span class="operator">=</span><span class="keyword">VALUES</span>(`id`), `type`<span class="operator">=</span><span class="keyword">VALUES</span>(`type`), `update_at`<span class="operator">=</span><span class="keyword">VALUES</span>(`update_at`);</span><br></pre></td></tr></tbody></table></figure><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><blockquote><p>DELETE 语句用于删除表中的行。<br>语法：DELETE FROM 表名称 WHERE 列名称 = 值</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在不删除table_name表的情况下删除所有的行，清空表。</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="comment">-- 删除 Person表字段 LastName = 'JSLite' </span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName <span class="operator">=</span> <span class="string">'JSLite'</span> </span><br><span class="line"><span class="comment">-- 删除 表meeting id 为2和3的两条数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> meeting <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h2><blockquote><p>WHERE 子句用于规定选择的标准。<br>语法：<code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code>  </p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从表 Persons 中选出 Year 字段大于 1965 的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span><span class="operator">&gt;</span><span class="number">1965</span></span><br></pre></td></tr></tbody></table></figure><h2 id="AND-和-OR"><a href="#AND-和-OR" class="headerlink" title="AND 和 OR"></a>AND 和 OR</h2><blockquote><p>AND - 如果第一个条件和第二个条件都成立；<br>OR - 如果第一个条件和第二个条件中只要有一个成立；  </p></blockquote><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 meeting 表字段 </span></span><br><span class="line"><span class="comment">-- id=2 并且 user_id=5 的数据  和</span></span><br><span class="line"><span class="comment">-- id=3 并且 user_id=6 的数据 </span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> meeting <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">and</span> user_id <span class="keyword">in</span> (<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 AND 来显示所有姓为 "Carter" 并且名为 "Thomas" 的人：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName<span class="operator">=</span><span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName<span class="operator">=</span><span class="string">'Carter'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用 OR 来显示所有姓为 "Carter" 或者名为 "Thomas" 的人：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname<span class="operator">=</span><span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname<span class="operator">=</span><span class="string">'Carter'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><blockquote><p>语句默认按照升序对记录进行排序。<br><code>ORDER BY</code> - 语句用于根据指定的列对结果集进行排序。<br><code>DESC</code> - 按照降序对记录进行排序。<br><code>ASC</code> - 按照顺序对记录进行排序。  </p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Company在表Orders中为字母，则会以字母顺序显示公司名称</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 后面跟上 DESC 则为降序显示</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Company以降序显示公司名称，并OrderNumber以顺序显示</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br></pre></td></tr></tbody></table></figure><h2 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h2><blockquote><p>IN - 操作符允许我们在 WHERE 子句中规定多个值。<br>IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。<br>语法：<code>SELECT "字段名"FROM "表格名"WHERE "字段名" IN ('值一', '值二', ...);</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> LastName <span class="keyword">IN</span> (<span class="string">'Adams'</span>,<span class="string">'Carter'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h2><blockquote><p>NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_name <span class="keyword">FROM</span> Products <span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id <span class="operator">=</span> <span class="string">'DLL01'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</span><br></pre></td></tr></tbody></table></figure><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><blockquote><p>UNION - 操作符用于合并两个或多个 SELECT 语句的结果集。</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名</span></span><br><span class="line"><span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_China <span class="keyword">UNION</span> <span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_USA</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列出 meeting 表中的 pic_url，</span></span><br><span class="line"><span class="comment">-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错</span></span><br><span class="line"><span class="comment">-- 按更新时间排序</span></span><br><span class="line"><span class="keyword">SELECT</span> id,pic_url <span class="keyword">FROM</span> meeting <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> id,number_station <span class="keyword">AS</span> pic_url <span class="keyword">FROM</span> station  <span class="keyword">ORDER</span> <span class="keyword">BY</span> update_at;</span><br><span class="line"><span class="comment">-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'product'</span> <span class="keyword">AS</span> type, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count <span class="keyword">FROM</span> `products` <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">'comment'</span> <span class="keyword">as</span> type, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count <span class="keyword">FROM</span> `comments` <span class="keyword">order</span> <span class="keyword">by</span> count;</span><br></pre></td></tr></tbody></table></figure><h2 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h2><blockquote><p>as - 可理解为：用作、当成，作为；别名<br>一般是重命名列名或者表名。<br>语法：<code>select column_1 as 列1,column_2 as 列2 from table as 表</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> emp</span><br><span class="line"><span class="comment">-- 这句意思是查找所有Employee 表里面的数据，并把Employee表格命名为 emp。</span></span><br><span class="line"><span class="comment">-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.</span></span><br><span class="line"><span class="comment">-- 例如 SELECT * FROM emp.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(OrderPrice) <span class="keyword">AS</span> LargestOrderPrice <span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="comment">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span><br><span class="line"><span class="comment">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示表 users_profile 中的 name 列</span></span><br><span class="line"><span class="keyword">SELECT</span> t.name <span class="keyword">from</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> users_profile a) <span class="keyword">AS</span> t;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up</span></span><br><span class="line"><span class="comment">-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id</span></span><br><span class="line"><span class="comment">-- 结果集只显示mobile、name两列</span></span><br><span class="line"><span class="keyword">SELECT</span> ua.mobile,up.name <span class="keyword">FROM</span> user_accounts <span class="keyword">as</span> ua <span class="keyword">INNER</span> <span class="keyword">JOIN</span> users_profile <span class="keyword">as</span> up <span class="keyword">ON</span> ua.id <span class="operator">=</span> up.user_id;</span><br></pre></td></tr></tbody></table></figure><h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><blockquote><p>用于根据两个或多个表中的列之间的关系，从这些表中查询数据。  </p></blockquote><ul><li><code>JOIN</code>: 如果表中有至少一个匹配，则返回行</li><li><code>INNER JOIN</code>:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</li><li><code>LEFT JOIN</code>: 即使右表中没有匹配，也从左表返回所有的行</li><li><code>RIGHT JOIN</code>: 即使左表中没有匹配，也从右表返回所有的行</li><li><code>FULL JOIN</code>: 只要其中一个表中存在匹配，就返回行(MySQL 是不支持的，通过  <code>LEFT JOIN + UNION + RIGHT JOIN</code> 的方式 来实现)</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Persons.LastName, Persons.FirstName, Orders.OrderNo</span><br><span class="line"><span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Persons.Id_P <span class="operator">=</span> Orders.Id_P</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Persons.LastName;</span><br></pre></td></tr></tbody></table></figure><h2 id="SQL-函数"><a href="#SQL-函数" class="headerlink" title="SQL 函数"></a>SQL 函数</h2><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><blockquote><p>COUNT 让我们能够数出在表格中有多少笔资料被选出来。<br>语法：<code>SELECT COUNT("字段名") FROM "表格名";</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。</span></span><br><span class="line"><span class="comment">-- "IS NOT NULL" 是 "这个栏位不是空白" 的意思。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span> (Store_Name) <span class="keyword">FROM</span> Store_Information <span class="keyword">WHERE</span> Store_Name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>; </span><br><span class="line"><span class="comment">-- 获取 Persons 表的总数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> totals <span class="keyword">FROM</span> Persons;</span><br><span class="line"><span class="comment">-- 获取表 station 字段 user_id 相同的总数</span></span><br><span class="line"><span class="keyword">select</span> user_id, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> totals <span class="keyword">from</span> station <span class="keyword">group</span> <span class="keyword">by</span> user_id;</span><br></pre></td></tr></tbody></table></figure><h3 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h3><blockquote><p>MAX 函数返回一列中的最大值。NULL 值不包括在计算中。<br>语法：<code>SELECT MAX("字段名") FROM "表格名"</code>  </p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></span><br><span class="line"><span class="comment">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(OrderPrice) <span class="keyword">AS</span> LargestOrderPrice <span class="keyword">FROM</span> Orders</span><br></pre></td></tr></tbody></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><blockquote><p>语法：<br>create trigger &lt;触发器名称&gt;<br>{ before | after}             # 之前或者之后出发<br>insert | update | delete      # 指明了激活触发程序的语句的类型<br>on &lt;表名&gt;                     # 操作哪张表<br>for each row                  # 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。<br>&lt;触发器SQL语句&gt;</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> set_userdate BEFORE <span class="keyword">INSERT</span> </span><br><span class="line"><span class="keyword">on</span> `message`</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">set</span> <span class="variable">@statu</span> <span class="operator">=</span> new.status; <span class="comment">-- 声明复制变量 statu</span></span><br><span class="line">  if <span class="variable">@statu</span> <span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span>       <span class="comment">-- 判断 statu 是否等于 0</span></span><br><span class="line">    UPDATE `user_accounts` <span class="keyword">SET</span> status<span class="operator">=</span><span class="number">1</span> <span class="keyword">WHERE</span> openid<span class="operator">=</span>NEW.openid;</span><br><span class="line">  <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">$</span><br><span class="line">DELIMITER ; <span class="comment">-- 恢复结束符号</span></span><br></pre></td></tr></tbody></table></figure><p>OLD和NEW不区分大小写</p><ul><li>NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。</li><li>OLD 用OLD.col_name来引用更新前的某一行的列</li></ul><h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><h3 id="普通索引-INDEX"><a href="#普通索引-INDEX" class="headerlink" title="普通索引(INDEX)"></a>普通索引(INDEX)</h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD INDEX 索引名字 ( <code>字段名字</code> )</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- –直接创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX index_user <span class="keyword">ON</span> <span class="keyword">user</span>(title)</span><br><span class="line"><span class="comment">-- –修改表结构的方式添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX index_name <span class="keyword">ON</span> (<span class="keyword">column</span>(length))</span><br><span class="line"><span class="comment">-- 给 user 表中的 name 字段 添加普通索引(INDEX)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> INDEX index_name (name)</span><br><span class="line"><span class="comment">-- –创建表的时候同时创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">    `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT ,</span><br><span class="line">    `title` <span class="type">char</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    `content` text <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> ,</span><br><span class="line">    `<span class="type">time</span>` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    INDEX index_name (title(length))</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- –删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX index_name <span class="keyword">ON</span> <span class="keyword">table</span></span><br></pre></td></tr></tbody></table></figure><h3 id="主键索引-PRIMARY-key"><a href="#主键索引-PRIMARY-key" class="headerlink" title="主键索引(PRIMARY key)"></a>主键索引(PRIMARY key)</h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD PRIMARY KEY ( <code>字段名字</code> )</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> key (id);</span><br></pre></td></tr></tbody></table></figure><h3 id="唯一索引-UNIQUE"><a href="#唯一索引-UNIQUE" class="headerlink" title="唯一索引(UNIQUE)"></a>唯一索引(UNIQUE)</h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD UNIQUE (<code>字段名字</code>)</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (creattime);</span><br></pre></td></tr></tbody></table></figure><h3 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引(FULLTEXT)"></a>全文索引(FULLTEXT)</h3><blockquote><p>语法：ALTER TABLE <code>表名字</code> ADD FULLTEXT (<code>字段名字</code>)</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> FULLTEXT (description);</span><br></pre></td></tr></tbody></table></figure><h3 id="添加多列索引"><a href="#添加多列索引" class="headerlink" title="添加多列索引"></a>添加多列索引</h3><blockquote><p>语法：<br>ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column1</code>, <code>column2</code>, <code>column3</code>)</p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> INDEX name_city_age (name(<span class="number">10</span>),city,age); </span><br></pre></td></tr></tbody></table></figure><h3 id="建立索引的时机"><a href="#建立索引的时机" class="headerlink" title="建立索引的时机"></a>建立索引的时机</h3><p>在<code>WHERE</code>和<code>JOIN</code>中出现的列需要建立索引，但也不完全如此：</p><ul><li>MySQL只对<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>使用索引</li><li>某些时候的<code>LIKE</code>也会使用索引。</li><li>在<code>LIKE</code>以通配符%和_开头作查询时，MySQL不会使用索引。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 此时就需要对city和age建立索引，</span></span><br><span class="line"><span class="comment">-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</span></span><br><span class="line"><span class="keyword">SELECT</span> t.Name  </span><br><span class="line"><span class="keyword">FROM</span> mytable t <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> mytable m <span class="keyword">ON</span> t.Name<span class="operator">=</span>m.username </span><br><span class="line"><span class="keyword">WHERE</span> m.age<span class="operator">=</span><span class="number">20</span> <span class="keyword">AND</span> m.city<span class="operator">=</span><span class="string">'上海'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> username <span class="keyword">like</span><span class="string">'admin%'</span>; <span class="comment">-- 而下句就不会使用：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> Name <span class="keyword">like</span><span class="string">'%admin'</span>; <span class="comment">-- 因此，在使用LIKE时应注意以上的区别。</span></span><br></pre></td></tr></tbody></table></figure><p>索引的注意事项</p><ul><li>索引不会包含有NULL值的列</li><li>使用短索引</li><li>不要在列上进行运算 索引会失效</li></ul><h2 id="创建后表的修改"><a href="#创建后表的修改" class="headerlink" title="创建后表的修改"></a>创建后表的修改</h2><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><blockquote><p>语法：<code>alter table 表名 add 列名 列数据类型 [after 插入位置];</code></p></blockquote><p>示例:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在表students的最后追加列 address: </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> address <span class="type">char</span>(<span class="number">60</span>);</span><br><span class="line"><span class="comment">-- 在名为 age 的列后插入列 birthday: </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> birthday <span class="type">date</span> after age;</span><br><span class="line"><span class="comment">-- 在名为 number_people 的列后插入列 weeks: </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> <span class="keyword">column</span> `weeks` <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> "" after `number_people`;</span><br></pre></td></tr></tbody></table></figure><h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><blockquote><p>语法：<code>alter table 表名 change 列名称 列新名称 新数据类型;</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将表 tel 列改名为 telphone: </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students change tel telphone <span class="type">char</span>(<span class="number">13</span>) <span class="keyword">default</span> "-";</span><br><span class="line"><span class="comment">-- 将 name 列的数据类型改为 char(16): </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students change name name <span class="type">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">-- 修改 COMMENT 前面必须得有类型属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students change name name <span class="type">char</span>(<span class="number">16</span>) COMMENT <span class="string">'这里是名字'</span>;</span><br><span class="line"><span class="comment">-- 修改列属性的时候 建议使用modify,不需要重建表</span></span><br><span class="line"><span class="comment">-- change用于修改列名字，这个需要重建表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> meeting modify `weeks` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> COMMENT <span class="string">'开放日期 周一到周日：0~6，间隔用英文逗号隔开'</span>;</span><br><span class="line"><span class="comment">-- `user`表的`id`列，修改成字符串类型长度50，不能为空，`FIRST`放在第一列的位置</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `<span class="keyword">user</span>` modify <span class="keyword">COLUMN</span> `id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">FIRST</span> ;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><blockquote><p>语法：<code>alter table 表名 drop 列名称;</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表students中的 birthday 列: </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> birthday;</span><br></pre></td></tr></tbody></table></figure><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><blockquote><p>语法：<code>alter table 表名 rename 新表名;</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重命名 students 表为 workmates: </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students rename workmates;</span><br></pre></td></tr></tbody></table></figure><h3 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h3><blockquote><p>方法一：<code>delete from 表名;</code><br>方法二：<code>truncate table "表名";</code></p></blockquote><ul><li><code>DELETE:</code>1. DML语言;2. 可以回退;3. 可以有条件的删除;</li><li><code>TRUNCATE:</code>1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 清空表为 workmates 里面的数据，不删除表。 </span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> workmates;</span><br><span class="line"><span class="comment">-- 删除workmates表中的所有数据，且无法恢复</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> workmates;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除整张表"><a href="#删除整张表" class="headerlink" title="删除整张表"></a>删除整张表</h3><blockquote><p>语法：<code>drop table 表名;</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 workmates 表: </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> workmates;</span><br></pre></td></tr></tbody></table></figure><h3 id="删除整个数据库"><a href="#删除整个数据库" class="headerlink" title="删除整个数据库"></a>删除整个数据库</h3><blockquote><p>语法：<code>drop database 数据库名;</code></p></blockquote><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 samp_db 数据库: </span></span><br><span class="line"><span class="keyword">drop</span> database samp_db;</span><br></pre></td></tr></tbody></table></figure><h2 id="其它实例"><a href="#其它实例" class="headerlink" title="其它实例"></a>其它实例</h2><h3 id="SQL删除重复记录"><a href="#SQL删除重复记录" class="headerlink" title="SQL删除重复记录"></a>SQL删除重复记录</h3><p><a href="http://www.xiangguo.li/sql_and_nosql/2015/01/01/sql">转载</a></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> people <span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="built_in">count</span>(peopleId) <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 删除表中多余的重复记录，重复记录是根据单个字段（peopleId）来判断，只留有rowid最小的记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> people </span><br><span class="line"><span class="keyword">where</span> peopleId <span class="keyword">in</span> (<span class="keyword">select</span> peopleId <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="built_in">count</span>(peopleId) <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> rowid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">min</span>(rowid) <span class="keyword">from</span> people <span class="keyword">group</span> <span class="keyword">by</span> peopleId <span class="keyword">having</span> <span class="built_in">count</span>(peopleId )<span class="operator">&gt;</span><span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 查找表中多余的重复记录（多个字段）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 删除表中多余的重复记录（多个字段），只留有rowid最小的记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>) <span class="keyword">and</span> rowid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">min</span>(rowid) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 查找表中多余的重复记录（多个字段），不包含rowid最小的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vitae a</span><br><span class="line"><span class="keyword">where</span> (a.peopleId,a.seq) <span class="keyword">in</span> (<span class="keyword">select</span> peopleId,seq <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>) <span class="keyword">and</span> rowid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">min</span>(rowid) <span class="keyword">from</span> vitae <span class="keyword">group</span> <span class="keyword">by</span> peopleId,seq <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="参考手册"><a href="#参考手册" class="headerlink" title="参考手册"></a>参考手册</h2><ul><li><a href="http://www.w3school.com.cn/sql/index.asp">http://www.w3school.com.cn/sql/index.asp</a></li><li><a href="http://www.1keydata.com/cn/sql/sql-count.php">http://www.1keydata.com/cn/sql/sql-count.php</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC核心技术</title>
      <link href="/2020/10/08/jdbc-he-xin-ji-zhu/"/>
      <url>/2020/10/08/jdbc-he-xin-ji-zhu/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>此笔记是观看 <a href="https://www.bilibili.com/video/BV11J411c7sB?from=search&amp;seid=4044749892780872620">此视频</a>  做的笔记，供学习参考用。</p></blockquote><hr><h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566741430592.png" alt="1566741430592"> </p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555575760234.png" alt="1555575760234"></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555575981203.png" alt="1555575981203"></p><hr><ul><li>总结如下：</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566741692804.png" alt="1566741692804"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                ————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1565969323908.png" alt="1565969323908"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555576157618.png" alt="1555576157618"></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566134718955.png" alt="1555576170074"></p><ul><li><p>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566134781682.png" alt="1566134718955"></p></li></ul><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p> <img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566135290460.png" alt="1566134781682"></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566136831283.png" alt="1566135290460"></p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555576170074.png" alt="1566136831283"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555576477107.png" alt="1555576477107"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/atguigu</li><li>jdbc:mysql://localhost:3306/atguigu<strong>?useUnicode=true&amp;characterEncoding=utf8</strong>（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/atguigu?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p></li><li><p>jdbc:sqlserver://localhost:1433:DatabaseName=atguigu</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection1</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="comment">//1.提供java.sql.Driver接口实现类的对象</span></span><br><span class="line">           Driver driver = <span class="keyword">null</span>;</span><br><span class="line">           driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">           info.setProperty(<span class="string">"password"</span>, <span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       } <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection2</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="comment">//1.实例化Driver</span></span><br><span class="line">           String className = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">           Class clazz = Class.forName(className);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">           info.setProperty(<span class="string">"password"</span>, <span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line"></span><br><span class="line">       } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection3</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">           String user = <span class="string">"root"</span>;</span><br><span class="line">           String password = <span class="string">"abc123"</span>;</span><br><span class="line">           String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.实例化Driver</span></span><br><span class="line">           Class clazz = Class.forName(driverName);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           DriverManager.registerDriver(driver);</span><br><span class="line">           <span class="comment">//4.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection4</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">           String user = <span class="string">"root"</span>;</span><br><span class="line">           String password = <span class="string">"abc123"</span>;</span><br><span class="line">           String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span></span><br><span class="line">           Class.forName(driverName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           <span class="comment">//DriverManager.registerDriver(driver);</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span></span><br><span class="line"><span class="comment">           static {</span></span><br><span class="line"><span class="comment">               try {</span></span><br><span class="line"><span class="comment">                   DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">               } catch (SQLException var1) {</span></span><br><span class="line"><span class="comment">                   throw new RuntimeException("Can't register driver!");</span></span><br><span class="line"><span class="comment">               }</span></span><br><span class="line"><span class="comment">           }</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">       Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">       String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">       String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">       String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(conn);</span><br><span class="line"></span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566573842140.png" alt="1566573842140"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> excuteUpdate(String <span class="keyword">sql</span>)：执行更新操作<span class="keyword">INSERT</span>、UPDATE、<span class="keyword">DELETE</span></span><br><span class="line">ResultSet executeQuery(String <span class="keyword">sql</span>)：执行查询操作<span class="keyword">SELECT</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatementTest</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> </span>{</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"用户名："</span>);</span><br><span class="line">String userName = scan.nextLine();</span><br><span class="line">System.out.print(<span class="string">"密   码："</span>);</span><br><span class="line">String password = scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1';</span></span><br><span class="line">String sql = <span class="string">"SELECT user,password FROM user_table WHERE USER = '"</span> + userName + <span class="string">"' AND PASSWORD = '"</span> + password</span><br><span class="line">+ <span class="string">"'"</span>;</span><br><span class="line">User user = get(sql, User.class);</span><br><span class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) {</span><br><span class="line">System.out.println(<span class="string">"登陆成功!"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.println(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement实现对数据表的查询操作</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String sql, Class&lt;T&gt; clazz)</span> </span>{</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 1.加载配置文件</span></span><br><span class="line">InputStream is = StatementTest.class.getClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取配置信息</span></span><br><span class="line">String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.加载驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.获取连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的元数据</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的列数</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) {</span><br><span class="line"></span><br><span class="line">t = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) {</span><br><span class="line"><span class="comment">// //1. 获取列的名称</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i+1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取列的别名</span></span><br><span class="line">String columnName = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据列名获取对应数据表中的数据</span></span><br><span class="line">Object columnVal = rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将数据表中得到的数据，封装进对象</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">rs.close();</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (st != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">st.close();</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">conn.close();</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>综上：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566569819744.png" alt="1566569819744"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>{</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++){</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">}<span class="keyword">finally</span>{</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) {</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) {</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) {<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555580152530.png" alt="1555580152530"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p></li></ul></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555579494691.png" alt="1555579494691"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555579816884.png" alt="1555579816884"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555580735377.png" alt="1555580275036"></p><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555580763636.png" alt="1555580735377"></p><p>向数据表中添加如下数据：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555580275036.png" alt="1555580763636"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555580965019.png" alt="1555580937490"></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555580937490.png" alt="1555580965019"></p><hr><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555581069798.png" alt="1555581069798"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into customers(name,email,birth,photo)values(?,?,?,?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"徐海强"</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">"xhq@126.com"</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xhq.png"</span>);</span><br><span class="line">ps.setBlob(<span class="number">4</span>, fis);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">String sql = <span class="string">"update customers set photo = ? where id = ?"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"coffee.png"</span>);</span><br><span class="line">ps.setBlob(<span class="number">1</span>, fis);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT id, name, email, birth, photo FROM customer WHERE id = ?"</span>;</span><br><span class="line">conn = getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()){</span><br><span class="line">Integer id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">String email = rs.getString(<span class="number">3</span>);</span><br><span class="line">    Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">    System.out.println(cust); </span><br><span class="line">    <span class="comment">//读取Blob类型的字段</span></span><br><span class="line">Blob photo = rs.getBlob(<span class="number">5</span>);</span><br><span class="line">InputStream is = photo.getBinaryStream();</span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"c.jpg"</span>);</span><br><span class="line"><span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>){</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">}</span><br><span class="line">    JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is != <span class="keyword">null</span>){</span><br><span class="line">is.close();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(os !=  <span class="keyword">null</span>){</span><br><span class="line">os.close();</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++){</span><br><span class="line">String sql = <span class="string">"insert into goods(name) values('name_' + "</span>+ i +<span class="string">")"</span>;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++){</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//82340</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></tbody></table></figure><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span></span><br><span class="line"><span class="comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span></span><br><span class="line"><span class="comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++){</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>){</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//20000条：625                                                                         //1000000条:14733  </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 层次四：在层次三的基础上操作</span></span><br><span class="line"><span class="comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++){</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>){</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//1000000条:4978 </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都<strong>被提交(commit)</strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务<strong>回滚(rollback)</strong>到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBCTransaction</span><span class="params">()</span> </span>{</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line">String sql1 = <span class="string">"update user_table set balance = balance - 100 where user = ?"</span>;</span><br><span class="line">update(conn, sql1, <span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">String sql2 = <span class="string">"update user_table set balance = balance + 100 where user = ?"</span>;</span><br><span class="line">update(conn, sql2, <span class="string">"BB"</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">conn.rollback();</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e1) {</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">}</span><br><span class="line">    } <span class="keyword">finally</span> {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>, <span class="keyword">null</span>); </span><br><span class="line">    }  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> </span>{</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) {</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555586275271.png" alt="1555586275271"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li></ul><ul><li>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation;</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level read committed;</span><br></pre></td></tr></tbody></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read committed;</span><br></pre></td></tr></tbody></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user tom identified by 'abc123';</span><br></pre></td></tr></tbody></table></figure></li><li><p>授予权限</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.</span><br><span class="line">grant all privileges on *.* to tom@'%'  identified by 'abc123'; </span><br><span class="line"></span><br><span class="line"> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。</span><br><span class="line">grant select,insert,delete,update on atguigudb.* to tom@localhost identified by 'abc123'; </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ul></li></ul><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566726681515.png" alt="1566726681515"></p><ul><li>层次结构：</li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555593598606.png" alt="1566745811244"></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HanYanBing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"><span class="comment">// 定义一个变量来接收泛型的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDao</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 获取子类的类型</span></span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line"><span class="comment">// 获取父类的类型</span></span><br><span class="line"><span class="comment">// getGenericSuperclass()用来获取当前类的父类的类型</span></span><br><span class="line"><span class="comment">// ParameterizedType表示的是带泛型的类型</span></span><br><span class="line">ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line"><span class="comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span></span><br><span class="line"><span class="comment">// 这个方法会返回一个Type的数组</span></span><br><span class="line">Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">// 获取具体的泛型的类型·</span></span><br><span class="line"><span class="keyword">this</span>.type = (Class&lt;T&gt;) types[<span class="number">0</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>{</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">count = queryRunner.update(conn, sql, params);</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getBean</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>{</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">t = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(type), params);</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>{</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">list = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(type), params);</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>{</span><br><span class="line">Object count = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">// 调用queryRunner的query方法获取一个单一的值</span></span><br><span class="line">count = queryRunner.query(conn, sql, <span class="keyword">new</span> ScalarHandler&lt;&gt;(), params);</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">} </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询出所有的记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中根据图书的id删除一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中查询出一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中更新一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页和价格范围的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span></span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入User对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.Page;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span> </span>{</span><br><span class="line"><span class="comment">// 调用BaseDao中得到一个List的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books"</span>;</span><br><span class="line">beanList = getBeanList(conn,sql);</span><br><span class="line"><span class="keyword">return</span> beanList;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span> </span>{</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span> </span>{</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"DELETE FROM books WHERE id = ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用增删改的方法</span></span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span> </span>{</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">Book book = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books where id = ?"</span>;</span><br><span class="line">book = getBean(conn,sql, bookId);</span><br><span class="line"><span class="keyword">return</span> book;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span> </span>{</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span> </span>{</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">"select count(*) from books"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span> </span>{</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">"select count(*) from books where price between ? and ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span> </span>{</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,username,password,email from users where username = ? and password = ?"</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span> </span>{</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,username,password,email from users where username = ?"</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername());</span><br><span class="line"><span class="keyword">return</span> bean != <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span> </span>{</span><br><span class="line"><span class="comment">//写sql语句</span></span><br><span class="line">String sql = <span class="string">"insert into users(username,password,email) values(?,?,?)"</span>;</span><br><span class="line"><span class="comment">//调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String title; <span class="comment">// 书名</span></span><br><span class="line"><span class="keyword">private</span> String author; <span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">// 价格</span></span><br><span class="line"><span class="keyword">private</span> Integer sales; <span class="comment">// 销量</span></span><br><span class="line"><span class="keyword">private</span> Integer stock; <span class="comment">// 库存</span></span><br><span class="line"><span class="keyword">private</span> String imgPath = <span class="string">"static/img/default.jpg"</span>; <span class="comment">// 封面图片的路径</span></span><br><span class="line"><span class="comment">//构造器，get()，set()，toString()方法略</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list; <span class="comment">// 每页查到的记录存放的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">4</span>; <span class="comment">// 每页显示的记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNo; <span class="comment">// 当前页</span></span><br><span class="line"><span class="comment">//private int totalPageNo; // 总页数，通过计算得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalRecord; <span class="comment">// 总记录数，通过查询数据库得到</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> songhongkang</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555593464033.png" alt="1555593464033"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1566745811244.png" alt="1555593598606"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">cpds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">cpds.setUser(<span class="string">"root"</span>);</span><br><span class="line">cpds.setPassword(<span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource cpds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>{</span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"helloc3p0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">BasicDataSource source = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">source.setUrl(<span class="string">"jdbc:mysql:///test"</span>);</span><br><span class="line">source.setUsername(<span class="string">"root"</span>);</span><br><span class="line">source.setPassword(<span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource source = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span>{</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">InputStream is = DBCPTest.class.getClassLoader().getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></tbody></table></figure><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="string">"druid.properties"</span>));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></tbody></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li><p>API包说明：</p></li></ul><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555595163263.png" alt="1555595163263"></p><p><img src="https://gitee.com/ma_tung_zhou/imageuse1/raw/master/imgg/1555595198644.png" alt="1555595198644"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <t> T insert(Connection conn,String sql,ResultSetHandler<t> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</t></t></li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <t> T insertBatch(Connection conn,String sql,ResultSetHandler<t> rsh,Object[][] params)throws SQLException：只支持INSERT语句</t></t></li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">"insert into customers(name,email,birth)values(?,?,?)"</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql, <span class="string">"何成飞"</span>, <span class="string">"he@qq.com"</span>, <span class="string">"1992-09-08"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"添加了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">"delete from customers where id &lt; ?"</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"删除了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li></ul><ul><li>测试</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer.class);</span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id &lt; ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer.class);</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id = ?"</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() {</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">System.out.println(<span class="string">"handle"</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,"Tom","tom@126.com",new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next()){</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="string">"birth"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>{</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = "select count(*) from customers where id &lt; ?";</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line">String sql = <span class="string">"select max(birth) from customers"</span>;</span><br><span class="line">ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">Date birth = (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">//1.获取连接的操作（</span></span><br><span class="line"><span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line"><span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line"><span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line"><span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args){}</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args){}</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">conn.rollback();</span><br><span class="line">} <span class="keyword">catch</span> (SQLException e1) {</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}<span class="keyword">finally</span>{</span><br><span class="line"><span class="comment">//3.关闭连接等操作</span></span><br><span class="line"><span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习算法实现</title>
      <link href="/2020/07/16/ji-qi-xue-xi-suan-fa-shi-xian/"/>
      <url>/2020/07/16/ji-qi-xue-xi-suan-fa-shi-xian/</url>
      
        <content type="html"><![CDATA[<h3 id="机器学习算法实现"><a href="#机器学习算法实现" class="headerlink" title="机器学习算法实现"></a>机器学习算法实现</h3><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716191936979.png" alt="image-20200716191936979"></p><h4 id="smile-本仓库是《scikit-learn-机器学习-常用算法及编程实战》的学习笔记，使用sklearn实现常用的机器学习算法，附有代码、文档以及相关数据集。"><a href="#smile-本仓库是《scikit-learn-机器学习-常用算法及编程实战》的学习笔记，使用sklearn实现常用的机器学习算法，附有代码、文档以及相关数据集。" class="headerlink" title=":smile: 本仓库是《scikit-learn 机器学习 常用算法及编程实战》的学习笔记，使用sklearn实现常用的机器学习算法，附有代码、文档以及相关数据集。"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> 本仓库是《scikit-learn 机器学习 常用算法及编程实战》的学习笔记，使用sklearn实现常用的机器学习算法，附有代码、文档以及相关数据集。</h4><p>项目地址： <a href="https://github.com/DongZhouGu/scikit-learn-ml">https://github.com/DongZhouGu/scikit-learn-ml</a></p><h4 id="smile-也可以到我的网站上阅读"><a href="#smile-也可以到我的网站上阅读" class="headerlink" title=":smile:也可以到我的网站上阅读"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>也可以到<a href="https://dongzhougu.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">我的网站</a>上阅读</h4><ol><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/1.%20K-%E8%BF%91%E9%82%BB">K-近邻算法</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/2.%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92">线性回归算法</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/3.%20%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92">逻辑回归算法</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/4.%20%E5%86%B3%E7%AD%96%E6%A0%91">决策树算法</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/5.%20%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM">支持向量机SVM</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/6.%20%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF">朴素贝叶斯算法</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/7.%20PCA">PCA算法</a></li><li><a href="https://github.com/DongZhouGu/scikit-learn-ml/tree/master/8.%20K-%E5%9D%87%E5%80%BC">K-均值算法</a></li></ol><hr><p>scikit-learn是一个开源的Python语言机器学习工具包。它涵盖了几乎所有主流机器学习算法的实现，并且提供了一致的调用接口。它基于Numpy和SciPy等Python数值计算库，提供了高效的算法实现。总结起来，scikit-learn工具包有以下几个优点：</p><ul><li>文档齐全：官方文档齐全，更新及时。</li><li>接口易用：针对所有的算法提供了一致的接口调用规则，不管是KNN、K-Means还是PCA。</li><li>算法全面：涵盖主流机器学习任务的算法，包括回归算法、分类算法、聚类分析、数据降维处理等。</li></ul><p>当然，scikit-learn不支持分布式计算，不适合用来处理超大型数据，但这并不影响scikit-learn作为一个优秀的机器学习工具库这个事实。</p><h3 id="机器学习应用开发的典型步骤"><a href="#机器学习应用开发的典型步骤" class="headerlink" title="机器学习应用开发的典型步骤"></a>机器学习应用开发的典型步骤</h3><p>假设：要开发一个房价评估系统，目标是对一个已知特征的房子价格进行评估预测。</p><p>建立这样一个系统，通常包括以下几个步骤：</p><h5 id="（1）数据采集和标记"><a href="#（1）数据采集和标记" class="headerlink" title="（1）数据采集和标记"></a>（1）数据采集和标记</h5><p>我们需要大量不同特征的房子和所对应的价格信息，可以直接从房产评估中心获取房子的相关信息，如房子的面子、地理位置、朝向、价格等。另外还有一些信息房产评估中心不一定有，比如房子所在地的学校情况，这一特征往往会影响房子的价格，这个时候就需要通过其他途径收集这些数据。以上收集到的所有数据叫做训练样本，或数据集。房子的面积、地理位置等称为特征。在数据采集阶段，需要收集尽量多的特征。特征越全、数据越多，训练出来的模型才会越准确。</p><p>我们的房屋价格信息是从房产评估中心获得的，这一数据可能不准确。因为有时为了避税，房屋的评估价格会比房子的真实交易价格低很多。这时就需要采集房子的实际成交价格，这一过程称为数据标记。数据标记可以是人工标记，比如逐个从房产中介那里打听房子的实际成交价格；也可以是自动标记，比如通过分析数据，找出房产评估中心给的房子评估价格和真实成交价格的匹配关系，然后直接算出来。数据标记对有监督的学习方法是必须的。比如，针对垃圾邮件过滤系统，训练样本必须包含该邮件是否为垃圾邮件的标记数据。</p><h5 id="（2）数据清洗"><a href="#（2）数据清洗" class="headerlink" title="（2）数据清洗"></a>（2）数据清洗</h5><p>假设我们采集到的数据里，关于房子的面积，有按平方米计算的，也有按平方英尺计算的，这时需要对面积单位进行统一。这个过程称为数据清洗。数据清洗还包括去掉重复数据及噪声数据，让数据具备结构化特征，以方便作为机器学习算法的输入。</p><h5 id="（3）特征选择"><a href="#（3）特征选择" class="headerlink" title="（3）特征选择"></a>（3）特征选择</h5><p>假设我们采集到了房子的100个特征，通过逐个分析这些特征，最终选择了30个特征作为输入。这个过程称为特征选择。特征选择的方法之一是人工选择，即对逐个特征进行人工分析，然后选择合适的特征集合。另外一个方法是通过模型来自动选择，如后面将要介绍的主成分分析（PCA）算法。</p><h5 id="（4）模型选择"><a href="#（4）模型选择" class="headerlink" title="（4）模型选择"></a>（4）模型选择</h5><p>房价评估系统是属于有监督学习的回归学习类型，我们可以选择最简单的线性模型来模拟。选择哪个模型，和问题领域、数据量大小、训练时长、模型的准确度等多方面因素有关。这些内容将在第3章进行介绍。</p><h5 id="（5）模型训练和测试"><a href="#（5）模型训练和测试" class="headerlink" title="（5）模型训练和测试"></a>（5）模型训练和测试</h5><p>把数据集分成训练数据集和测试数据集，一般按照8:2或者7:3来划分，然后用训练数据集来训练模型。训练出参数后再使用测试数据集来测试模型的准确度。为什么要分出一个单独的测试数据集来做测试呢？答案是必须保证测试的准确性，即模型的准确性是要用它没见过的数据来测试，而不能用那些用来训练这个模型的数据来测试。理论上更合理的数据集划分方案是分成3个，即再分出一个交叉验证数据集。这些内容将在第3章进行介绍。</p><h5 id="（6）模型性能评估和优化"><a href="#（6）模型性能评估和优化" class="headerlink" title="（6）模型性能评估和优化"></a>（6）模型性能评估和优化</h5><p>模型训练出来后，需要对该模型进行性能评估。性能评估一般包括以下几个方面：</p><p>训练时长：是指需要花多少时间来训练这个模型。对于一些海量数据的机器学习应用，可能需要1个月甚至更长的时间来训练一个模型，这个时候算法的训练性能就变得很重要了。</p><p>另外，还需要判断数据集是否足够多。一般而言，对于复杂特征的系统，训练数据集越大越好。</p><p>然后还需要判断模型的准确性，即对于一个新的数据能否准确的进行预测。</p><p>最后需要判断模型是否能满足应用场景的性能要求，如果不能满足要求，就需要优化，然后继续对模型进行训练和评估，或者更换为其他模型。</p><h5 id="（7）模型使用"><a href="#（7）模型使用" class="headerlink" title="（7）模型使用"></a>（7）模型使用</h5><p>训练出来的模型可以把参数保存起来，下次使用时直接加载即可。一般来讲，模型训练需要的计算量是很大的，也需要较长的时间来训练，这是因为一个好的模型参数，需要对大型数据集进行训练后才能得到。而真正使用模型时，其计算量是比较少的，一般是直接把新样本作为输入，然后调用模型即可得出结果。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 开源项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列九：K-均值</title>
      <link href="/2020/07/16/scikit-learn-xi-lie-jiu-k-jun-zhi/"/>
      <url>/2020/07/16/scikit-learn-xi-lie-jiu-k-jun-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="K-Means聚类算法"><a href="#K-Means聚类算法" class="headerlink" title="K-Means聚类算法"></a>K-Means聚类算法</h2><p>聚类，简单来说，就是将一个庞杂数据集中具有相似特征的数据自动归类到一起，称为一个簇，簇内的对象越相似，聚类的效果越好。它是一种无监督的学习(Unsupervised Learning)方法,不需要预先标注好的训练集。聚类与分类最大的区别就是分类的目标事先已知，例如猫狗识别，你在分类之前已经预先知道要将它分为猫、狗两个种类；而在你聚类之前，你对你的目标是未知的，同样以动物为例，对于一个动物集来说，你并不清楚这个数据集内部有多少种类的动物，你能做的只是利用聚类方法将它自动按照特征分为多类，然后人为给出这个聚类结果的定义（即簇识别）。例如，你将一个动物集分为了三簇（类），然后通过观察这三类动物的特征，你为每一个簇起一个名字，如大象、狗、猫等，这就是聚类的基本思想。     </p><p>至于“相似”这一概念，是利用距离这个评价标准来衡量的，我们通过计算对象与对象之间的距离远近来判断它们是否属于同一类别，即是否是同一个簇。至于距离如何计算，科学家们提出了许多种距离的计算方法，其中欧式距离是最为简单和常用的，除此之外还有曼哈顿距离和余弦相似性距离等。</p><p>欧式距离，我想大家再熟悉不过了，但为免有一些基础薄弱的同学，在此再说明一下，它的定义为:<br>对于x点坐标为(x1,x2,x3,…,xn)和 y点坐标为(y1,y2,y3,…,yn)，两者的欧式距离为:<br>$$<br>d(x,y)<br>    ={\sqrt{<br>            (x_{1}-y_{1})^{2}+(x_{2}-y_{2})^{2} + \cdots +(x_{n}-y_{n})^{2}<br>        }}<br>    ={\sqrt{<br>            \sum_{ {i=1} }^{n}(x_{i}-y_{i})^{2}<br>        }}<br>$$</p><p>在二维平面，它就是我们初中时就学过的两点距离公式</p><h2 id="1-K-Means-算法"><a href="#1-K-Means-算法" class="headerlink" title="1. K-Means 算法"></a>1. K-Means 算法</h2><p>K-Means 是发现给定数据集的 K 个簇的聚类算法, 之所以称之为 <code>K-均值</code> 是因为它可以发现 K 个不同的簇, 且每个簇的中心采用簇中所含值的均值计算而成.<br>簇个数 K 是用户指定的, 每一个簇通过其质心（centroid）, 即簇中所有点的中心来描述.<br>聚类与分类算法的最大区别在于, 分类的目标类别已知, 而聚类的目标类别是未知的. </p><p><strong>优点</strong>:</p><ul><li>属于无监督学习，无须准备训练集</li><li>原理简单，实现起来较为容易</li><li>结果可解释性较好</li></ul><p><strong>缺点</strong>:</p><ul><li><strong>需手动设置k值</strong>。 在算法开始预测之前，我们需要手动设置k值，即估计数据大概的类别个数，不合理的k值会使结果缺乏解释性</li><li>可能收敛到局部最小值, 在大规模数据集上收敛较慢</li><li>对于异常点、离群点敏感</li></ul><p>使用数据类型 : 数值型数据</p><h3 id="1-1-K-Means-场景"><a href="#1-1-K-Means-场景" class="headerlink" title="1.1 K-Means 场景"></a>1.1 K-Means 场景</h3><p>kmeans，如前所述，用于数据集内种类属性不明晰，希望能够通过数据挖掘出或自动归类出有相似特点的对象的场景。其商业界的应用场景一般为挖掘出具有相似特点的潜在客户群体以便公司能够重点研究、对症下药。  </p><p>例如，在2000年和2004年的美国总统大选中，候选人的得票数比较接近或者说非常接近。任一候选人得到的普选票数的最大百分比为50.7%而最小百分比为47.9% 如果1%的选民将手中的选票投向另外的候选人，那么选举结果就会截然不同。 实际上，如果妥善加以引导与吸引，少部分选民就会转换立场。尽管这类选举者占的比例较低，但当候选人的选票接近时，这些人的立场无疑会对选举结果产生非常大的影响。如何找出这类选民，以及如何在有限的预算下采取措施来吸引他们？ 答案就是聚类（Clustering)。</p><p>那么，具体如何实施呢？首先，收集用户的信息，可以同时收集用户满意或不满意的信息，这是因为任何对用户重要的内容都可能影响用户的投票结果。然后，将这些信息输入到某个聚类算法中。接着，对聚类结果中的每一个簇（最好选择最大簇 ）， 精心构造能够吸引该簇选民的消息。最后， 开展竞选活动并观察上述做法是否有效。</p><p>另一个例子就是产品部门的市场调研了。为了更好的了解自己的用户，产品部门可以采用聚类的方法得到不同特征的用户群体，然后针对不同的用户群体可以对症下药，为他们提供更加精准有效的服务。</p><h3 id="1-2-K-Means-术语"><a href="#1-2-K-Means-术语" class="headerlink" title="1.2 K-Means 术语"></a>1.2 K-Means 术语</h3><ul><li>簇: 所有数据的点集合，簇中的对象是相似的。</li><li>质心: 簇中所有点的中心（计算所有点的均值而来）.</li><li>SSE: Sum of Sqared Error（误差平方和）, 它被用来评估模型的好坏，SSE 值越小，表示越接近它们的质心. 聚类效果越好。由于对误差取了平方，因此更加注重那些远离中心的点（一般为边界点或离群点）。详情见kmeans的评价标准。</li></ul><p>有关 <code>簇</code> 和 <code>质心</code> 术语更形象的介绍, 请参考下图:</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/apachecn-k-means-term-1.jpg" alt="K-Means 术语图"></p><h3 id="1-3-K-Means-工作流程"><a href="#1-3-K-Means-工作流程" class="headerlink" title="1.3 K-Means 工作流程"></a>1.3 K-Means 工作流程</h3><ol><li>首先, 随机确定 K 个初始点作为质心（<strong>不必是数据中的点</strong>）。</li><li>然后将数据集中的每个点分配到一个簇中, 具体来讲, 就是为每个点找到距其最近的质心, 并将其分配该质心所对应的簇. 这一步完成之后, 每个簇的质心更新为该簇所有点的平均值.<br>3.重复上述过程直到数据集中的所有点都距离它所对应的质心最近时结束。</li></ol><p>上述过程的 <code>伪代码</code> 如下:</p><ul><li>创建 k 个点作为起始质心（通常是随机选择）</li><li>当任意一个点的簇分配结果发生改变时（不改变时算法结束）<ul><li>对数据集中的每个数据点<ul><li>对每个质心<ul><li>计算质心与数据点之间的距离</li></ul></li><li>将数据点分配到距其最近的簇</li></ul></li><li>对每一个簇, 计算簇中所有点的均值并将均值作为质心</li></ul></li></ul><h2 id="2-sklearn-里的K-均值算法"><a href="#2-sklearn-里的K-均值算法" class="headerlink" title="2. sklearn 里的K-均值算法"></a>2. sklearn 里的K-均值算法</h2><p>cikit-learn里的K-均值算法由sklearn.cluster.KMeans类实现。下面通过一个简单的例子，来学习怎样在scikit-learn里使用K-均值算法。</p><p>我们生成一组包含两个特征的200个样本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line">X,y = make_blobs(n_samples=<span class="number">200</span>,</span><br><span class="line">                n_features=<span class="number">2</span>,</span><br><span class="line">                centers=<span class="number">4</span>,</span><br><span class="line">                cluster_std=<span class="number">1</span>,</span><br><span class="line">                center_box=(-<span class="number">10.0</span>,<span class="number">10.0</span>),</span><br><span class="line">                shuffle=<span class="literal">True</span>,</span><br><span class="line">                random_state=<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>然后把样本画在二维坐标系上，以便直观地观察：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],s=<span class="number">20</span>,marker=<span class="string">'o'</span>)</span><br></pre></td></tr></tbody></table></figure><p>结果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716173322275.png" alt="image-20200716173322275"></p><p>接着使用 <code>KMeans</code> 模型来拟合。我们设置类别个数为3，并计算出其拟合后的成本。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">n_clusters = <span class="number">3</span></span><br><span class="line">kmeans = KMeans(n_clusters=n_clusters)</span><br><span class="line">kmeans.fit(X)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"kmeans: k = {}, cost = {}"</span>.<span class="built_in">format</span>(n_clusters,<span class="built_in">int</span>(kmeans.score(X))))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kmeans: k = <span class="number">3</span>, cost = -<span class="number">668</span></span><br></pre></td></tr></tbody></table></figure><p><code>KMeans.score()</code> 函数计算K-均值算法拟合后的成本，用负数表示，其绝对值越大，说明成本越高。前面介绍过，K-均值算法成本的物理意义为训练样本到其所属的聚类中心的距离平均值，在 <code>scikit-learn</code> 里，其计算成本的方法略有不同，它是计算训练样本到其所属的聚类中心的距离的总和。</p><p>当然我们还可以把分类后的样本及其所属的聚类中心都画出来，这样可以更直观地观察算法的拟合效果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">labels = kmean.labels_</span><br><span class="line">centers = kmean.cluster_centers_</span><br><span class="line">markers = [<span class="string">'o'</span>, <span class="string">'^'</span>, <span class="string">'*'</span>]</span><br><span class="line">colors = [<span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'y'</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line">plt.xticks(())</span><br><span class="line">plt.yticks(())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画样本</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n_clusters):</span><br><span class="line">    cluster = X[labels == c]</span><br><span class="line">    plt.scatter(cluster[:, <span class="number">0</span>], cluster[:, <span class="number">1</span>], </span><br><span class="line">                marker=markers[c], s=<span class="number">20</span>, c=colors[c])</span><br><span class="line"><span class="comment"># 画出中心点</span></span><br><span class="line">plt.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>],</span><br><span class="line">            marker=<span class="string">'o'</span>, c=<span class="string">"white"</span>, alpha=<span class="number">0.9</span>, s=<span class="number">300</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(centers):</span><br><span class="line">    plt.scatter(c[<span class="number">0</span>], c[<span class="number">1</span>], marker=<span class="string">'$%d$'</span> % i, s=<span class="number">50</span>, c=colors[i])</span><br></pre></td></tr></tbody></table></figure><p>输出结果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716173439992.png" alt="image-20200716173439992"></p><p>前面说过，K-均值算法的一个关键参数是K，即聚类个数。从技术角度来讲，K值越大，算法成本越低，这个很容易理解。但从业务角度来看，不是K值越大越好。针对本节的例子，分别选择K=[2,3,4]这三种不同的聚类个数，来观察一下K-均值算法最终拟合的结果及其成本。</p><p>我们可以把画出K-均值聚类结果的代码稍微改造一下，变成一个函数。这个函数会使用K-均值算法来进行聚类拟合，同时会画出按照这个聚类个数拟合后的分类情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit_plot_kmean_model</span>(<span class="params">n_clusters, X</span>):</span></span><br><span class="line">    plt.xticks(())</span><br><span class="line">    plt.yticks(())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 k-均值算法进行拟合</span></span><br><span class="line">    kmean = KMeans(n_clusters=n_clusters)</span><br><span class="line">    kmean.fit_predict(X)</span><br><span class="line"></span><br><span class="line">    labels = kmean.labels_</span><br><span class="line">    centers = kmean.cluster_centers_</span><br><span class="line">    markers = [<span class="string">'o'</span>, <span class="string">'^'</span>, <span class="string">'*'</span>, <span class="string">'s'</span>]</span><br><span class="line">    colors = [<span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'y'</span>, <span class="string">'k'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算成本</span></span><br><span class="line">    score = kmean.score(X)</span><br><span class="line">    plt.title(<span class="string">"k={}, score={}"</span>.<span class="built_in">format</span>(n_clusters, (<span class="built_in">int</span>)(score)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画样本</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n_clusters):</span><br><span class="line">        cluster = X[labels == c]</span><br><span class="line">        plt.scatter(cluster[:, <span class="number">0</span>], cluster[:, <span class="number">1</span>], </span><br><span class="line">                    marker=markers[c], s=<span class="number">20</span>, c=colors[c])</span><br><span class="line">    <span class="comment"># 画出中心点</span></span><br><span class="line">    plt.scatter(centers[:, <span class="number">0</span>], centers[:, <span class="number">1</span>],</span><br><span class="line">                marker=<span class="string">'o'</span>, c=<span class="string">"white"</span>, alpha=<span class="number">0.9</span>, s=<span class="number">300</span>)</span><br><span class="line">    <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(centers):</span><br><span class="line">        plt.scatter(c[<span class="number">0</span>], c[<span class="number">1</span>], marker=<span class="string">'$%d$'</span> % i, s=<span class="number">50</span>, c=colors[i])</span><br></pre></td></tr></tbody></table></figure><p>函数接受两个参数，一个是聚类个数，即K的值，另一个是数据样本。有了这个函数，接下来就简单了，可以很容易分别对[2,3,4]这三种不同的K值情况进行聚类分析，并把聚类结果可视化。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line">n_clusters = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">3</span>), dpi=<span class="number">144</span>)</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(n_clusters):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, i + <span class="number">1</span>)</span><br><span class="line">    fit_plot_kmean_model(c, X)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716175104911.png" alt="image-20200716175104911"></p><h2 id="3-使用K-均值对文档进行聚类分析"><a href="#3-使用K-均值对文档进行聚类分析" class="headerlink" title="3. 使用K-均值对文档进行聚类分析"></a>3. 使用K-均值对文档进行聚类分析</h2><p>本节介绍如何使用K-均值算法对文档进行聚类分析。假设有一个博客平台，用户在平台上发布博客，我们如何对博客进行聚类分析，以方便展示不同类别下的热门文章呢？</p><h3 id="3-1-加载数据集"><a href="#3-1-加载数据集" class="headerlink" title="3.1 加载数据集"></a>3.1 加载数据集</h3><p>我们的任务就是把数据集目录下<code>data/</code>的文档进行聚类分析。你可能有疑问：这些文档不是按照文件夹已经分好类了吗？是的，这是人工标记了的数据。有了人工标记的数据，就可以检验K-均值算法的性能。</p><p>首先需要导入数据：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from time <span class="keyword">import</span> time</span><br><span class="line">from sklearn.datasets <span class="keyword">import</span> load_files</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"loading documents ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">docs = load_files(<span class="string">'datasets/clustering/data'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"summary: {0} documents in {1} categories."</span>.format(</span><br><span class="line">    <span class="built_in">len</span>(docs.data), <span class="built_in">len</span>(docs.target_names)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.format(time() - t))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loading documents ...</span><br><span class="line">summary: 3949 documents <span class="keyword">in</span> 4 categories.</span><br><span class="line"><span class="keyword">done</span> <span class="keyword">in</span> 26.920000076293945 seconds</span><br></pre></td></tr></tbody></table></figure><p>总共有3949篇文章，人工标记在4个类别里。接着把文档转化为TF-IDF向量：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"></span><br><span class="line">max_features = <span class="number">20000</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"vectorizing documents ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">vectorizer = TfidfVectorizer(max_df=<span class="number">0.4</span>, </span><br><span class="line">                             min_df=<span class="number">2</span>, </span><br><span class="line">                             max_features=max_features, </span><br><span class="line">                             encoding=<span class="string">'latin-1'</span>)</span><br><span class="line">X = vectorizer.fit_transform((d <span class="keyword">for</span> d <span class="keyword">in</span> docs.data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"n_samples: %d, n_features: %d"</span> % X.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"number of non-zero features in sample [{0}]: {1}"</span>.<span class="built_in">format</span>(</span><br><span class="line">    docs.filenames[<span class="number">0</span>], X[<span class="number">0</span>].getnnz()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.<span class="built_in">format</span>(time() - t))</span><br></pre></td></tr></tbody></table></figure><p>这里需要注意TfidfVectorizer的几个参数的选择。max_df=0.4表示如果一个单词在40%的文档里都出现过，则认为是一个高频词，对文档聚类没有帮助，在生成词典时就会剔除这个词。min_df=2表示，如果一个单词的词频太低，小于等于2个，则也把这个单词从词典里剔除。max_features可以进一步过滤词典的大小，它会根据TF-IDF权重从高到低进行排序，然后取前面权重高的单词构成词典。输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vectorizing documents ...</span><br><span class="line">n_samples: <span class="number">3949</span>, n_features: <span class="number">20000</span></span><br><span class="line">number of non-zero features in sample [datasets/clustering/data\sci.electronics\<span class="number">11902</span>-<span class="number">54322</span>]: <span class="number">56</span></span><br><span class="line">done in <span class="number">1.9150002002716064</span> seconds</span><br></pre></td></tr></tbody></table></figure><p>从输出可知，每篇文章构成的向量都是一个稀疏向量，其大部分元素都为0。这也容易理解，我们的词典大小为20000个词，而示例文章中不重复的单词却只有56个。</p><h3 id="3-2-文本聚类分析"><a href="#3-2-文本聚类分析" class="headerlink" title="3.2 文本聚类分析"></a>3.2 文本聚类分析</h3><p>接着使用KMeans算法对文档进行聚类分析：</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"clustering documents ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">n_clusters = <span class="number">4</span></span><br><span class="line">kmean = KMeans(n_clusters=n_clusters, </span><br><span class="line">               max_iter=<span class="number">100</span>,</span><br><span class="line">               tol=<span class="number">0.01</span>,</span><br><span class="line">               verbose=<span class="number">1</span>,</span><br><span class="line">               n_init=<span class="number">3</span>)</span><br><span class="line">kmean.fit(X);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"kmean: k={}, cost={}"</span>.format(n_clusters, <span class="built_in">int</span>(kmean.inertia_)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.format(time() - t))</span><br></pre></td></tr></tbody></table></figure><p>选择聚类个数为4个。max_iter=100表示最多进行100次K-均值迭代。tol=0.1表示中心点移动距离小于0.1时就认为算法已经收敛，停止迭代。verbose=1表示输出迭代过程的详细信息。n_init=3表示进行3遍K-均值运算后求平均值。前面介绍过，在算法刚开始迭代时，会随机选择聚类中心点，不同的中心点可能导致不同的收敛效果，因此多次运算求平均值的方法可以提高算法的稳定性。由于开启了迭代过程信息显示，输出了较多的信息：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">clustering documents ...</span><br><span class="line">Initialization complete</span><br><span class="line">Iteration  0, inertia 7488.362</span><br><span class="line">Iteration  1, inertia 3845.708</span><br><span class="line">Iteration  2, inertia 3835.369</span><br><span class="line">Iteration  3, inertia 3828.959</span><br><span class="line">Iteration  4, inertia 3824.555</span><br><span class="line">Iteration  5, inertia 3820.932</span><br><span class="line">Iteration  6, inertia 3818.555</span><br><span class="line">Iteration  7, inertia 3817.377</span><br><span class="line">Iteration  8, inertia 3816.317</span><br><span class="line">Iteration  9, inertia 3815.570</span><br><span class="line">Iteration 10, inertia 3815.351</span><br><span class="line">Iteration 11, inertia 3815.234</span><br><span class="line">Iteration 12, inertia 3815.181</span><br><span class="line">Iteration 13, inertia 3815.151</span><br><span class="line">Iteration 14, inertia 3815.136</span><br><span class="line">Iteration 15, inertia 3815.120</span><br><span class="line">Iteration 16, inertia 3815.113</span><br><span class="line">Iteration 17, inertia 3815.106</span><br><span class="line">Iteration 18, inertia 3815.104</span><br><span class="line">Converged at iteration 18: center <span class="built_in">shift</span> 0.000000e+00 within tolerance 4.896692e-07</span><br><span class="line">Initialization complete</span><br><span class="line">Iteration  0, inertia 7494.329</span><br><span class="line">Iteration  1, inertia 3843.474</span><br><span class="line">Iteration  2, inertia 3835.570</span><br><span class="line">Iteration  3, inertia 3828.511</span><br><span class="line">Iteration  4, inertia 3823.826</span><br><span class="line">Iteration  5, inertia 3819.972</span><br><span class="line">Iteration  6, inertia 3817.714</span><br><span class="line">Iteration  7, inertia 3816.666</span><br><span class="line">Iteration  8, inertia 3816.032</span><br><span class="line">Iteration  9, inertia 3815.778</span><br><span class="line">Iteration 10, inertia 3815.652</span><br><span class="line">Iteration 11, inertia 3815.548</span><br><span class="line">Iteration 12, inertia 3815.462</span><br><span class="line">Iteration 13, inertia 3815.424</span><br><span class="line">Iteration 14, inertia 3815.411</span><br><span class="line">Iteration 15, inertia 3815.404</span><br><span class="line">Iteration 16, inertia 3815.402</span><br><span class="line">Converged at iteration 16: center <span class="built_in">shift</span> 0.000000e+00 within tolerance 4.896692e-07</span><br><span class="line">Initialization complete</span><br><span class="line">Iteration  0, inertia 7538.349</span><br><span class="line">Iteration  1, inertia 3844.796</span><br><span class="line">Iteration  2, inertia 3828.820</span><br><span class="line">Iteration  3, inertia 3822.973</span><br><span class="line">Iteration  4, inertia 3821.341</span><br><span class="line">Iteration  5, inertia 3820.164</span><br><span class="line">Iteration  6, inertia 3819.181</span><br><span class="line">Iteration  7, inertia 3818.546</span><br><span class="line">Iteration  8, inertia 3818.167</span><br><span class="line">Iteration  9, inertia 3817.975</span><br><span class="line">Iteration 10, inertia 3817.862</span><br><span class="line">Iteration 11, inertia 3817.770</span><br><span class="line">Iteration 12, inertia 3817.723</span><br><span class="line">Iteration 13, inertia 3817.681</span><br><span class="line">Iteration 14, inertia 3817.654</span><br><span class="line">Iteration 15, inertia 3817.628</span><br><span class="line">Iteration 16, inertia 3817.607</span><br><span class="line">Iteration 17, inertia 3817.593</span><br><span class="line">Iteration 18, inertia 3817.585</span><br><span class="line">Iteration 19, inertia 3817.580</span><br><span class="line">Converged at iteration 19: center <span class="built_in">shift</span> 0.000000e+00 within tolerance 4.896692e-07</span><br><span class="line">kmean: k=4, cost=3815</span><br><span class="line"><span class="keyword">done</span> <span class="keyword">in</span> 39.484999895095825 seconds</span><br></pre></td></tr></tbody></table></figure><p>我们好奇的是：在进行聚类分析的过程中，哪些单词的权重最高，从而较容易地决定一个文章的类别？我们可以查看每种类别文档中，其权重最高的10个单词分别是什么？</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Top terms per cluster:"</span>)</span><br><span class="line">order_centroids = kmean.cluster_centers_.argsort()[:, ::-<span class="number">1</span>]</span><br><span class="line">terms = vectorizer.get_feature_names()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_clusters):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Cluster %d:"</span> % i, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> order_centroids[i, :<span class="number">10</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">' %s'</span> % terms[ind], end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></tbody></table></figure><p>理解这段代码的关键在于argsort()函数，它的作用是把一个Numpy数组进行升序排列，返回的是排序后的索引。</p><p>回到我们的代码里，由于 kmean.cluster_centers 是二维数组，因此 kmean.cluster_centers.argsort()[:,::-1] 语句的含义就是把聚类中心点的不同分量，按照从大到小的顺序进行排序，并且把排序后的元素索引保存在二维数组order_centroids里。vectorizer.get_feature_names()将得到我们的词典单词，根据索引即可得到每个类别里权重最高的那些单词了。输出如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Top terms per cluster:</span><br><span class="line">Cluster <span class="number">0</span>: space henry nasa toronto moon pat zoo shuttle gov orbit</span><br><span class="line">Cluster <span class="number">1</span>: my any me <span class="keyword">by</span> know your some <span class="keyword">do</span> so has</span><br><span class="line">Cluster <span class="number">2</span>: key clipper encryption chip government will keys escrow we nsa</span><br><span class="line">Cluster <span class="number">3</span>: geb pitt banks gordon shameful dsl n3jxp chastity cadre surrender</span><br></pre></td></tr></tbody></table></figure><h3 id="4-聚类算法性能评估"><a href="#4-聚类算法性能评估" class="headerlink" title="4.聚类算法性能评估"></a>4.聚类算法性能评估</h3><p>聚类性能评估比较复杂，不像分类那样直观。针对分类问题，我们可以直接计算被错误分类的样本数量，这样可以直接算出分类算法的准确率。聚类问题不能使用绝对数量的方法进行性能评估，原因是，聚类分析后的类别与原来已标记的类别之间不存在必然的一一对应关系。更典型的，针对K-均值算法，我们可以选择K的数值不等于已标记的类别个数。</p><p>前面介绍决策树的时候简单介绍过“熵”的概念，它是信息论中最重要的基础概念。熵表示一个系统的有序程度，而聚类问题的性能评估，就是对比经过聚类算法处理后的数据的有序程度，与人工标记的有序程度之间的差异。下面介绍几个常用的聚类算法性能评估指标</p><h6 id="1-Adjust-Rand-Index"><a href="#1-Adjust-Rand-Index" class="headerlink" title="1.Adjust Rand Index"></a><strong>1.Adjust Rand Index</strong></h6><p>Adjust Rand Index是一种衡量两个序列相似性的算法。它的优点是，针对两个随机序列，它的值为负数或接近0。而针对两个结构相同的序列，它的值接近1。而且对类别标签不敏感。</p><h6 id="2-齐次性和完整性"><a href="#2-齐次性和完整性" class="headerlink" title="2.齐次性和完整性"></a><strong>2.齐次性和完整性</strong></h6><p>根据条件熵分析，可以得到另外两个衡量聚类算法性能的指标，分别是齐次性（homogeneity）和完整性（completeness）。齐次性表示一个聚类元素只由一种类别的元素组成。完整性表示给定的已标记的类别，全部分配到一个聚类里。它们的值均介于[0,1]之间。</p><h6 id="3-轮廓系数"><a href="#3-轮廓系数" class="headerlink" title="3.轮廓系数"></a><strong>3.轮廓系数</strong></h6><p>上面介绍的聚类性能评估方法都需要有已标记的类别数据，这个在实践中是很难做到的。如果已经标记了数据，就会直接使用有监督的学习算法，而无监督学习算法的最大优点就是不需要对数据集进行标记。轮廓系数可以在不需要已标记的数据集的前提下，对聚类算法的性能进行评估。</p><p>轮廓系数由以下两个指标构成：</p><ul><li>a：一个样本与其所在相同聚类的点的平均距离；</li><li>b：一个样本与其距离最近的下一个聚类里的点的平均距离。</li></ul><p>针对这个样本，其轮廓系数s的值为：<br>$$<br>s=\frac{b-a}{\max (a, b)}<br>$$<br>针对一个数据集，其轮廓系数s为其所有样本的轮廓系数的平均值。轮廓系数的数值介于[-1,1]之间，-1表示完全错误的聚类，1表示完美的聚类，0表示聚类重叠。</p><p>针对前面的例子，可以分别计算本节介绍的几个聚类算法性能评估指标，综合来看聚类算法的性能：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line">labels = docs.target</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Homogeneity: %0.3f"</span> % metrics.homogeneity_score(labels, kmean.labels_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Completeness: %0.3f"</span> % metrics.completeness_score(labels, kmean.labels_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"V-measure: %0.3f"</span> % metrics.v_measure_score(labels, kmean.labels_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Adjusted Rand-Index: %.3f"</span></span><br><span class="line">      % metrics.adjusted_rand_score(labels, kmean.labels_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Silhouette Coefficient: %0.3f"</span></span><br><span class="line">      % metrics.silhouette_score(X, kmean.labels_, sample_size=<span class="number">1000</span>))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Homogeneity: <span class="number">0.459</span></span><br><span class="line">Completeness: <span class="number">0.519</span></span><br><span class="line">V-measure: <span class="number">0.487</span></span><br><span class="line">Adjusted Rand-Index: <span class="number">0.328</span></span><br><span class="line">Silhouette Coefficient: <span class="number">0.004</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到模型性能很一般。可能的一个原因是数据集质量不高，当然我们也可以阅读原始的语料库，检验一下如果通过人工标记，是否能够标记出这些文章的正确分类。另外，针对my、any、me、by、know、your、some、do、so、has，这些都是没有特征的单词，即使人工标记，也无法判断这些单词应该属于哪种类别的文章。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列八：PCA</title>
      <link href="/2020/07/15/scikit-learn-xi-lie-ba-pca/"/>
      <url>/2020/07/15/scikit-learn-xi-lie-ba-pca/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="1-PCA概述"><a href="#1-PCA概述" class="headerlink" title="1. PCA概述"></a>1. PCA概述</h2><p>PCA算法全称是 Principal Component Analysis，即主成分分析算法。它是一种维数约减（Dimensionality Reduction）算法，即把高维度数据在损失最小的情况下转换为低维度数据的算法。显然，PCA可以用来对数据进行压缩，可以在可控的失真范围内提高运算速度。。</p><h2 id="2-PCA算法原理"><a href="#2-PCA算法原理" class="headerlink" title="2. PCA算法原理"></a>2. PCA算法原理</h2><p>我们先从最简单的情况谈起，假设需要把一个二维数据降维成一维数据，要怎么做呢？如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-805dbb25ada21691.png" alt="img"></p><p>我们可以想办法找出一个向量 $u^{(1)}$ ，以便让二维数据的点（方形点）到这个向量所在的直线上的平均距离最短，即投射误差最小。</p><p>这样就可以在失真最小的情况下，把二维数据转换为向量 $u^{(1)}$ ，所在直线上的一维数据。再进一步，假设需要把三维数据降为二维数据时，我们需要找出两个向量  $u^{(1)}$  和 $u^{(2)}$ ，以便让三维数据的点在这两个向量决定的平面上的投射误差最小。</p><p>如果从数学角度来一般地描述PCA算法就是：当需要从n维数据降为k维数据时，需要找出k个向量</p><p>  $u^{(1)}$  ，  $u^{(2)}$  ，……  $u^{(k)}$  ，把n维的数据投射到这k个向量决定的线性空间里，最终使投射误差最小化的过程。</p><p>问题来了，<strong>怎样找出投射误差最小的k个向量呢</strong>？要完整的用数学公式推导这个方法，涉及较多高级线性代数的知识，这里不再详述。感兴趣的话可以参考后面扩展部分的内容。下面我们直接介绍PCA算法求解的一般步骤。</p><p>假设有一个数据集，用m x n维的矩阵A表示。矩阵中每一行表示一个样本，每一列表示一个特征，总共有m个样本，每个样本有n个特征。我们的目标是减少特征个数，保留最重要的k个特征。</p><h3 id="2-1数据归一化和缩放"><a href="#2-1数据归一化和缩放" class="headerlink" title="2.1数据归一化和缩放"></a>2.1数据归一化和缩放</h3><p>数据归一化和缩放是一种数学技巧，旨在提高PCA运算时的效率。数据归一化的目标是使特征的均值为0。数据归一化公式为:<br>$$<br>x_{j}^{(i)}=a_{j}^{(i)}-\mu_{j}<br>$$<br>其中，$a_{j}^{(i)}$是指第i个样本的第j个特征的值，$\mu_{j}$表示的是第j个特征的均值。当不同的特征值不在同一个数量级上的时候，还需要对数据进行缩放。数据归一化在缩放的公式为：<br>$$<br>x_{j}^{(i)}=\frac{a_{j}^{(i)}-\mu_{j}}{s_{j}}<br>$$<br>其中，$a_{j}^{(i)}$是指第i个样本的第j个特征的值，$\mu_{j}$表示的是第j个特征的均值。$s_{j}$表示第j个特征的范围，即 $s_{j} = max(a_{j}^{(i)})-min(a_{j}^{(i)})$</p><h3 id="2-2-计算协方差矩阵的特征向量"><a href="#2-2-计算协方差矩阵的特征向量" class="headerlink" title="2.2 计算协方差矩阵的特征向量"></a>2.2 计算协方差矩阵的特征向量</h3><p>针对预处理后的矩阵X，先计算其协方差矩阵（Covariance Matrix）：<br>$$<br>\Sigma=\frac{1}{m} X^{T} X<br>$$<br>其中，$\Sigma $ 表示协方差矩阵，用大写的Sigma表示，是一个n * n维的矩阵。</p><p>接着通过奇异值分解来计算协方差矩阵的特征向量：<br>$$<br>[U, S, V]=s v d(\Sigma)<br>$$<br>其中，svd 是奇异值分解（Singular Value Decomposition）运算，是高级线性代数的内容。经过奇异值分解后，有3个返回值，其中矩阵U是一个n * n的矩阵，如果我们选择U的列作为向量，那么我们将得到n个列向量 $u^{(1)}$  ，  $u^{(2)}$  ，……  $u^{(n)}$  ,这些向量就是协方差矩阵的特征向量。它表示的物理意义是，协方差矩阵  $\Sigma $ 可以由这些特征向量进行线性组合得到。</p><h3 id="2-3-数据降维和恢复"><a href="#2-3-数据降维和恢复" class="headerlink" title="2.3  数据降维和恢复"></a>2.3  数据降维和恢复</h3><p>得到特征矩阵后，就可以对数据进行降维处理了。假设降维前的值是  $x^{(i)}$，降维后是$z^{(i)}$，那么<br>$$<br>z^{(i)}=U_{r e d u c e}^{T} x^{(i)}<br>$$<br>其中，$U_{r e d u c e}=[u^{(1)} ,u^{(2)}，……u^{(k)}]$ ，它选取自矩阵U的前k个向量，$U_{r e d u c e}$</p><p>称为主成分特征矩阵，它是数据降维和恢复的关键中间变量。看一下数据维度，$U_{r e d u c e}$是n * k的矩阵，因此 $U_{r e d u c e}^{T}$是k * n的矩阵.</p><p>也可以用矩阵运算一次性转换多个向量，提高效率。假设X是行向量 $x^{(i)}$组成的矩阵，则<br>$$<br>Z=X U_{\text {reduce}}<br>$$<br>其中，X是m * n的矩阵，降维后的矩阵Z是一个m * k的矩阵。</p><p>数据降维后，怎么恢复呢？从前面的计算公式我们知道，降维后的数据计算公式<br>$ z^{(i)}=U_{r e d u c e}^{T} x^{(i)} $ 。所以如果要还原数据，可以使用下面的公式：<br>$$<br>x_{a p p r o x}^{(i)}=U_{r e d u c e} z^{(i)}<br>$$<br>其中，$U_{r e d u c e}$是n * k的矩阵，$z^{(i)}$是k维列向量。这样算出来的$x^{(i)} $就是n维列向量。</p><p>矩阵化数据恢复运算公式为：<br>$$<br>X_{approx}=Z U_{r e d u c e}^{T}<br>$$<br>其中, $X_{approx}$ 是还原回来的数据，是一个m * n的矩阵，每行表示一个训练样例。Z是一个m * k的矩阵，是降维后的数据。</p><h2 id="3-PCA算法示例"><a href="#3-PCA算法示例" class="headerlink" title="3. PCA算法示例"></a>3. PCA算法示例</h2><p>假设我们的数据集总共有5个记录，每个记录有2个特征，这样构成的矩阵A为：<br>$$<br>A=\left[\begin{array}{ll}<br>3 &amp; 2000 \<br>2 &amp; 3000 \<br>4 &amp; 5000 \<br>5 &amp; 8000 \<br>1 &amp; 2000<br>\end{array}\right]<br>$$<br>我们的目标是把二维数据降为一维数据。为了更好地理解PCA的计算过程，分别使用 Numpy和sklearn 对同一个数据进行PCA降维处理。</p><h3 id="3-1-使用Numpy模拟PCA计算过程"><a href="#3-1-使用Numpy模拟PCA计算过程" class="headerlink" title="3.1 使用Numpy模拟PCA计算过程"></a>3.1 使用Numpy模拟PCA计算过程</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.array([[<span class="number">3</span>,<span class="number">2000</span>],</span><br><span class="line">             [<span class="number">2</span>,<span class="number">3000</span>],</span><br><span class="line">             [<span class="number">4</span>,<span class="number">5000</span>],</span><br><span class="line">             [<span class="number">5</span>,<span class="number">8000</span>],</span><br><span class="line">             [<span class="number">1</span>,<span class="number">2000</span>]],dtype=<span class="string">'float'</span>)</span><br><span class="line"><span class="comment"># 数据归一化，axis=0表示按列归一化</span></span><br><span class="line">mean = np.mean(A,axis=<span class="number">0</span>)</span><br><span class="line">norm = A - mean</span><br><span class="line"><span class="comment"># 数据缩放</span></span><br><span class="line">score = np.<span class="built_in">max</span>(norm,axis=<span class="number">0</span>)-np.<span class="built_in">min</span>(norm,axis=<span class="number">0</span>)</span><br><span class="line">norm = norm / score</span><br><span class="line"><span class="built_in">print</span>(norm)</span><br></pre></td></tr></tbody></table></figure><p>由于两个特征的均值不在同一个数量级，所以对数据进行了缩放。输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[ <span class="number">0.</span>        , -<span class="number">0.33333333</span>],</span><br><span class="line">       [-<span class="number">0.25</span>      , -<span class="number">0.16666667</span>],</span><br><span class="line">       [ <span class="number">0.25</span>      ,  <span class="number">0.16666667</span>],</span><br><span class="line">       [ <span class="number">0.5</span>       ,  <span class="number">0.66666667</span>],</span><br><span class="line">       [-<span class="number">0.5</span>       , -<span class="number">0.33333333</span>]])</span><br></pre></td></tr></tbody></table></figure><p>接着，对协方差矩阵进行奇异值分解，求解其特征向量：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U,S,V = np.linalg.svd(np.dot(norm.T,norm))</span><br><span class="line"><span class="built_in">print</span>(U)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[-<span class="number">0.67710949</span>, -<span class="number">0.73588229</span>],</span><br><span class="line">       [-<span class="number">0.73588229</span>,  <span class="number">0.67710949</span>]])</span><br></pre></td></tr></tbody></table></figure><p>由于需要把二维数据降为一维数据，因此只取特征矩阵的第一列（前k列）来构造主成分特征矩阵$U_{reduce}$</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U_reduce = U[:,<span class="number">0</span>].reshape(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">U_reduce</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[-<span class="number">0.67710949</span>],</span><br><span class="line">       [-<span class="number">0.73588229</span>]])</span><br></pre></td></tr></tbody></table></figure><p>有了主成分特征矩阵，就可以对数据进行降维了：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R = np.dot(norm,U_reduce)</span><br><span class="line"><span class="built_in">print</span>(R)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[ <span class="number">0.2452941</span> ],</span><br><span class="line">       [ <span class="number">0.29192442</span>],</span><br><span class="line">       [-<span class="number">0.29192442</span>],</span><br><span class="line">       [-<span class="number">0.82914294</span>],</span><br><span class="line">       [ <span class="number">0.58384884</span>]])</span><br></pre></td></tr></tbody></table></figure><p>这样就把二维的数据降为一维的数据了。如果需要还原数据，依照PCA数据恢复的计算公式，可得：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z = np.dot(R,U_reduce.T)</span><br><span class="line"><span class="built_in">print</span>(Z)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[-<span class="number">0.16609096</span>, -<span class="number">0.18050758</span>],</span><br><span class="line">       [-<span class="number">0.19766479</span>, -<span class="number">0.21482201</span>],</span><br><span class="line">       [ <span class="number">0.19766479</span>,  <span class="number">0.21482201</span>],</span><br><span class="line">       [ <span class="number">0.56142055</span>,  <span class="number">0.6101516</span> ],</span><br><span class="line">       [-<span class="number">0.39532959</span>, -<span class="number">0.42964402</span>]])</span><br></pre></td></tr></tbody></table></figure><p>由于我们在数据预处理阶段对数据进行了归一化，并且做了缩放处理，所以需要进一步还原才能得到原始数据，这一步是数据预处理的逆运算。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A1 = np.multiply(Z,scope)+mean</span><br><span class="line"><span class="built_in">print</span>(A1)</span><br></pre></td></tr></tbody></table></figure><p>其中，np.multiply是矩阵对应元素相乘，np.dot是矩阵的行乘以矩阵的列。输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">2.33563616e+00</span>, <span class="number">2.91695452e+03</span>],</span><br><span class="line">       [<span class="number">2.20934082e+00</span>, <span class="number">2.71106794e+03</span>],</span><br><span class="line">       [<span class="number">3.79065918e+00</span>, <span class="number">5.28893206e+03</span>],</span><br><span class="line">       [<span class="number">5.24568220e+00</span>, <span class="number">7.66090960e+03</span>],</span><br><span class="line">       [<span class="number">1.41868164e+00</span>, <span class="number">1.42213588e+03</span>]])</span><br></pre></td></tr></tbody></table></figure><p>与原始矩阵A相比，恢复后的数据A1还是存在一定程度的失真，这种失真是不可避免的。</p><h3 id="3-2-使用sklearn进行PCA降维运算"><a href="#3-2-使用sklearn进行PCA降维运算" class="headerlink" title="3.2 使用sklearn进行PCA降维运算"></a>3.2 使用sklearn进行PCA降维运算</h3><p>在 <code>sklearn</code>工具包里，类 <code>sklearn.decomposition.PCA</code> 实现了 PCA 算法，使用方便，不需要了解具体的PCA的运算步骤。但需要注意的是，数据的预处理需要自己完成，其 PCA 算法本身不进行数据预处理（归一化和缩放）。此处，我们选择 <code>MinMaxScaler类</code>进行数据预处理。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">std_PCA</span>(<span class="params">**argv</span>):</span></span><br><span class="line">    scaler = MinMaxScaler()</span><br><span class="line">    pca = PCA(**argv)</span><br><span class="line">    pipeline = Pipeline([(<span class="string">'scaler'</span>, scaler),</span><br><span class="line">                         (<span class="string">'pca'</span>, pca)])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br><span class="line"></span><br><span class="line">pca = std_PCA(n_components=<span class="number">1</span>)</span><br><span class="line">R2 = pca.fit_transform(A)</span><br><span class="line"><span class="built_in">print</span>(R2)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[-<span class="number">0.2452941</span> ],</span><br><span class="line">       [-<span class="number">0.29192442</span>],</span><br><span class="line">       [ <span class="number">0.29192442</span>],</span><br><span class="line">       [ <span class="number">0.82914294</span>],</span><br><span class="line">       [-<span class="number">0.58384884</span>]])</span><br></pre></td></tr></tbody></table></figure><p>这个输出值就是矩阵A经过预处理以及PCA降维后的数值。我们发现，这里的输出结果和上面使用Numpy方式的输出结果符号相反，这其实不是错误，只是降维后选择的坐标方向不同而已。</p><p>接着把数据恢复回来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A2 = pca.inverse_transform(R2)</span><br><span class="line"><span class="built_in">print</span>(A2)</span><br></pre></td></tr></tbody></table></figure><p>这里的pca是一个Pipeline实例，其逆运算inverse_transform()是逐级进行的，即先进行PCA还原，再执行预处理的逆运算。即先调用PCA.inverse_transform()，然后再调用MinMaxScaler.inverse_transform()。输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">2.33563616e+00</span>, <span class="number">2.91695452e+03</span>],</span><br><span class="line">       [<span class="number">2.20934082e+00</span>, <span class="number">2.71106794e+03</span>],</span><br><span class="line">       [<span class="number">3.79065918e+00</span>, <span class="number">5.28893206e+03</span>],</span><br><span class="line">       [<span class="number">5.24568220e+00</span>, <span class="number">7.66090960e+03</span>],</span><br><span class="line">       [<span class="number">1.41868164e+00</span>, <span class="number">1.42213588e+03</span>]])</span><br></pre></td></tr></tbody></table></figure><p>可以看到，这里还原回来的数据和前面Numpy方式还原回来的数据是一致的。</p><h3 id="3-3-PCA的物理含义"><a href="#3-3-PCA的物理含义" class="headerlink" title="3.3 PCA的物理含义"></a>3.3 PCA的物理含义</h3><p>我们可以把前面例子中的数据在一个坐标轴上全部画出来，从而仔细观察PCA降维过程的物理含义。如下图所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">norm, Z, U, U_reduce</span>):</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>), dpi=<span class="number">144</span>)</span><br><span class="line">    plt.title(<span class="string">'Physcial meanings of PCA'</span>)</span><br><span class="line">    ymin = xmin = -<span class="number">1</span></span><br><span class="line">    ymax = xmax = <span class="number">1</span></span><br><span class="line">    plt.xlim(xmin, xmax)</span><br><span class="line">    plt.ylim(ymin, ymax)</span><br><span class="line">    ax = plt.gca()  <span class="comment"># gca 代表当前坐标轴，即 'get current axis'</span></span><br><span class="line">    ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)  <span class="comment"># 隐藏坐标轴</span></span><br><span class="line">    ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">    plt.scatter(norm[:, <span class="number">0</span>], norm[:, <span class="number">1</span>], marker=<span class="string">'s'</span>, c=<span class="string">'b'</span>)</span><br><span class="line">    plt.scatter(Z[:, <span class="number">0</span>], Z[:, <span class="number">1</span>], marker=<span class="string">'o'</span>, c=<span class="string">'r'</span>)</span><br><span class="line">    plt.arrow(<span class="number">0</span>, <span class="number">0</span>, U[<span class="number">0</span>][<span class="number">0</span>], U[<span class="number">1</span>][<span class="number">0</span>], color=<span class="string">'r'</span>, linestyle=<span class="string">'-'</span>)</span><br><span class="line">    plt.arrow(<span class="number">0</span>, <span class="number">0</span>, U[<span class="number">0</span>][<span class="number">1</span>], U[<span class="number">1</span>][<span class="number">1</span>], color=<span class="string">'r'</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">    plt.annotate(<span class="string">r'$U_{reduce} = u^{(1)}$'</span>,</span><br><span class="line">                 xy=(U[<span class="number">0</span>][<span class="number">0</span>], U[<span class="number">1</span>][<span class="number">0</span>]), xycoords=<span class="string">'data'</span>,</span><br><span class="line">                 xytext=(U_reduce[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">0.2</span>, U_reduce[<span class="number">1</span>][<span class="number">0</span>] - <span class="number">0.1</span>), fontsize=<span class="number">10</span>,</span><br><span class="line">                 arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line">    plt.annotate(<span class="string">r'$u^{(2)}$'</span>,</span><br><span class="line">                 xy=(U[<span class="number">0</span>][<span class="number">1</span>], U[<span class="number">1</span>][<span class="number">1</span>]), xycoords=<span class="string">'data'</span>,</span><br><span class="line">                 xytext=(U[<span class="number">0</span>][<span class="number">1</span>] + <span class="number">0.2</span>, U[<span class="number">1</span>][<span class="number">1</span>] - <span class="number">0.1</span>), fontsize=<span class="number">10</span>,</span><br><span class="line">                 arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line">    plt.annotate(<span class="string">r'raw data'</span>,</span><br><span class="line">                 xy=(norm[<span class="number">0</span>][<span class="number">0</span>], norm[<span class="number">0</span>][<span class="number">1</span>]), xycoords=<span class="string">'data'</span>,</span><br><span class="line">                 xytext=(norm[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">0.2</span>, norm[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">0.2</span>), fontsize=<span class="number">10</span>,</span><br><span class="line">                 arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line">    plt.annotate(<span class="string">r'projected data'</span>,</span><br><span class="line">                 xy=(Z[<span class="number">0</span>][<span class="number">0</span>], Z[<span class="number">0</span>][<span class="number">1</span>]), xycoords=<span class="string">'data'</span>,</span><br><span class="line">                 xytext=(Z[<span class="number">0</span>][<span class="number">0</span>] + <span class="number">0.2</span>, Z[<span class="number">0</span>][<span class="number">1</span>] - <span class="number">0.1</span>), fontsize=<span class="number">10</span>,</span><br><span class="line">                 arrowprops=<span class="built_in">dict</span>(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line">    plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716110204443.png" alt="image-20200716110204443">图中正方形的点是原始数据经过预处理后（归一化、缩放）的数据，圆形的点是从一维恢复到二维后的数据。同时，我们画出主成分特征向量 $u^{(1)}$ 和  $u^{(2)}$ ，。根据上图，来介绍几个有意思的结论：首先，圆形的点实际上就是方形的点在向量所在 $u^{(1)}$ 直线上的投影。所谓PCA数据恢复，并不是真正的恢复，只是把降维后的坐标转换为原坐标系中的坐标而已。针对我们的例子，只是把由向量 $u^{(1)}$决定的一维坐标系中的坐标转换为原始二维坐标系中的坐标。其次，主成分特征向量 $u^{(1)}$ 和  $u^{(2)}$ 是相互垂直的。再次，方形点和圆形点之间的距离，就是PCA数据降维后的误差。</p><h2 id="4-示例：人脸识别"><a href="#4-示例：人脸识别" class="headerlink" title="4. 示例：人脸识别"></a>4. 示例：人脸识别</h2><p>本节使用英国剑桥AT&amp;T实验室的研究人员自拍的一组照片（AT&amp;TLaboratories Cambridge），来开发一个特定的人脸识别系统。人脸识别，本质上是个分类问题，需要把人脸图片当成训练数据集，对模型进行训练。训练好的模型，就可以对新的人脸照片进行类别预测。这就是人脸识别系统的原理。</p><h3 id="4-1-加载数据集"><a href="#4-1-加载数据集" class="headerlink" title="4.1 加载数据集"></a>4.1 加载数据集</h3><p>查看数据集里所有400张照片的缩略图。数据集总共包含40位人员的照片，每个人10张照片，数据集在仓库<code>dataset</code>文件夹内。</p><p>下载完照片，就可以使用下面的代码来加载这些照片了：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> fetch_olivetti_faces</span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">'%(asctime)s %(message)s'</span>)</span><br><span class="line">data_home=<span class="string">'datasets/'</span></span><br><span class="line">logging.info(<span class="string">'Start to load dataset'</span>)</span><br><span class="line">faces = fetch_olivetti_faces(data_home=data_home)</span><br><span class="line">logging.info(<span class="string">'Done with load dataset'</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span>-06-<span class="number">23</span> <span class="number">21</span>:<span class="number">45</span>:<span class="number">13</span>,<span class="number">639</span> Start to load dataset</span><br><span class="line"><span class="number">2019</span>-06-<span class="number">23</span> <span class="number">21</span>:<span class="number">45</span>:<span class="number">13</span>,<span class="number">666</span> Done <span class="keyword">with</span> load dataset</span><br></pre></td></tr></tbody></table></figure><p>加载的图片数据集保存在faces变量里，<code>scikit-learn</code> 已经替我们把每张照片做了初步的处理，剪裁成64×64大小且人脸居中显示。这一步至关重要，否则我们的模型将被大量的噪声数据，即图片背景干扰。因为人脸识别的关键是五官纹理和特征，每张照片的背景都不同，人的发型也可能经常变化，这些特征都应该尽量排除在输入特征之外。</p><p>成功加载数据后，其data里保存的就是按照scikit-learn要求的训练数据集，target里保存的就是类别目标索引。我们通过下面的代码，将数据集的概要信息显示出来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = faces.data</span><br><span class="line">y = faces.target</span><br><span class="line">targets = np.unique(faces.target)</span><br><span class="line">target_names = np.array([<span class="string">"c%d"</span> % t <span class="keyword">for</span> t <span class="keyword">in</span> targets])</span><br><span class="line">n_targets = target_names.shape[<span class="number">0</span>]</span><br><span class="line">n_samples, h, w = faces.images.shape</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Sample count: {}\nTarget count: {}'</span>.<span class="built_in">format</span>(n_samples, n_targets))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Image size: {}x{}\nDataset shape: {}\n'</span>.<span class="built_in">format</span>(w, h, X.shape))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sample count: <span class="number">400</span></span><br><span class="line">Target count: <span class="number">40</span></span><br><span class="line">Image size: 64x64</span><br><span class="line">Dataset shape: (<span class="number">400</span>, <span class="number">4096</span>)</span><br></pre></td></tr></tbody></table></figure><p>从输出可知，总共有40位人物的照片，图片总数是400张，输入特征有4096个。为了后续区分不同的人物，我们用索引号给目标人物命名，并保存在变量target_names里。为了更直观地观察数据，从每个人物的照片里随机选择一张显示出来。先定义一个函数来显示照片阵列：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_gallery</span>(<span class="params">images,titles,h,w,n_row=<span class="number">2</span>,n_col=<span class="number">5</span></span>):</span></span><br><span class="line">    <span class="string">"""显示图片阵列"""</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">2</span>*n_col,<span class="number">2</span>*n_row),dpi=<span class="number">144</span>)</span><br><span class="line">    plt.subplots_adjust(bottom=<span class="number">0</span>,left=<span class="number">0.01</span>,right=<span class="number">0.99</span>,top=<span class="number">0.90</span>,hspace=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_row*n_col):</span><br><span class="line">        plt.subplot(n_row,n_col,i+<span class="number">1</span>)</span><br><span class="line">        plt.imshow(images[i].reshape((h,w)), cmap=plt.cm.gray)</span><br><span class="line">        plt.title(titles[i])</span><br><span class="line">        plt.axis(<span class="string">'off'</span>)</span><br></pre></td></tr></tbody></table></figure><p>输入参数images是一个二维数据，每一行都是一个图片数据。在加载数据时，fetch_olivetti_faces()函数已经帮我们做了预处理，图片的每个像素的RGB值都转换成了[0,1]的浮点数。因此，我们画出来的照片将是黑白的，而不是彩色的。在图片识别领域，一般情况下用黑白照片就可以了，可以减少计算量，也会让模型更准确。</p><p>接着分成两行显示出这些人物的照片：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">n_row = <span class="number">2</span></span><br><span class="line">n_col = <span class="number">6</span></span><br><span class="line">sample_images = <span class="literal">None</span></span><br><span class="line">sample_titles = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_targets):</span><br><span class="line">    people_images = X[y==i]</span><br><span class="line">    people_sample_index = np.random.randint(<span class="number">0</span>, people_images.shape[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">    people_sample_image = people_images[people_sample_index, :]</span><br><span class="line">    <span class="keyword">if</span> sample_images <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        sample_images = np.concatenate((sample_images, people_sample_image), axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sample_images = people_sample_image</span><br><span class="line">    sample_titles.append(target_names[i])</span><br><span class="line"></span><br><span class="line">plot_gallery(sample_images, sample_titles, h, w, n_row, n_col)</span><br></pre></td></tr></tbody></table></figure><p>代码中，X[y==i]可以选择出属于特定人物的所有照片，随机选择出来的照片都放在sample_images数组对象里，最后使用我们之前定义的函数plot_gallery()把照片画出来，如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716162800005.png" alt="image-20200716162800005"></p><p>从图片中可以看到，fetch_olivetti_faces()函数帮我们剪裁了中间部分，只留下脸部特征。</p><p>最后，把数据集划分成训练数据集和测试数据集：</p><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-一次失败的尝试"><a href="#4-2-一次失败的尝试" class="headerlink" title="4.2 一次失败的尝试"></a>4.2 一次失败的尝试</h3><p>我们使用支持向量机来实现人脸识别：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line">start = time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Fitting train datasets ...'</span>)</span><br><span class="line">clf = SVC(class_weight=<span class="string">'balanced'</span>)</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Done in {0:.2f}s'</span>.<span class="built_in">format</span>(time()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fitting train datasets ...</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">0.92</span>s</span><br></pre></td></tr></tbody></table></figure><p>指定SVC的class_weight参数，让SVC模型能根据训练样本的数量来均衡地调整权重，这对不均匀的数据集，即目标人物的照片数量相差较大的情况是非常有帮助的。由于总共只有400张照片，数据规模较小，模型很快就运行完了。</p><p>接着，针对测试数据集进行预测：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start = time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Predicting test dataset ...'</span>)</span><br><span class="line">y_pred = clf.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Done in {0:.2f}s'</span>.<span class="built_in">format</span>(time()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicting <span class="built_in">test</span> dataset ...</span><br><span class="line">Done <span class="keyword">in</span> 0.10s</span><br></pre></td></tr></tbody></table></figure><p>最后，分别使用 <code>confusion_matrix</code> 和 <code>classification_report</code> 来查看模型分类的准确性。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line">cm = confusion_matrix(y_test,y_pred,labels=<span class="built_in">range</span>(n_targets))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'confusion matrix:\n'</span>)</span><br><span class="line">np.set_printoptions(threshold=sys.maxsize)</span><br><span class="line"><span class="built_in">print</span>(cm)</span><br></pre></td></tr></tbody></table></figure><p><code>np.set_printoptions()</code> 是为了确保完整地输出cm数组的内容，这是因为这个数组是40×40的，默认情况下不会全部输出。输出如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">confusion matrix:</span><br><span class="line"></span><br><span class="line">[<span class="meta">[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0</span>]</span><br><span class="line"> [<span class="meta">0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</span>]]</span><br></pre></td></tr></tbody></table></figure><p><code>confusion matrix</code> 理想的输出，是矩阵的对角线上有数字，其他地方都没有数字。但我们的结果显示不是这样的。可以明显看出，很多图片都被预测成索引为12的类别了。结果看起来完全不对，这是怎么回事呢？我们再看一下classification_report的结果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test,y_pred))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">             precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">         c0       0.00      0.00      0.00         1</span><br><span class="line">         c1       0.00      0.00      0.00         3</span><br><span class="line">         c2       0.00      0.00      0.00         2</span><br><span class="line">         c3       0.00      0.00      0.00         1</span><br><span class="line">         c4       0.00      0.00      0.00         1</span><br><span class="line">         c5       0.00      0.00      0.00         1</span><br><span class="line">         c6       0.00      0.00      0.00         4</span><br><span class="line">         c7       0.00      0.00      0.00         2</span><br><span class="line">         c8       0.00      0.00      0.00         4</span><br><span class="line">         c9       0.00      0.00      0.00         2</span><br><span class="line">        c10       0.00      0.00      0.00         1</span><br><span class="line">        c11       0.00      0.00      0.00         0</span><br><span class="line">        c12       0.00      0.00      0.00         4</span><br><span class="line">        c13       0.00      0.00      0.00         4</span><br><span class="line">        c14       0.00      0.00      0.00         1</span><br><span class="line">        c15       0.00      0.00      0.00         1</span><br><span class="line">        c16       0.00      0.00      0.00         3</span><br><span class="line">        c17       0.00      0.00      0.00         2</span><br><span class="line">        c18       0.00      0.00      0.00         2</span><br><span class="line">        c19       0.00      0.00      0.00         2</span><br><span class="line">        c20       0.00      0.00      0.00         1</span><br><span class="line">        c21       0.00      0.00      0.00         2</span><br><span class="line">        c22       0.00      0.00      0.00         3</span><br><span class="line">        c23       0.00      0.00      0.00         2</span><br><span class="line">        c24       0.00      0.00      0.00         3</span><br><span class="line">        c25       0.00      0.00      0.00         3</span><br><span class="line">        c26       0.00      0.00      0.00         2</span><br><span class="line">        c27       0.00      0.00      0.00         2</span><br><span class="line">        c28       0.00      0.00      0.00         0</span><br><span class="line">        c29       0.00      0.00      0.00         2</span><br><span class="line">        c30       0.00      0.00      0.00         2</span><br><span class="line">        c31       0.00      0.00      0.00         3</span><br><span class="line">        c32       0.00      0.00      0.00         2</span><br><span class="line">        c33       0.00      0.00      0.00         2</span><br><span class="line">        c34       0.00      0.00      0.00         0</span><br><span class="line">        c35       0.00      0.00      0.00         2</span><br><span class="line">        c36       0.00      0.00      0.00         3</span><br><span class="line">        c37       0.00      0.00      0.00         1</span><br><span class="line">        c38       0.00      0.00      0.00         2</span><br><span class="line">        c39       0.00      0.00      0.00         2</span><br><span class="line"></span><br><span class="line">avg / total       0.00      0.00      0.00        80</span><br></pre></td></tr></tbody></table></figure><p>40个类别里，查准率、召回率、F1 Score全为0，不能有更差的预测结果了。为什么？哪里出了差错？</p><p>答案是，我们把每个像素都作为一个输入特征来处理，这样的数据噪声太严重了，模型根本没有办法对训练数据集进行拟合。想想看，我们总共有4096个特征，可是数据集大小才400个，比特征个数还少，而且我们还需要把数据集分出20%来作为测试数据集，这样训练数据集就更小了。这样的状况下，模型根本无法进行准确地训练和预测。</p><h3 id="4-3-使用PCA来处理数据集"><a href="#4-3-使用PCA来处理数据集" class="headerlink" title="4.3 使用PCA来处理数据集"></a>4.3 使用PCA来处理数据集</h3><p>解决上述问题的一个办法是使用 PCA 来给数据降维，只选择前k个最重要的特征。问题来了，选择多少个特征合适呢？即怎么确定k的值？PCA 算法可以通过下面的公式来计算失真幅度：<br>$$<br>\frac{\frac{1}{m} \sum_{i=1}^{m}\left|x^{(i)}-x_{a p p r o x}^{(i)}\right|^{2}}{\frac{1}{m} \sum_{i=1}^{m}\left|x^{(i)}\right|}<br>$$<br>在scikit-learn里，可以从PCA模型的explained_variance_ratio_变量里获取经PCA处理后的数据还原率。这是一个数组，所有元素求和即可知道我们选择的k值的数据还原率，数值越大说明失真越小，随着k值的增大，数值会无限接近于1。</p><p>利用这一特性，可以让k取值10~300之间，每隔30进行一次取样。在所有的k值样本下，计算经过PCA算法处理后的数据还原率。然后根据数据还原率要求，来确定合理的k值。针对我们的情况，选择失真度小于5%，即PCA处理后能保留95%的原数据信息。其代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Exploring explained variance ratio for dataset ..."</span>)</span><br><span class="line">candidate_components = <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">300</span>,<span class="number">30</span>)</span><br><span class="line">explained_ratios = []</span><br><span class="line">start = time()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> candidate_components:</span><br><span class="line">    pca = PCA(n_components=c)</span><br><span class="line">    X_pca = pca.fit_transform(X)</span><br><span class="line">    explained_ratios.append(np.<span class="built_in">sum</span>(pca.explained_variance_ratio_))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Done in {0:.2f}s'</span>.<span class="built_in">format</span>(time()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exploring explained variance ratio <span class="keyword">for</span> dataset ...</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">0.75</span>s</span><br></pre></td></tr></tbody></table></figure><p>根据不同的k值，构建PCA模型，然后调用fit_transform()函数来处理数据集，再把模型处理后数据还原率，放入explained_ratios数组。接着把这个数组画出来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">6</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.plot(candidate_components,explained_ratios)</span><br><span class="line">plt.xlabel(<span class="string">'Number of PCA Components'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Explained Variance Ratio'</span>)</span><br><span class="line">plt.title(<span class="string">'Explained variance ratio for PCA'</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0.5</span>,<span class="number">1.05</span>,<span class="number">0.05</span>))</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>,<span class="number">300</span>,<span class="number">20</span>))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200716163203114.png" alt="image-20200716163203114"></p><p>上图中横坐标表示k值，纵坐标表示数据还原率。从图中可以看出，要保留95%以上的数据还原率，k值选择140即可。根据上图，也可以非常容易地找出不同的数据还原率所对应的k值。为了更直观地观察和对比在不同数据还原率下的数据，我们选择数据还原率分别在95%、90%、80%、70%、60%的情况下，这些数据还原率对应的k值分别是140、75、37、19、8，画出经PCA处理后的图片。</p><h3 id="4-4-最终结果"><a href="#4-4-最终结果" class="headerlink" title="4.4 最终结果"></a>4.4 最终结果</h3><p>接下来问题就变得简单了。我们选择k=140作为PCA参数，对训练数据集和测试数据集进行特征提取。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n_components = <span class="number">140</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Fitting PCA by using training data ..."</span>)</span><br><span class="line">start = time()</span><br><span class="line">pca = PCA(n_components=n_components, svd_solver=<span class="string">'randomized'</span>, whiten=<span class="literal">True</span>).fit(X_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Done in {0:.2f}s"</span>.<span class="built_in">format</span>(time() - start))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Projecting input data for PCA ..."</span>)</span><br><span class="line">start = time()</span><br><span class="line">X_train_pca = pca.transform(X_train)</span><br><span class="line">X_test_pca = pca.transform(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Done in {0:.2f}s"</span>.<span class="built_in">format</span>(time() - start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fitting PCA by using training data ...</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">0.08</span>s</span><br><span class="line">Projecting <span class="built_in">input</span> data <span class="keyword">for</span> PCA ...</span><br><span class="line">Done <span class="keyword">in</span> <span class="number">0.01</span>s</span><br></pre></td></tr></tbody></table></figure><p>接着使用 <code>GridSearchCV</code> 来选择一个最佳的SVC模型参数，然后使用最佳参数对模型进行训练。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Searching the best parameters for SVC ..."</span>)</span><br><span class="line">param_grid = {<span class="string">'C'</span>: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">100</span>],</span><br><span class="line">              <span class="string">'gamma'</span>: [<span class="number">0.0001</span>, <span class="number">0.0005</span>, <span class="number">0.001</span>, <span class="number">0.005</span>, <span class="number">0.01</span>]}</span><br><span class="line">clf = GridSearchCV(SVC(kernel=<span class="string">'rbf'</span>, class_weight=<span class="string">'balanced'</span>), param_grid, verbose=<span class="number">2</span>, n_jobs=<span class="number">4</span>)</span><br><span class="line">clf = clf.fit(X_train_pca, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Best parameters found by grid search:"</span>)</span><br><span class="line"><span class="built_in">print</span>(clf.best_params_)</span><br></pre></td></tr></tbody></table></figure><p>这一步执行时间比较长，因为GridSearchCV使用矩阵式搜索法，对每组参数组合进行一次训练，然后找出最好的参数的模型。我们通过设置n_jobs=4来启动4个线程并发执行，同时设置verbose=2来输出一些过程信息。最终选择出来的最佳模型参数如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Best parameters found by grid search:</span><br><span class="line">{<span class="string">'C'</span>: <span class="number">5</span>, <span class="string">'gamma'</span>: <span class="number">0.001</span>}</span><br></pre></td></tr></tbody></table></figure><p>接着使用这一模型对测试样本进行预测，并且使用confusion_matrix输出预测准确性信息。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start = time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Predict test dataset ..."</span>)</span><br><span class="line">y_pred = clf.best_estimator_.predict(X_test_pca)</span><br><span class="line">cm = confusion_matrix(y_test, y_pred, labels=<span class="built_in">range</span>(n_targets))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Done in {0:.2f}.\n"</span>.<span class="built_in">format</span>(time()-start))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"confusion matrix:"</span>)</span><br><span class="line">np.set_printoptions(threshold=np.nan)</span><br><span class="line"><span class="built_in">print</span>(cm)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Predict test dataset ...</span><br><span class="line">Done in <span class="number">0.01</span>.</span><br><span class="line"></span><br><span class="line">confusion matrix:</span><br><span class="line">[[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span>]]</span><br></pre></td></tr></tbody></table></figure><p>从输出的对角线上的数据可以看出，大部分预测结果都正确。我们再使用classification_report输出分类报告，查看测准率，召回率及F1 Score。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">             precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">          <span class="number">0</span>       <span class="number">0.50</span>      <span class="number">1.00</span>      <span class="number">0.67</span>         <span class="number">1</span></span><br><span class="line">          <span class="number">1</span>       <span class="number">1.00</span>      <span class="number">0.67</span>      <span class="number">0.80</span>         <span class="number">3</span></span><br><span class="line">          <span class="number">2</span>       <span class="number">1.00</span>      <span class="number">0.50</span>      <span class="number">0.67</span>         <span class="number">2</span></span><br><span class="line">          <span class="number">3</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">          <span class="number">4</span>       <span class="number">0.50</span>      <span class="number">1.00</span>      <span class="number">0.67</span>         <span class="number">1</span></span><br><span class="line">          <span class="number">5</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">          <span class="number">6</span>       <span class="number">1.00</span>      <span class="number">0.75</span>      <span class="number">0.86</span>         <span class="number">4</span></span><br><span class="line">          <span class="number">7</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">          <span class="number">8</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">4</span></span><br><span class="line">          <span class="number">9</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">10</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">         <span class="number">12</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">4</span></span><br><span class="line">         <span class="number">13</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">4</span></span><br><span class="line">         <span class="number">14</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">         <span class="number">15</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">         <span class="number">16</span>       <span class="number">0.75</span>      <span class="number">1.00</span>      <span class="number">0.86</span>         <span class="number">3</span></span><br><span class="line">         <span class="number">17</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">18</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">19</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">20</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">         <span class="number">21</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">22</span>       <span class="number">0.75</span>      <span class="number">1.00</span>      <span class="number">0.86</span>         <span class="number">3</span></span><br><span class="line">         <span class="number">23</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">24</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">3</span></span><br><span class="line">         <span class="number">25</span>       <span class="number">1.00</span>      <span class="number">0.67</span>      <span class="number">0.80</span>         <span class="number">3</span></span><br><span class="line">         <span class="number">26</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">27</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">29</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">30</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">31</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">3</span></span><br><span class="line">         <span class="number">32</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">33</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">35</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">36</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">3</span></span><br><span class="line">         <span class="number">37</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">1</span></span><br><span class="line">         <span class="number">38</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line">         <span class="number">39</span>       <span class="number">1.00</span>      <span class="number">1.00</span>      <span class="number">1.00</span>         <span class="number">2</span></span><br><span class="line"></span><br><span class="line">avg / total       <span class="number">0.97</span>      <span class="number">0.95</span>      <span class="number">0.95</span>        <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>在总共只有400张图片，每位目标人物只有10张图片的情况下，测准率和召回率平均达到了0.95以上，这是一个非常了不起的性能。</p><h2 id="5-拓展阅读"><a href="#5-拓展阅读" class="headerlink" title="5. 拓展阅读"></a>5. 拓展阅读</h2><p>PCA算法的推导涉及大量的线性代数的知识。张洋先生的一篇博客<a href="http://blog.codinglabs.org/articles/pca-tutorial.html">《PCA的数学原理》</a>，基本上做到了从最基础的内容谈起，一步步地推导出PCA算法，值得一读。</p><p>此外，孟岩先生的几篇博客中也介绍了矩阵及其相关运算的物理含义，深入浅出，读后犹如醍醐灌顶，这些博文是<a href="https://blog.csdn.net/myan/article/details/647511">《理解矩阵》</a>三篇文章</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列七：朴素贝叶斯</title>
      <link href="/2020/07/02/scikit-learn-xi-lie-qi-po-su-bei-xie-si/"/>
      <url>/2020/07/02/scikit-learn-xi-lie-qi-po-su-bei-xie-si/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="1-朴素贝叶斯概述"><a href="#1-朴素贝叶斯概述" class="headerlink" title="1. 朴素贝叶斯概述"></a>1. 朴素贝叶斯概述</h2><p>贝叶斯分类是一类分类算法的总称，这类算法均以贝叶斯定理为基础，故统称为贝叶斯分类。朴素贝叶斯（Naive Bayers）算法是一种基于概率统计的分类方法。它在条件独立假设的基础上，使用贝叶斯定理构建算法，在文本处理领域有广泛的应用。</p><h2 id="2-贝叶斯理论-amp-条件概率"><a href="#2-贝叶斯理论-amp-条件概率" class="headerlink" title="2. 贝叶斯理论 &amp; 条件概率"></a>2. 贝叶斯理论 &amp; 条件概率</h2><h3 id="2-1-贝叶斯理论"><a href="#2-1-贝叶斯理论" class="headerlink" title="2.1 贝叶斯理论"></a>2.1 贝叶斯理论</h3><p>我们现在有一个数据集，它由两类数据组成，数据分布如下图所示: </p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83.png" alt="朴素贝叶斯示例数据分布" title="参数已知的概率分布"></p><p>我们现在用 p1(x,y) 表示数据点 (x,y) 属于类别 1（图中用圆点表示的类别）的概率，用 p2(x,y) 表示数据点 (x,y) 属于类别 2（图中三角形表示的类别）的概率，那么对于一个新数据点 (x,y)，可以用下面的规则来判断它的类别: </p><ul><li>如果 p1(x,y) &gt; p2(x,y) ，那么类别为1</li><li>如果 p2(x,y) &gt; p1(x,y) ，那么类别为2</li></ul><p>也就是说，我们会选择高概率对应的类别。这就是贝叶斯决策理论的核心思想，即选择具有最高概率的决策。</p><h3 id="2-2-条件概率"><a href="#2-2-条件概率" class="headerlink" title="2.2 条件概率"></a>2.2 条件概率</h3><p>如果你对 p(x,y|c1) 符号很熟悉，那么可以跳过本小节。</p><p>有一个装了 7 块石头的罐子，其中 3 块是白色的，4 块是黑色的。如果从罐子中随机取出一块石头，那么是白色石头的可能性是多少？由于取石头有 7 种可能，其中 3 种为白色，所以取出白色石头的概率为 3/7 。那么取到黑色石头的概率又是多少呢？很显然，是 4/7 。我们使用 P(white) 来表示取到白色石头的概率，其概率值可以通过白色石头数目除以总的石头数目来得到。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/NB_2.png" alt="包含 7 块石头的集合"></p><p>如果这 7 块石头如下图所示，放在两个桶中，那么上述概率应该如何计算？</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/NB_5.png" alt="7块石头放入两个桶中"></p><p>计算 P(white) 或者 P(black) ，如果事先我们知道石头所在桶的信息是会改变结果的。这就是所谓的条件概率（conditional probablity）。假定计算的是从 B 桶取到白色石头的概率，这个概率可以记作 P(white|bucketB) ，我们称之为“在已知石头出自 B 桶的条件下，取出白色石头的概率”。很容易得到，P(white|bucketA) 值为 2/4 ，P(white|bucketB) 的值为 1/3 。</p><p>条件概率的计算公式如下: </p><p>P(white|bucketB) = P(white and bucketB) / P(bucketB)</p><p>首先，我们用 B 桶中白色石头的个数除以两个桶中总的石头数，得到 P(white and bucketB) = 1/7 .其次，由于 B 桶中有 3 块石头，而总石头数为 7 ，于是 P(bucketB) 就等于 3/7 。于是又 P(white|bucketB) = P(white and bucketB) / P(bucketB) = (1/7) / (3/7) = 1/3 。</p><p>另外一种有效计算条件概率的方法称为贝叶斯准则。贝叶斯准则告诉我们如何交换条件概率中的条件与结果，即如果已知 P(x|c)，要求 P(c|x)，那么可以使用下面的计算方法: </p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/NB_3.png" alt="计算p(c|x)的方法"></p><h3 id="2-3-使用条件概率来分类"><a href="#2-3-使用条件概率来分类" class="headerlink" title="2.3 使用条件概率来分类"></a>2.3 使用条件概率来分类</h3><p>上面我们提到贝叶斯决策理论要求计算两个概率 p1(x, y) 和 p2(x, y):</p><ul><li>如果 p1(x, y) &gt; p2(x, y), 那么属于类别 1;</li><li>如果 p2(x, y) &gt; p1(X, y), 那么属于类别 2.</li></ul><p>这并不是贝叶斯决策理论的所有内容。使用 p1() 和 p2() 只是为了尽可能简化描述，而真正需要计算和比较的是 p(c1|x, y) 和 p(c2|x, y) .这些符号所代表的具体意义是: 给定某个由 x、y 表示的数据点，那么该数据点来自类别 c1 的概率是多少？数据点来自类别 c2 的概率又是多少？注意这些概率与概率 p(x, y|c1) 并不一样，不过可以使用贝叶斯准则来交换概率中条件与结果。具体地，应用贝叶斯准则得到: </p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/NB_4.png" alt="应用贝叶斯准则"></p><p>使用上面这些定义，可以定义贝叶斯分类准则为:</p><ul><li>如果 P(c1|x, y) &gt; P(c2|x, y), 那么属于类别 c1;</li><li>如果 P(c2|x, y) &gt; P(c1|x, y), 那么属于类别 c2.</li></ul><p>在文档分类中，整个文档（如一封电子邮件）是实例，而电子邮件中的某些元素则构成特征。我们可以观察文档中出现的词，并把每个词作为一个特征，而每个词的出现或者不出现作为该特征的值，这样得到的特征数目就会跟词汇表中的词的数目一样多。</p><p>我们假设特征之间  <strong>相互独立</strong> 。所谓 <b>独立(independence)</b> 指的是统计意义上的独立，即一个特征或者单词出现的可能性与它和其他单词相邻没有关系，比如说，“我们”中的“我”和“们”出现的概率与这两个字相邻没有任何关系。这个假设正是朴素贝叶斯分类器中 朴素(naive) 一词的含义。朴素贝叶斯分类器中的另一个假设是，<b>每个特征同等重要</b>。</p><blockquote><p><b>Note:</b> 朴素贝叶斯分类器通常有两种实现方式: 一种基于伯努利模型实现，一种基于多项式模型实现。前者中并不考虑词在文档中出现的次数，只考虑出不出现，因此在这个意义上相当于假设词是等权重的。</p></blockquote><h2 id="3-一个简单的例子"><a href="#3-一个简单的例子" class="headerlink" title="3. 一个简单的例子"></a>3. 一个简单的例子</h2><p>我们先通过一个简单的例子，来看怎样应用朴素贝叶斯分类算法。假设有以下关于驾龄、平均车速和性别的统计数据：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-28f863c2b8a241e7.png" alt="img"></p><blockquote><p>现在观察到一个驾龄为2年的人，平均车速为80。问：这个人的性别是什么？</p></blockquote><p>假设 $C_{0}$ 表示女  $C_{1}$ 表示男，$x_{0}$ 表示驾龄，$x_{1}$ 表示平均车速。我们先来计算这个人为女性的概率相对值。根据统计数据，女性司机的概率 $P\left(C_{0}\right)=5 / 10=0.5$ ，。驾龄为2年的女性司机的概率即 $P\left(x_{0} \mid C_{0}\right)=1 / 5=0.2$ 。平均车速为80的女性司机的概率  $P\left(x_{1} \mid C_{0}\right)=1 / 5=0.2$，根据朴素贝叶斯分类算法的数学公式：</p><p>$$<br>P\left(C_{0}\right) \prod_{i=1}^{n} P\left(x_{i} \mid C_{0}\right)=0.5 \times 0.2 \times 0.2=0.02<br>$$<br>接着计算这个人为男性的概率相对值。根据统计数据，不难得出男性司机的概率 $P\left(C_{1}\right)=5 / 10=0.5$ 。驾龄为2年的男性司机的概率 $P\left(x_{0} \mid C_{1}\right)=2 / 5=0.4$ 。平均车速为80的男性司机的概率 $P\left(x_{1} \mid C_{1}\right)=3 / 5=0.6$<br>$$<br>P\left(C_{1}\right) \prod_{i=1}^{n} P\left(x_{i} \mid C_{1}\right)=0.5 \times 0.4 \times 0.6=0.12<br>$$<br>从相对概率来看，这个人是男性的概率是女性的概率的6倍，据此判断这个人是男性。我们也可以从相对概率中算出绝对概率，即这个人是男性的绝对概率是0.12/(0.12+0.02)=0.857。</p><h2 id="4-概率分布"><a href="#4-概率分布" class="headerlink" title="4.概率分布"></a>4.概率分布</h2><p>到目前为止，我们介绍的朴素贝叶斯分类算法是根据数据集里的数据，计算出绝对概率来进行求解。再看一遍朴素贝叶斯分类算法的数学公式：<br>$$<br>P\left(C_{k} \mid x\right) \propto P\left(C_{k}\right) \prod_{i=1}^{n} P\left(x_{i} \mid C_{k}\right)<br>$$<br>其中， $P\left(C_{k} \mid x\right) $表示在类别$C_{k}$ 里特征$x_{i}$ 出现的概率。这里有个最大的问题，如果数据集太小，那么从数据集里计算出来的概率偏差将非常严重。例如，观察一个质地均匀的骰子投掷6次的结果是[1,3,1,5,3,3]。质地均匀的骰子每个点出现的概率都是1/6，如果根据观察到的数据集去计算每个点的概率，和真实的概率相差将是非常大的。</p><p>怎么解决这个问题呢？答案是使用概率分布来计算概率，而不是从数据集里计算概率。</p><h3 id="4-1-概率统计的基本概念"><a href="#4-1-概率统计的基本概念" class="headerlink" title="4.1 概率统计的基本概念"></a>4.1 概率统计的基本概念</h3><p>人的身高是一个连续的随机变量，而投掷一个骰子得到的点数则是一个离散的随机变量。我们闭着眼睛随便找一个人，问这个人的身高是170cm的可能性是多大呢？如果有一个函数，能描述人类身高的可能性，那么直接把170cm代入即可求出这个可能性。这个函数就是概率密度函数，也称为<code>PDF（Probability Density Function）</code>。典型的概率密度函数是高斯分布函数，如人类的身高就满足高斯分布的规律。</p><p>再例如，投掷一个质地均匀的骰子，得到6的概率是多少呢？大家都知道答案是1/6。假如有一个函数f(x)，能描述骰子出现x点数的概率，那么把x代入即可得到概率，这个函数称为概率质量函数，即PMF（Probability Mass Function）。那么，为什么还有使用概率质量函数呢？一是在数学上追求统一性，二是并不是所有的离散随机变量的概率分布都像掷一次骰子这个直观。例如，投掷6次质地均匀的骰子，得到4个4的概率是多少？这个时候如果有概率质量函数，就可以轻松求解了。</p><blockquote><p>总结一下，随机变量分成两种，一种是连续随机变量，另外一种是离散随机变量。概率密度函数描述的是连续随机变量在某个特定值的可能性，概率质量函数描述的是离散随机变量在某个特定值的可能性。而概率分布则是描述随机变量取值的概率规律。</p></blockquote><h3 id="4-2-多项式分布"><a href="#4-2-多项式分布" class="headerlink" title="4.2 多项式分布"></a>4.2 多项式分布</h3><p> 抛一枚硬币，要么出现正面，要么出现反面（假设硬币不会立起来）。假如出现正面的概率是p，则出现反面的概率就是1-p。符合这个规律的概率分布，称为 <code>伯努利分布（Bernoulli Distribution）</code>。其概率质量函数为：<br>$$<br>f(k ; p)=p^{k}(1-p)^{1-k}<br>$$<br>p是出现1的概率。例如，一枚质地均匀的硬币被抛一次，得到正面的概率为0.5。我们代入上述公式，也可以得到相同的结果，即f(1;0.5)=0.5。</p><p>更一般的情况，即不止两种可能性时，假设每种可能性是$p_{i}$, 则满足  $\sum_{i}^{n} p_{i}=1$， 条件的概率分布，称为<code>类别分布（Categorical Distribution）</code>。例如，投掷一枚骰子，则会出现6中可能性，所有的可能性加起来的概率为1。类别分布的概率质量函数为：<br>$$<br>f(x \mid p)=\prod_{i=1}^{k} p_{i}^{x_{i}}<br>$$<br>那么，一枚质地均匀的硬币被抛10次，出现3次正面的概率是多少呢？这是个典型的二项式分布问题。二项式分布指的是把符号伯努利分布的实验做了n次，结果1出现0次、1次、2次……n次的概率分别是多少，它的概率质量函数为：<br>$$<br>f(k ; n, p)=C_{n}^{k} p^{k}(1-p)^{n-k}<br>$$<br>枚质地均匀的硬币被抛10次，出现3次正面的概率是多少？代入二项式分布的概率质量函数，得到：<br>$$<br>f(3 ; 10,0.5)=\frac{10 !}{3 ! \times(10-3) !} \times 0.5^{3} \times(1-0.5)^{10-3}=0.1171875<br>$$<br>其中，0的阶乘为1，即0!=1。结果跟我们预期的相符。当实验只做一次时，二项式分布退化为伯努利分布。</p><p>简单总结一下，二项式分布描述的是多次伯努利实验中，某个结果出现次数的概率。多项式分布描述的是多次进行满足类别分布的实验中，所有类别出现的次数组合的分布。</p><p>二项式分布和多项式分布结合朴素贝叶斯算法，经常被用来实现文章分类算法。例如，有一个论坛需要对用户的评论进行过滤，屏蔽不文明的评论。首先要有一个经过标记的数据集，我们称为语料库。假设使用人工标记的方法对评论进行标记，1表示不文明的评论，0表示正常评论。</p><p>假设我们的词库大小为 k ，则评论中出现某个词可以看成是一次满足k个类别的类别分布实验。我们知道，一篇评论是由n个词组成的，因此一篇评论可以看出是进行n次类别分布实验后的产物。由此得知，一篇评论服从多项式分布，它是词库里的所有词语出现的次数组合构成的随机向量。</p><p>一般情况下，词库比较大，评论只是由少量词组成，所以这个随机向量是很稀疏的，即大部分元素为0。通过分析预料库，我们容易统计出每个词出现在不文明评论及正常评论的概率，即 $p_{i}$的值。同时针对待预测的评论，我们可以统计词库里的所有词在这篇评论里出现的次数即  $x_{i}$ 的值，及评论的词语个数。代入多项式分布的概率质量函数：<br>$$<br>f(X, n, P)=\frac{n !}{\prod_{i=1}^{k} x_{i} !} \prod_{i=1}^{k} p_{i}^{x_{i}}<br>$$<br>我们可以求出，待预测评论构成的随机向量x，其为不文明评论的相对概率。同理也可以求出其为正常评论的相对概率。通过比较两个相对概率，就可以对这篇评论输出一个预测值。当然，实际应用中，涉及大量的自然语言处理的手段，包括中文分词技术、词的数学表示等，这里不再展开。</p><h3 id="4-3-高斯分布"><a href="#4-3-高斯分布" class="headerlink" title="4.3 高斯分布"></a>4.3 高斯分布</h3><p>在前面的车速和性别预测的例子里，对于平均车速，给出的是离散值，实际上它是一个连续值。这个时候怎么使用贝叶斯算法来处理呢？答案是，可以用区间把连续值转换成离散值。例如，我们可以把平均车速[0,40]作为一个级别，[40-80]，等等。这样就可以把连续值变成离散值，从而使用贝叶斯算法进行处理。另外一个方法，是使用连续随机变量的概率密度函数，把数值转换为一个相对概率。高斯分布就是这样一种方法。</p><p><code>高斯分布（Gaussian Distribution）</code>也称为 <code>正态分布（Normal Distribution）</code>，是最常见的一种分布。例如人的身高满足高斯分布，特别高和特别矮的人出现的相对概率都很低，大部分人身高都处在中间水平。还有人的智商也符合高斯分布，特别聪明的天才和特别笨的人出现的相对概率都很低，大部分人的智力都差不多。高斯分布的概率密度函数为：<br>$$<br>f(x)=\frac{1}{\sqrt{2 \pi \sigma^{2}}} \exp \left(-\frac{(x-\mu)^{2}}{2 \sigma^{2}}\right)<br>$$<br>其中，$x$ 为随机变量的值，$f(x)$ 为随机变量的相对概率，$\mu$为样本的平均值，其决定了高斯分布曲线的位置，<img src="https://math.jianshu.com/math?formula=%5Csigma" alt="\sigma">为标准差，其决定了高斯分布的幅度，$\sigma$ 值越大，分布越分散，<img src="https://math.jianshu.com/math?formula=%5Csigma" alt="\sigma">$\sigma$值越小，分布越集中。典型的高斯分布如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-e4f8952fc25052e3.png" alt="img"></p><p>这里需要注意的是：高斯分布的概率密度函数和支持向量机里的高斯核函数的区别。二者的核心数学模型是相同的，但是目的不同。</p><h3 id="4-4-连续值得处理"><a href="#4-4-连续值得处理" class="headerlink" title="4.4 连续值得处理"></a>4.4 连续值得处理</h3><p>假设，有一组身体特征的统计数据如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-ab2a72e2cf69b3f1.png" alt="img"></p><p>假设某人身高6英尺，体重130榜，脚掌8英寸，请问此人的性别是什么？</p><p>根据朴素贝叶斯公式：<br>$$<br>P\left(C_{k} \mid x\right) \propto P\left(C_{k}\right) \prod_{i=1}^{n} P\left(x_{i} \mid C_{k}\right)<br>$$<br>针对待预测的这个人的数据$x$ ，我们只需要分别求出男性和女性的相对概率<br>$$<br>P(\text {Gender}) \times P(\text {Height} \mid \text {Gender}) \times P(\text {Weight} \mid \text {Gender}) \times P(\text {Feet} \mid \text {Gender})<br>$$<br>然后取相对概率较高的性别为预测值即可。这里的困难在于，所有的特征都是连续变量，无法根据统计数据计算概率。当然，这里我们可以使用区间法，把连续变量变为离散变量，然后再计算概率。但由于数据量较小，这显然不是一个好办法。由于人类身高、体重、脚掌尺寸满足高斯分布，因此更好的办法是使用高斯分布的概率密度函数来求相对概率。</p><p>首先，针对男性和女性，分别求出特征的平均值和方差：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-4755f7b16509dc1d.png" alt="img"></p><p>接着利用高斯分布的概率密度函数，来求解男性身高为6英尺的相对概率：<br>$$<br>P(\text {Height}=6 \mid \text {Male})=\frac{1}{\sqrt{2 \pi \times 0.035033^{2}}} \exp \left(-\frac{(6-5.855)^{2}}{2 \times 0.035033^{2}}\right) \approx 1.5789<br>$$<br>这里的关键是把连续值（身高）作为输入，通过高斯分布的概率密度函数的处理，直接转换为相对概率。注意这里是相对概率，所以其值大于1并未违反概率论规则。</p><h2 id="5-示例：文档分类"><a href="#5-示例：文档分类" class="headerlink" title="5. 示例：文档分类"></a>5. 示例：文档分类</h2><p>在 <code>scikit-learn</code>里，朴素贝叶斯算法在 <code>sklearn.naive_bayes</code> 包里实现，包含本文介绍的几种典型的概率分布算法。其中 <code>GaussianNB</code> 实现了高斯分布的朴素贝叶斯算法，<code>MultinomialNB</code> 实现了多项式分布的朴素贝叶斯算法，<code>BernoulliNB</code>实现了伯努利分布的朴素贝叶斯算法。朴素贝叶斯算法在自然语言处理领域有着广泛的应用，这里我们使用 <code>MultinomialNB</code> 来实现文档的自动分类。</p><h3 id="5-1-获取数据集"><a href="#5-1-获取数据集" class="headerlink" title="5.1 获取数据集"></a>5.1 获取数据集</h3><p>这里使用的数据集来自 mlcomp.org上的20news-18828，可以直接访问<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fmlcomp.org%2Fdatasets%2F379">http://mlcomp.org/datasets/379</a>下载。其目录下包含3个子目录和一个名为metadata的介绍文件，数据集也可在百度网盘下载。，已分享。</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1uQNkLWIN0niz8-p8BppRJg">https://pan.baidu.com/s/1uQNkLWIN0niz8-p8BppRJg</a><br>提取码：bvhe<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p></blockquote><p>我们将使用 <code>train</code> 子目录下的文档进行模型训练，然后使用 <code>test</code> 子目录下的文档进行模型测试。<code>train</code> 子目录下包含 20 个子目录，每个子目录代表一种文档的类型，子目录下的所有文档都是属于目录名称所标识的文档类型。可以随意浏览数据集，以便对数据集有一个感性的认识。例如，datasets/mlcomp/379/train/rec.autos/6652-103421是一个讨论汽车主题的帖子：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Hahahahahaha. gasp pant Hm, I’m not sure whether the above was just a silly </span><br><span class="line">    remark or a serious remark. But <span class="keyword">in</span> case there are some misconceptions,</span><br><span class="line">I think Henry Robertson hasn’t updated his <span class="keyword">data</span> file on Korea since…mid 1970s. </span><br><span class="line">Owning a car <span class="keyword">in</span> Korea <span class="keyword">is</span> no longer a luxury. Most middle <span class="class"><span class="keyword">class</span> <span class="title">people</span> </span></span><br><span class="line"><span class="keyword">in</span> Korea can afford a car and <span class="keyword">do</span> have at least one car. The problem <span class="keyword">in</span> Korea,</span><br><span class="line">especially <span class="keyword">in</span> Seoul, <span class="keyword">is</span> that there are just so many privately-owned cars,</span><br><span class="line"><span class="keyword">as</span> well <span class="keyword">as</span> taxis and buses, the rush-hour has become a <span class="number">24</span> hour phenomenon </span><br><span class="line">    and that there <span class="keyword">is</span> no place to park. Last time I heard, back <span class="keyword">in</span> January, </span><br><span class="line">the Kim Administration wanted to legislate a law requireing a potential </span><br><span class="line">car owner to provide his or her own parking area, just like they <span class="keyword">do</span> <span class="keyword">in</span> Japan.</span><br><span class="line">Also, Henry would be glad to know that Hyundai isn’t the only car manufacturer </span><br><span class="line"><span class="keyword">in</span> Korea. Daewoo has always manufactured cars and I believe Kia <span class="keyword">is</span> back <span class="keyword">in</span> </span><br><span class="line">business <span class="keyword">as</span> well. Imported cars, such <span class="keyword">as</span> Mercury Sable are becoming quite </span><br><span class="line">popular <span class="keyword">as</span> well, though they are still quite expensive.</span><br><span class="line">Finally, please ignore Henry’s posting about Korean politics and bureaucracy. </span><br><span class="line">    He’s quite uninformed.</span><br></pre></td></tr></tbody></table></figure><h3 id="5-2-文档的数学表达"><a href="#5-2-文档的数学表达" class="headerlink" title="5.2 文档的数学表达"></a>5.2 文档的数学表达</h3><p>怎样把一个文档表达为计算机可以理解并处理的信息，是自然语言处理中的一个重要课题，完整内容可以写成鸿篇巨著。本节简单介绍TF-IDF的原理，以便更好地理解本文介绍的实例。</p><p><code>TF-IDF</code> 是一种统计方法，用以评估一个词语对于一份文档的重要程度。<code>TF（Term Frequency）</code>表示词频，对于一份文档而言，词频是指特定词语在这篇文档里出现的次数除以该文档总词数。例如，一篇文档一共有1000个词，其中“朴素贝叶斯”出现了5次，“的”出现了25次，“应用”出现了12次，那么它们的词频分别是0.005，0.025和0.012。</p><p><code>IDF（Inverse Document Frequency）</code>表示一个词的逆向文档频率，由总文档数除以包含该词的文档数的商再取对数得到。例如：我们的数据集一共10000篇文档，其中“朴素贝叶斯”只出现在10篇文档中，则其<code>IDF=log(10000/10)=3</code>；“的”在所有文档中都出现过，则其 <code>IDF=log(10000/10000)=0</code>；“应用”在1000篇文档中出现过，则其 <code>IDF=log(10000/1000)=1</code>。</p><p>计算出每个词的TF和IDF之后，两者相乘，即可得到这个词在文档中的重要程度。词语的重要性与它在该文档中出现的次数成正比，与它在语料库中出现的文档数成反比。</p><p>有了TF-IDF这个工具，我们就可以把一篇文档转换为一个向量。首先，可以从数据集<code>（在自然语言处理领域也称corpus，即语料库）</code>里提取出所有出现的词，我们称为词典。假设词典里总共有10000个词语，则每个文档都可以转化为一个10000维的向量。其次，针对我们要转换的文档里出现的每个词语，都去计算其TF-IDF，并把这个值填入文档向量里这个词对应的元素上。这样就完成了把一篇文档转换为一个向量的过程。一个文档往往只会由词典里的一小部分词语构成，这就意味着这个向量里的大部分元素都是0。</p><p>所幸，上述过程不需要我们自己写代码去完成，<code>scikit-learn</code> 软件包里实现了把文档转换为向量的过程。首先，把训练用的语料库读入内存：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_files</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"loading train dataset ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">news_train = load_files(<span class="string">'datasets/mlcomp/379/train'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"summary: {0} documents in {1} categories."</span></span><br><span class="line">      .<span class="built_in">format</span>(<span class="built_in">len</span>(news_train.data),<span class="built_in">len</span>(news_train.target_names)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.<span class="built_in">format</span>(time()-t))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loading train dataset ...</span><br><span class="line">summary: 13180 documents <span class="keyword">in</span> 20 categories.</span><br><span class="line"><span class="keyword">done</span> <span class="keyword">in</span> 1.2616519927978516 seconds</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>datasets/mlcomp/379/train</code>目录下放的就是我们的语料库，其中包含20个子目录，每个子目录的名字表示的是文档的类别，子目录下包含这种类别的所有文档。<code>load_files()</code> 函数会从这个目录里把所有的文档都读入内存，并且自动根据所在的子目录名称打上标签。其中，<code>news_train.data</code>是一个数组，里面包含了所有文档的文本信息。<code>news_train.target</code>也是一个数组，包含了所有文档所属的类别，而<code>news_train.target_names</code>则是类别的名称，因此，如果我们想知道第一篇文档所属的类别名称，只需要通过代码<code>news_train.target_names[news_train.target[0]]</code>即可得到。</p><p>该语料库里总共有13180个文档，分成20个类别。接着需要把这些文档全部转换为由TF-IDF表达的权重信息构成的向量：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"vectorizing train dataset ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">vectorizer = TfidfVectorizer(encoding=<span class="string">'latin-1'</span>)</span><br><span class="line">X_train = vectorizer.fit_transform((d <span class="keyword">for</span> d <span class="keyword">in</span> news_train.data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"n_samples: %d, n_features: %d"</span> % X_train.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"number of non-zero features in samples [{0}]:{1}"</span></span><br><span class="line">      .<span class="built_in">format</span>(news_train.filenames[<span class="number">0</span>],X_train[<span class="number">0</span>].getnnz()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.<span class="built_in">format</span>(time()-t))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vectorizing train dataset ...</span><br><span class="line">n_samples: <span class="number">13180</span>, n_features: <span class="number">130274</span></span><br><span class="line">number of non-zero features in samples [datasets/mlcomp/<span class="number">379</span>/train\talk.politics.misc\<span class="number">17860</span>-<span class="number">178992</span>]:<span class="number">108</span></span><br><span class="line">done in <span class="number">2.6174726486206055</span> seconds</span><br></pre></td></tr></tbody></table></figure><p>其中，<code>TfidfVectorizer</code>类是用来把所有的文档转换为矩阵，该矩阵每行都代表一个文档，一行中的每个元素代表一个对应的词语的重要性，词语的重要性由<code>TF-IDF</code>来表示。其 <code>fit_transform()</code> 方法是 fit() 和transform()合并起来。其中，fit()  会先完成语料库分析、提取词典等操作，transform()会把对每篇文档转换为向量，最终构成一个矩阵，保存在X_train变量里。</p><p>由输出可以知道，我们的词典总共有 130274 个词语，即每篇文档都可转换为一个 130274 维的向量。第一篇文档中，只有108个非零元素，即这篇文档总共由108个不重复的单词组成，在这篇文档中出现的这108个单词的TF-IDF值会被计算出来，并保存在向量中的指定位置上。X_train是一个维度为13180*130274的稀疏矩阵。</p><p>X_train稀疏矩阵由一个三元组(row,col,score)构成：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(X_train[0])</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="number">56813</span>)    <span class="number">0.014332663773643272</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">45689</span>)    <span class="number">0.08373343949755</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">46084</span>)    <span class="number">0.08109733529789522</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">125882</span>)   <span class="number">0.0873157704840211</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">50150</span>)    <span class="number">0.020654313721609956</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">87702</span>)    <span class="number">0.04643235585055511</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">33334</span>)    <span class="number">0.1025405658189532</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">111805</span>)   <span class="number">0.014332663773643272</span></span><br><span class="line">: :</span><br><span class="line">(<span class="number">0</span>, <span class="number">67768</span>)    <span class="number">0.08982314745972582</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">41790</span>)    <span class="number">0.09260592033433869</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">105800</span>)   <span class="number">0.08713990737243116</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">37075</span>)    <span class="number">0.10018566542781165</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">23162</span>)    <span class="number">0.08920437523600384</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">124699</span>)   <span class="number">0.06257976758779137</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">94119</span>)    <span class="number">0.1159317059788844</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">56555</span>)    <span class="number">0.06984885482106491</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">62776</span>)    <span class="number">0.10474995568339582</span></span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-模型训练"><a href="#5-3-模型训练" class="headerlink" title="5.3 模型训练"></a>5.3 模型训练</h3><p>使用 <code>MultinomialNB</code> 对数据集进行训练：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"training models ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">y_train = news_train.target</span><br><span class="line">clf = MultinomialNB(alpha=<span class="number">0.0001</span>)</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line">train_score = clf.score(X_train,y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"train score: {0}"</span>.<span class="built_in">format</span>(train_score))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.<span class="built_in">format</span>(time()-t))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">training models ...</span><br><span class="line">train score: <span class="number">0.9978755690440061</span></span><br><span class="line">done in <span class="number">0.15497064590454102</span> seconds</span><br></pre></td></tr></tbody></table></figure><p>其中，alpha表示平滑参数，其值越小，越容易造成过拟合，值太大，容易造成欠拟合。</p><p>接着，我们加载测试数据集，并用一篇文档来预测其是否准确。测试数据集在<code>datasets/mlcomp/379/test</code>目录下，我们用前面介绍的相同的方法先加载数据集：</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"loading test dataset ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">news_test = load_files(<span class="string">'datasets/mlcomp/379/test'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"summary: {0} documents in {1} categories."</span></span><br><span class="line">      .format(<span class="built_in">len</span>(news_test.data),<span class="built_in">len</span>(news_test.target_names)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.format(time()-t))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loading <span class="built_in">test</span> dataset ...</span><br><span class="line">summary: 5648 documents <span class="keyword">in</span> 20 categories.</span><br><span class="line"><span class="keyword">done</span> <span class="keyword">in</span> 0.3548290729522705 seconds</span><br></pre></td></tr></tbody></table></figure><p>测试数据集共有5648篇文档。接着，我们把文档向量化：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"vectorizing test dataset ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">X_test = vectorizer.transform((d <span class="keyword">for</span> d <span class="keyword">in</span> news_test.data))</span><br><span class="line">y_test = news_test.target</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"n_samples: %d, n_features: %d"</span> % X_test.shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"number of non-zero features in sample [{0}]: {1}"</span></span><br><span class="line">      .format(news_test.filenames[0],X_test[0].getnnz()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in {0} seconds"</span>.format(time()-t))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vectorizing <span class="built_in">test</span> dataset ...</span><br><span class="line">n_samples: 5648, n_features: 130274</span><br><span class="line">number of non-zero features <span class="keyword">in</span> sample [datasets/mlcomp/379/<span class="built_in">test</span>\rec.autos\7429-103268]: 61</span><br><span class="line"><span class="keyword">done</span> <span class="keyword">in</span> 0.9695498943328857 seconds</span><br></pre></td></tr></tbody></table></figure><p>注意，vectorizer变量是我们处理训练数据集时用到的向量化的类的实例，此处我们只需要调用transform()进行TF-IDF数值计算即可，不需要再调用fit()进行语料库分析了。</p><p>这样，我们的测试数据集也转换为了一个维度为5648*130274的稀疏矩阵。可以取测试数据集里的第一篇文档初步验证一下，看看训练出来的模型能否正确地预测这个文档所属的类别：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pred = clf.predict(X_test[0])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"predict: {0} is in category {1}"</span></span><br><span class="line">      .format(news_test.filenames[0],news_test.target_names[pred[0]]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"actually: {0} is in category {1}"</span></span><br><span class="line">      .format(news_test.filenames[0],news_test.target_names[news_test.target[0]]))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">predict: datasets/mlcomp/379/<span class="built_in">test</span>\rec.autos\7429-103268 is <span class="keyword">in</span> category rec.autos</span><br><span class="line">actually: datasets/mlcomp/379/<span class="built_in">test</span>\rec.autos\7429-103268 is <span class="keyword">in</span> category rec.autos</span><br></pre></td></tr></tbody></table></figure><p>看来预测的结果和实际结果是相符的。</p><h3 id="5-4-模型评价"><a href="#5-4-模型评价" class="headerlink" title="5.4 模型评价"></a>5.4 模型评价</h3><p>虽然通过验证，说明我们训练的模型是可用的，但是不能通过一个样本的预测来评价模型的准确性。我们需要对模型有个全方位的评价，所幸 <code>scikit-learn</code> 软件包提供了全方位的模型评价工具。</p><p>首先需要对测试数据集进行预测：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"predicting test dataset ..."</span>)</span><br><span class="line">t = time()</span><br><span class="line">pred_test = clf.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"done in %fs"</span> % (time()-t))</span><br></pre></td></tr></tbody></table></figure><p>接着使用 <code>classification_report()</code> 函数来查看一下针对每个类别的预测准确性：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"classification report on test set for classifier:"</span>)</span><br><span class="line"><span class="built_in">print</span>(clf)</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test,pred_test,target_names=news_test.target_names))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">classification report on <span class="built_in">test</span> <span class="built_in">set</span> <span class="keyword">for</span> classifier:</span><br><span class="line">MultinomialNB(alpha=0.0001, class_prior=None, fit_prior=True)</span><br><span class="line">                          precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">             alt.atheism       0.90      0.91      0.91       245</span><br><span class="line">           comp.graphics       0.80      0.90      0.85       298</span><br><span class="line"> comp.os.ms-windows.misc       0.82      0.79      0.80       292</span><br><span class="line">comp.sys.ibm.pc.hardware       0.81      0.80      0.81       301</span><br><span class="line">   comp.sys.mac.hardware       0.90      0.91      0.91       256</span><br><span class="line">          comp.windows.x       0.88      0.88      0.88       297</span><br><span class="line">            misc.forsale       0.87      0.81      0.84       290</span><br><span class="line">               rec.autos       0.92      0.93      0.92       324</span><br><span class="line">         rec.motorcycles       0.96      0.96      0.96       294</span><br><span class="line">      rec.sport.baseball       0.97      0.94      0.96       315</span><br><span class="line">        rec.sport.hockey       0.96      0.99      0.98       302</span><br><span class="line">               sci.crypt       0.95      0.96      0.95       297</span><br><span class="line">         sci.electronics       0.91      0.85      0.88       313</span><br><span class="line">                 sci.med       0.96      0.96      0.96       277</span><br><span class="line">               sci.space       0.94      0.97      0.96       305</span><br><span class="line">  soc.religion.christian       0.93      0.96      0.94       293</span><br><span class="line">      talk.politics.guns       0.91      0.96      0.93       246</span><br><span class="line">   talk.politics.mideast       0.96      0.98      0.97       296</span><br><span class="line">      talk.politics.misc       0.90      0.90      0.90       236</span><br><span class="line">      talk.religion.misc       0.89      0.78      0.83       171</span><br><span class="line"></span><br><span class="line">             avg / total       0.91      0.91      0.91      5648</span><br></pre></td></tr></tbody></table></figure><p>从输出结果中可以看出，针对每种类别都统计了<code>查准率</code>、<code>召回率</code>和<code>F1-Score</code>。此外，还可以通过confusion_matrix()函数生成混淆矩阵，观察每种类别被错误分类的情况。例如，这些被错误分类的文档是被错误分类到哪些类别里的：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line">cm = confusion_matrix(y_test,pred_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"confusion matrix:\n"</span>)</span><br><span class="line"><span class="built_in">print</span>(cm)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">confusion matrix:</span><br><span class="line"></span><br><span class="line">[<span class="meta">[224   0   0   0   0   0   0   0   0   0   0   0   0   0   2   5   0   0    1  13</span>]</span><br><span class="line"> [<span class="meta">  1 267   5   5   2   8   1   1   0   0   0   2   3   2   1   0   0   0    0   0</span>]</span><br><span class="line"> [<span class="meta">  1  13 230  24   4  10   5   0   0   0   0   1   2   1   0   0   0   0    1   0</span>]</span><br><span class="line"> [<span class="meta">  0   9  21 242   7   2  10   1   0   0   1   1   7   0   0   0   0   0    0   0</span>]</span><br><span class="line"> [<span class="meta">  0   1   5   5 233   2   2   2   1   0   0   3   1   0   1   0   0   0    0   0</span>]</span><br><span class="line"> [<span class="meta">  0  20   6   3   1 260   0   0   0   2   0   1   0   0   2   0   2   0    0   0</span>]</span><br><span class="line"> [<span class="meta">  0   2   5  12   3   1 235  10   2   3   1   0   7   0   2   0   2   1    4   0</span>]</span><br><span class="line"> [<span class="meta">  0   1   0   0   1   0   8 300   4   1   0   0   1   2   3   0   2   0    1   0</span>]</span><br><span class="line"> [<span class="meta">  0   1   0   0   0   2   2   3 283   0   0   0   1   0   0   0   0   0    1   1</span>]</span><br><span class="line"> [<span class="meta">  0   1   1   0   1   2   1   2   0 297   8   1   0   1   0   0   0   0    0   0</span>]</span><br><span class="line"> [<span class="meta">  0   0   0   0   0   0   0   0   2   2 298   0   0   0   0   0   0   0    0   0</span>]</span><br><span class="line"> [<span class="meta">  0   1   2   0   0   1   1   0   0   0   0 284   2   1   0   0   2   1    2   0</span>]</span><br><span class="line"> [<span class="meta">  0  11   3   5   4   2   4   5   1   1   0   4 266   1   4   0   1   0    1   0</span>]</span><br><span class="line"> [<span class="meta">  1   1   0   1   0   2   1   0   0   0   0   0   1 266   2   1   0   0    1   0</span>]</span><br><span class="line"> [<span class="meta">  0   3   0   0   1   1   0   0   0   0   0   1   0   1 296   0   1   0    1   0</span>]</span><br><span class="line"> [<span class="meta">  3   1   0   1   0   0   0   0   0   0   1   0   0   2   1 280   0   1    1   2</span>]</span><br><span class="line"> [<span class="meta">  1   0   2   0   0   0   0   0   1   0   0   0   0   0   0   0 236   1    4   1</span>]</span><br><span class="line"> [<span class="meta">  1   0   0   0   0   1   0   0   0   0   0   0   0   0   0   3   0 290    1   0</span>]</span><br><span class="line"> [<span class="meta">  2   1   0   0   1   1   0   1   0   0   0   0   0   0   0   1  10   7  212   0</span>]</span><br><span class="line"> [<span class="meta"> 16   0   0   0   0   0   0   0   0   0   0   0   0   0   0  12   4   1    4 134</span>]]</span><br></pre></td></tr></tbody></table></figure><p>例如：从第一行可以看出，类别0（alt.atheism）的文档，有13个被错误地分类到类别19（talk.religion.misc）里。当然，我们还可以把混淆矩阵进行数据可视化：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show confusion matrix</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">8</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.title(<span class="string">'Confusion matrix of the classifier'</span>)</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'none'</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'none'</span>)</span><br><span class="line">ax.set_xticklabels([])</span><br><span class="line">ax.set_yticklabels([])</span><br><span class="line">plt.matshow(cm,fignum=<span class="number">1</span>,cmap=<span class="string">'gray'</span>)</span><br><span class="line">plt.colorbar()</span><br></pre></td></tr></tbody></table></figure><p>输出图形如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200702160731221.png" alt="image-20200702160731221">除对角线外，其他地方颜色越浅，说明此处错误越多。通过这些数据，我们可以详细分析样本数据，找出为什么某种类别会被错误地分类到另一种类别里，从而进一步优化模型。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列六：SVM</title>
      <link href="/2020/07/01/scikit-learn-xi-lie-liu-svm/"/>
      <url>/2020/07/01/scikit-learn-xi-lie-liu-svm/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="1-SVM概述"><a href="#1-SVM概述" class="headerlink" title="1. SVM概述"></a>1. SVM概述</h2><p>支持向量机(Support Vector Machines, SVM): 是一种监督学习算法。在工业界和学术界都有广泛的应用。特别是针对数据集较小的情况下，往往其分类效果比神经网络好。</p><ul><li>支持向量(Support Vector) 就是离分隔超平面最近的那些点。</li><li>机(Machine) 就是表示一种算法，而不是表示机器。</li></ul><h2 id="2-SVM原理"><a href="#2-SVM原理" class="headerlink" title="2. SVM原理"></a>2. SVM原理</h2><p>SVM的原理就是使用分隔超平面来划分数据集，并使得支持向量（数据集中离分隔超平面最近的点）到该分隔超平面的距离最大。其最大特点是能构造出最大间距的决策边界，从而提高分类算法的鲁棒性。</p><p>要给左右两边的点进行分类，明显发现: 选择D会比B、C分隔的效果要好很多。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/SVM_3_linearly-separable.jpg" alt="线性可分"></p><h3 id="2-1-寻找最大间隔"><a href="#2-1-寻找最大间隔" class="headerlink" title="2.1 寻找最大间隔"></a>2.1 寻找最大间隔</h3><h4 id="点到超平面的距离"><a href="#点到超平面的距离" class="headerlink" title="点到超平面的距离"></a>点到超平面的距离</h4><ul><li><p>分隔超平面<code>函数间距</code>:  $y(x)=w^Tx+b$</p></li><li><p>分类的结果:  $f(x)=sign(w^Tx+b)$   (sign表示&gt;0为1，&lt;0为-1，=0为0) </p></li><li><p>点到超平面的<code>几何间距</code>: $d(x)=(w^Tx+b)/||w||$  （$||w||$表示w矩阵的二范数=&gt; $\sqrt{w^T*w}$, 点到超平面的距离也是类似的）</p></li></ul><p>$$<br>d=\left|\frac{A x_{0}+B y_{0}+C}{\sqrt{A^{2}+B^{2}}}\right|<br>$$</p><h4 id="拉格朗日乘子法"><a href="#拉格朗日乘子法" class="headerlink" title="拉格朗日乘子法"></a>拉格朗日乘子法</h4><ul><li>类别标签用-1、1，是为了后期方便 $ label<em>(w^Tx+b)$ 的标识和距离计算；如果 $label</em>(w^Tx+b)&gt;0$ 表示预测正确，否则预测错误。</li><li>现在目标很明确，就是要找到<code>w</code>和<code>b</code>，因此我们必须要找到最小间隔的数据点，也就是前面所说的<code>支持向量</code>。<ul><li>也就说，让最小的距离取最大.(最小的距离: 就是最小间隔的数据点；最大: 就是最大间距，为了找出最优超平面–最终就是支持向量)</li><li>目标函数: $arg: max_{关于w, b} \left( min[label<em>(w^Tx+b)]</em>\frac{1}{||w||} \right) $<ol><li>如果 $label*(w^Tx+b)&gt;0$ 表示预测正确，也称<code>函数间隔</code>，$||w||$ 可以理解为归一化，也称<code>几何间隔</code>。</li><li>令 $label<em>(w^Tx+b)&gt;=1$， 因为0～1之间，得到的点是存在误判的可能性，所以要保障 $min[label</em>(w^Tx+b)]=1$，才能更好降低噪音数据影响。</li><li>所以本质上是求 $arg: max_{关于w, b}  \frac{1}{||w||} $；也就说，我们约束(前提)条件是: $label*(w^Tx+b)=1$</li></ol></li></ul></li><li>新的目标函数求解:  $arg: max_{关于w, b}  \frac{1}{||w||} $<ul><li>=&gt; 就是求: $arg: min_{关于w, b} ||w|| $ (求矩阵会比较麻烦，如果x只是 $\frac{1}{2}*x^2$ 的偏导数，那么。。同样是求最小值)</li><li>=&gt; 就是求: $arg: min_{关于w, b} (\frac{1}{2}*||w||^2)$ (二次函数求导，求极值，平方也方便计算)</li><li>本质上就是求线性不等式的二次优化问题(求分隔超平面，等价于求解相应的凸二次规划问题)</li></ul></li><li>通过拉格朗日乘子法，求二次优化问题<ul><li>假设需要求极值的目标函数 (objective function) 为 f(x,y)，限制条件为 φ(x,y)=M  # M=1</li><li>设g(x,y)=M-φ(x,y)   # 临时φ(x,y)表示下文中 $label*(w^Tx+b)$</li><li>定义一个新函数: F(x,y,λ)=f(x,y)+λg(x,y)</li><li>a为λ（a&gt;=0），代表要引入的拉格朗日乘子(Lagrange multiplier)</li><li>那么:  $L(w,b,\alpha)=\frac{1}{2} * ||w||^2 + \sum_{i=1}^{n} \alpha_i * [1 - label * (w^Tx+b)]$</li><li>因为: $label<em>(w^Tx+b)&gt;=1, \alpha&gt;=0$ , 所以 $\alpha</em>[1-label<em>(w^Tx+b)]&lt;=0$ , $\sum_{i=1}^{n} \alpha_i * [1-label</em>(w^Tx+b)]&lt;=0$ </li><li>当 $label*(w^Tx+b)&gt;1$ 则 $\alpha=0$ ，表示该点为<font color="red">非支持向量</font></li><li>相当于求解:  $max_{关于\alpha} L(w,b,\alpha) = \frac{1}{2} *||w||^2$ </li><li>如果求:  $min_{关于w, b} \frac{1}{2} *||w||^2$ , 也就是要求:  $min_{关于w, b} \left( max_{关于\alpha} L(w,b,\alpha)\right)$ </li></ul></li><li>现在转化到对偶问题的求解<ul><li>$min_{关于w, b} \left(max_{关于\alpha} L(w,b,\alpha) \right) $ &gt;= $max_{关于\alpha} \left(min_{关于w, b}\ L(w,b,\alpha) \right) $ </li><li>现在分2步</li><li>先求:  $min_{关于w, b} L(w,b,\alpha)=\frac{1}{2} * ||w||^2 + \sum_{i=1}^{n} \alpha_i * [1 - label * (w^Tx+b)]$</li><li>就是求<code>L(w,b,a)</code>关于[w, b]的偏导数, 得到<code>w和b的值</code>，并化简为: <code>L和a的方程</code>。</li><li>参考:  如果公式推导还是不懂，也可以参考《统计学习方法》李航-P103&lt;学习的对偶算法&gt;<br><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/SVM_%E6%9D%BE%E5%BC%9B%E5%8F%98%E9%87%8F.jpg" alt="计算拉格朗日函数的对偶函数"></li></ul></li><li>终于得到课本上的公式:  $max_{关于\alpha} \left( \sum_{i=1}^{m} \alpha_i - \frac{1}{2} \sum_{i, j=1}^{m} label_i·label_j·\alpha_i·\alpha_j·&lt;x_i, x_j&gt; \right) $</li><li>约束条件:  $a&gt;=0$ 并且 $\sum_{i=1}^{m} a_i·label_i=0$</li></ul><h3 id="2-2-松弛变量-slack-variable"><a href="#2-2-松弛变量-slack-variable" class="headerlink" title="2.2 松弛变量(slack variable)"></a>2.2 松弛变量(slack variable)</h3><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/%E6%9D%BE%E5%BC%9B%E5%8F%98%E9%87%8F.png" alt="松弛变量公式"></p><ul><li>我们知道几乎所有的数据都不那么干净, 通过引入松弛变量来 <code>允许数据点可以处于分隔面错误的一侧</code>。</li><li>约束条件:  $C&gt;=a&gt;=0$ 并且 $\sum_{i=1}^{m} a_i·label_i=0$</li><li>总的来说: <ul><li><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/SVM_5_Lagrangemultiplier.png" alt="松弛变量"> 表示 <code>松弛变量</code></li><li>常量C是 <code>惩罚因子</code>, 表示离群点的权重（用于控制“最大化间隔”和“保证大部分点的函数间隔小于1.0” ）<ul><li>$label*(w^Tx+b) &gt; 1$ and alpha = 0 (在边界外，就是非支持向量)</li><li>$label*(w^Tx+b) = 1$ and 0&lt; alpha &lt; C (在分割超平面上，就支持向量)</li><li>$label*(w^Tx+b) &lt; 1$ and alpha = C (在分割超平面内，是误差点 -&gt; C表示它该受到的惩罚因子程度)</li><li>参考地址: <a href="https://www.zhihu.com/question/48351234/answer/110486455">https://www.zhihu.com/question/48351234/answer/110486455</a></li></ul></li><li>C值越大，表示离群点影响越大，就越容易过度拟合；反之有可能欠拟合。</li><li>我们看到，目标函数控制了离群点的数目和程度，使大部分样本点仍然遵守限制条件。</li><li>例如: 正类有10000个样本，而负类只给了100个（C越大表示100个负样本的影响越大，就会出现过度拟合，所以C决定了负样本对模型拟合程度的影响！，C就是一个非常关键的优化点！）</li></ul></li><li>这一结论十分直接，SVM中的主要工作就是要求解 alpha.</li></ul><h3 id="2-3-核函数"><a href="#2-3-核函数" class="headerlink" title="2.3 核函数"></a>2.3 核函数</h3><ul><li>对于线性可分的情况，效果明显</li><li>对于非线性的情况也一样，此时需要用到一种叫<code>核函数(kernel)</code>的工具将数据转化为分类器易于理解的形式。</li></ul><blockquote><p>利用核函数将数据映射到高维空间</p></blockquote><ul><li>使用核函数: 可以将数据从某个特征空间到另一个特征空间的映射。（通常情况下: 这种映射会将低维特征空间映射到高维空间。）</li><li>如果觉得特征空间很装逼、很难理解。</li><li>可以把核函数想象成一个包装器(wrapper)或者是接口(interface)，它能将数据从某个很难处理的形式转换成为另一个较容易处理的形式。</li><li>经过空间转换后: 低维需要解决的非线性问题，就变成了高维需要解决的线性问题。</li><li>SVM 优化特别好的地方，在于所有的运算都可以写成内积(inner product: 是指2个向量相乘，得到单个标量 或者 数值)；内积替换成核函数的方式被称为<code>核技巧(kernel trick)</code>或者<code>核"变电"(kernel substation)</code></li><li>核函数并不仅仅应用于支持向量机，很多其他的机器学习算法也都用到核函数。最流行的核函数: 径向基函数(radial basis function)hecn/AiLearning/blob/master/src/py2.x/ml/6.SVM/svm-complete.py</li></ul><h2 id="3-scikit-learn里的SVM"><a href="#3-scikit-learn里的SVM" class="headerlink" title="3. scikit-learn里的SVM"></a>3. scikit-learn里的SVM</h2><p>在scikit-learn里对SVM的算法实现都在包sklearn.svm下面，其中SVC类是用来进行分类任务的，SVR类是用来进行数值回归任务的。我们可能会有疑问，SVM不是用来进行分类的算法吗，为什么可以用来进行数值回归？实际上这只是数学上的一些扩展而已，在计算机里，可以用离散的数值计算来代替连续的数值回归。我们在K-近邻算法中已经看到过这种扩展实现。</p><p>我们以 SVC 为例。首先需要选择 SVM 的核函数，由参数 kernel 来指定，其中值 linea r表示线性核函数，它只能产生直线形状的分隔超平面；值 poly 表示多项式核函数，用它可以构建出复杂形状的分隔超平面；值 rbf 表示径向基核函数，即高斯核函数。</p><p>不同的核函数需要指定不同的参数。针对线性核函数，只需要指定参数 C，它表示对不符合最大间距规则的样本的惩罚力度，即前面介绍的松弛系数。针对多项式核函数，除了参数 C 之外，还需要指定 degree，它表示多项式的阶数。针对高斯核函数，除了参数C之外，还需要指定 gamma 值，这个值对应的是高斯核函数公式中的$\frac{1}{2 \sigma^{2}}$</p><p>下面先来看一个最简单的例子。我们生成一个有两个特征、包含两种类别的数据，然后用线性核函数的SVM算法进行分类：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_hyperplane</span>(<span class="params">clf, X, y, </span></span></span><br><span class="line"><span class="params"><span class="function">                    h=<span class="number">0.02</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                    draw_sv=<span class="literal">True</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">                    title=<span class="string">'hyperplan'</span></span>):</span></span><br><span class="line">    <span class="comment"># create a mesh to plot in</span></span><br><span class="line">    x_min, x_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">0</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    y_min, y_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>() - <span class="number">1</span>, X[:, <span class="number">1</span>].<span class="built_in">max</span>() + <span class="number">1</span></span><br><span class="line">    xx, yy = np.meshgrid(np.arange(x_min, x_max, h),</span><br><span class="line">                         np.arange(y_min, y_max, h))</span><br><span class="line"></span><br><span class="line">    plt.title(title)</span><br><span class="line">    plt.xlim(xx.<span class="built_in">min</span>(), xx.<span class="built_in">max</span>())</span><br><span class="line">    plt.ylim(yy.<span class="built_in">min</span>(), yy.<span class="built_in">max</span>())</span><br><span class="line">    plt.xticks(())</span><br><span class="line">    plt.yticks(())</span><br><span class="line">    </span><br><span class="line">    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">    <span class="comment"># Put the result into a color plot</span></span><br><span class="line">    Z = Z.reshape(xx.shape)</span><br><span class="line">    plt.contourf(xx, yy, Z, cmap=<span class="string">'hot'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">markers = [<span class="string">'o'</span>, <span class="string">'s'</span>, <span class="string">'^'</span>]</span><br><span class="line">    colors = [<span class="string">'b'</span>, <span class="string">'r'</span>, <span class="string">'c'</span>]</span><br><span class="line">    labels = np.unique(y)</span><br><span class="line">    <span class="keyword">for</span> label <span class="keyword">in</span> labels:</span><br><span class="line">        plt.scatter(X[y==label][:, <span class="number">0</span>], </span><br><span class="line">                    X[y==label][:, <span class="number">1</span>], </span><br><span class="line">                    c=colors[label], </span><br><span class="line">                    marker=markers[label])</span><br><span class="line">    <span class="keyword">if</span> draw_sv:</span><br><span class="line">        sv = clf.support_vectors_</span><br><span class="line">        plt.scatter(sv[:, <span class="number">0</span>], sv[:, <span class="number">1</span>], c=<span class="string">'y'</span>, marker=<span class="string">'x'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line">X, y = make_blobs(n_samples=<span class="number">100</span>, centers=<span class="number">2</span>, </span><br><span class="line">                  random_state=<span class="number">0</span>, cluster_std=<span class="number">0.3</span>)</span><br><span class="line">clf = svm.SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'linear'</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line">plot_hyperplane(clf, X, y, h=<span class="number">0.01</span>, </span><br><span class="line">                title=<span class="string">'Maximum Margin Hyperplan'</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出的图形如下所示，其中带有x标记的点即为支持向量，它保存在模型的 <code>support_vector</code></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200701095026364.png" alt="image-20200701095026364"></p><p>此处需要注意的是 <code>plot_hyperplane()</code> 函数，其主要功能是画出样本点，同时画出分类区间。它的主要原理是使用 <code>numpy.meshgrid()</code> 生成一个坐标矩阵，最后用 <code>contourf()</code> 函数为坐标矩阵中不同类别的点填充不同的颜色。其中，<code>contourf()</code>函数是画等高线并填充颜色的函数。</p><p>接着来看另外一个例子。我们生成一个有两个特征、包含三种类别的数据集，然后分别构造出4个SVM算法来拟合数据集，分别是线性核函数、三阶多项式核函数、gamma=0.5的高斯核函数，以及gamma=0.1的高斯核函数。最后把这4个SVM算法拟合出来的分隔超平面画出来。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"></span><br><span class="line">X, y = make_blobs(n_samples=<span class="number">100</span>, centers=<span class="number">3</span>, </span><br><span class="line">                  random_state=<span class="number">0</span>, cluster_std=<span class="number">0.8</span>)</span><br><span class="line">clf_linear = svm.SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'linear'</span>)</span><br><span class="line">clf_poly = svm.SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'poly'</span>, degree=<span class="number">3</span>)</span><br><span class="line">clf_rbf = svm.SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'rbf'</span>, gamma=<span class="number">0.5</span>)</span><br><span class="line">clf_rbf2 = svm.SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'rbf'</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>), dpi=<span class="number">144</span>)</span><br><span class="line"></span><br><span class="line">clfs = [clf_linear, clf_poly, clf_rbf, clf_rbf2]</span><br><span class="line">titles = [<span class="string">'Linear Kernel'</span>, </span><br><span class="line">          <span class="string">'Polynomial Kernel with Degree=3'</span>, </span><br><span class="line">          <span class="string">'Gaussian Kernel with $\gamma=0.5$'</span>, </span><br><span class="line">          <span class="string">'Gaussian Kernel with $\gamma=0.1$'</span>]</span><br><span class="line"><span class="keyword">for</span> clf, i <span class="keyword">in</span> <span class="built_in">zip</span>(clfs, <span class="built_in">range</span>(<span class="built_in">len</span>(clfs))):</span><br><span class="line">    clf.fit(X, y)</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i+<span class="number">1</span>)</span><br><span class="line">    plot_hyperplane(clf, X, y, title=titles[i])</span><br></pre></td></tr></tbody></table></figure><p>输出的图形如下所示，其中带有 x 标记的点即为支持向量。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_2.jpg" alt="image-20200701101406980"></p><p>左上角是线性核函数，它只能拟合出直线分隔超平面。右上角是三阶多项式核函数，它能拟合出复杂曲线分隔超平面。左下角是 <code>gamma=0.5</code> 的高斯核函数，右下角是 <code>gamma=0.1</code> 的高斯核函数，通过调整参数 <code>gamma</code> 的值，可以调整分隔超平面的形状。典型地，<code>gamma</code>值太大，越容易造成过拟合，<code>gamma</code> 值太小，高斯核函数会退化成线性核函数。我们把代码中的 <code>gamma</code>值 改为 100 和 0.01 后看一下输出图形是什么样的。</p><p>思考：左下角 gamma=0.5 的高斯核函数的图片，带有 x 标记的点是支持向量。我们之前介绍过，离分隔超平面最近的点是支持向量，为什么很多离分隔超平面很远的点，也是支持向量呢？</p><p>原因是高斯核函数把输入特征向量映射到了无限维的向量空间里，在映射后的高维向量空间里，这些点其实是离分隔超平面最近的点。当回到二维向量空间中时，这些点“看起来”就不像是距离分隔超平面最近的点了，但实际上它们就是支持向量。</p><h2 id="4-示例：乳腺癌检测"><a href="#4-示例：乳腺癌检测" class="headerlink" title="4.示例：乳腺癌检测"></a>4.示例：乳腺癌检测</h2><p>之前我们使用逻辑回归算法进行过乳腺癌检测模型的学习和训练。这里我们再使用支持向量机算法来解决这个问题。首先我们载入数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="comment"># 载入数据</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line">cancer = load_breast_cancer()</span><br><span class="line">X = cancer.data</span><br><span class="line">y = cancer.target</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'data shape: {0}; no. positive: {1}; no. negative: {2}'</span>.<span class="built_in">format</span>(</span><br><span class="line">    X.shape, y[y==<span class="number">1</span>].shape[<span class="number">0</span>], y[y==<span class="number">0</span>].shape[<span class="number">0</span>]))</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> shape: (<span class="number">569</span>, <span class="number">30</span>); no. positive: <span class="number">357</span>; no. negative: <span class="number">212</span></span><br></pre></td></tr></tbody></table></figure><p>可以看出，我们的数据集很小。高斯核函数太复杂，容易造成过拟合，模型效果应该不会太好。我们先用高斯核函数来试一下，看与我们的猜测是否一致。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line">clf = SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'rbf'</span>, gamma=<span class="number">0.1</span>)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">train_score = clf.score(X_train, y_train)</span><br><span class="line">test_score = clf.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'train score: {0}; test score: {1}'</span>.<span class="built_in">format</span>(train_score, test_score))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train score: <span class="number">1.0</span>; test score: <span class="number">0.6491228070175439</span></span><br></pre></td></tr></tbody></table></figure><p>训练数据集分数为1.0，交叉验证数据集分数只有0.65，这是典型的过拟合现象。这里 gamma=0.1，这个值相对已经比较小了。我们可以把gamma改的更小如0.0001看看什么结果。</p><p>当然，我们完全可以使用前面介绍过的 <code>GridSearchCV</code> 来自动选择最优参数。我们看看如果使用高斯模型，最优的gamma参数值是多少，其对应的模型交叉验证评分是多少。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> plot_param_curve</span><br><span class="line"> gammas = np.linspace(<span class="number">0</span>, <span class="number">0.0003</span>, <span class="number">30</span>)</span><br><span class="line">param_grid = {<span class="string">'gamma'</span>: gammas}</span><br><span class="line"> clf = GridSearchCV(SVC(), param_grid, cv=<span class="number">5</span>,return_train_score=<span class="literal">True</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best param: {0}\nbest score: {1}"</span>.<span class="built_in">format</span>(clf.best_params_,clf.best_score_))</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line">plot_param_curve(plt, gammas, clf.cv_results_, xlabel=<span class="string">'gamma'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">best param: {<span class="string">'gamma'</span>: <span class="number">0.00011379310344827585</span>}</span><br><span class="line">best score: <span class="number">0.9367334264865704</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200701101406980.png" alt="image-20200701102906477"></p><p>由此可见，即使在最好的 gamma 参数下，其平均最优得分也只是0.9367311072056239。我们选择在gamma为0.01时，画出学习曲线，更直观地观察模型拟合情况。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> ShuffleSplit</span><br><span class="line">cv = ShuffleSplit(n_splits=<span class="number">10</span>, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line">title = <span class="string">'Learning Curves for Gaussian Kernel'</span></span><br><span class="line">start = time.clock()</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line">plot_learning_curve(plt, SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'rbf'</span>, gamma=<span class="number">0.01</span>), title, X, y, ylim=(<span class="number">0.5</span>, <span class="number">1.01</span>), cv=cv)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'elaspe: {0:.6f}'</span>.<span class="built_in">format</span>(time.clock()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaspe: <span class="number">0.687500</span></span><br></pre></td></tr></tbody></table></figure><p>画出来的图形如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_7.png" alt="image-20200701103141555"></p><p>这是明显的过拟合现象，交叉验证数据集的评分非常低，且离训练数据集评分非常远。</p><hr><p><strong>接下来换一个模型，使用二阶多项式核函数的SVM来拟合模型，看看结果如何。</strong></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line">clf = SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'poly'</span>, degree=<span class="number">2</span>)</span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line">train_score = clf.score(X_train, y_train)</span><br><span class="line">test_score = clf.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'train score: {0}; test score: {1}'</span>.<span class="built_in">format</span>(train_score, test_score))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train score: <span class="number">0.9098901098901099</span>; test score: <span class="number">0.9210526315789473</span></span><br></pre></td></tr></tbody></table></figure><p>看起来结果好多了。作为对比，我们画出一阶多项式核函数的SVM和二阶多项式核函数的SVM的学习曲线，观察模型的拟合情况。</p><figure class="highlight go"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">from sklearn.model_selection <span class="keyword">import</span> ShuffleSplit</span><br><span class="line">cv = ShuffleSplit(n_splits=<span class="number">5</span>, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line">title = <span class="string">'Learning Curves with degree={0}'</span></span><br><span class="line">degrees = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">start = time.clock()</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line"><span class="keyword">for</span> i in <span class="keyword">range</span>(<span class="built_in">len</span>(degrees)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="built_in">len</span>(degrees), i + <span class="number">1</span>)</span><br><span class="line">    plot_learning_curve(plt, SVC(C=<span class="number">1.0</span>, kernel=<span class="string">'poly'</span>, degree=degrees[i]),</span><br><span class="line">                        title.format(degrees[i]), X, y, ylim=(<span class="number">0.8</span>, <span class="number">1.01</span>), cv=cv, n_jobs=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'elaspe: {0:.6f}'</span>.format(time.clock()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaspe: <span class="number">0.281250</span></span><br></pre></td></tr></tbody></table></figure><p>输出的图形如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200701102906477.png" alt="image-20200701103641519"></p><p>前面我们使用逻辑回归算法来处理乳腺癌检测问题时，使用二阶多项式增加特征，同时使用L1范数作为正则项，其拟合效果比这里的支持向量机效果好。更重要的是，逻辑回归算法的运算效率远远高于二阶多项式核函数的支持向量机算法。当然，这里的支持向量机算法的效果还是比使用L2范数作为正则项的逻辑回归算法好的。由此可见，模型选择和模型参数调优，在工程实践中有着非常重要的作用的。</p><h2 id="5-拓展SVM的理解"><a href="#5-拓展SVM的理解" class="headerlink" title="5. 拓展SVM的理解"></a>5. 拓展SVM的理解</h2><h3 id="什么是-SVM-？"><a href="#什么是-SVM-？" class="headerlink" title="什么是 SVM ？"></a>什么是 SVM ？</h3><p>Support Vector Machine, 一个普通的 SVM 就是一条直线罢了，用来完美划分 linearly separable 的两类。但这又不是一条普通的直线，这是无数条可以分类的直线当中最完美的，因为它恰好在两个类的中间，距离两个类的点都一样远。而所谓的 Support vector 就是这些离分界线最近的『点』。如果去掉这些点，直线多半是要改变位置的。可以说是这些 vectors （主，点点） support （谓，定义）了 machine （宾，分类器）…</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_8.png" alt="k_2" title="k_2"></p><p>所以谜底就在谜面上啊朋友们，只要找到了这些最靠近的点不就找到了 SVM 了嘛。</p><p>如果是高维的点，SVM 的分界线就是平面或者超平面。其实没有差，都是一刀切两块，我就统统叫直线了。</p><h3 id="怎么求解-SVM-？"><a href="#怎么求解-SVM-？" class="headerlink" title="怎么求解 SVM ？"></a>怎么求解 SVM ？</h3><p>关于这条直线，我们知道 </p><p>(1)它离两边一样远，(2)最近距离就是到support vector的距离，其他距离只能更远。</p><p>于是自然而然可以得到重要表达 <b>I. direct representation</b></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200701103141555.png" alt="k_7" title="k_7"></p><p>（可以把 margin 看作是 boundary 的函数，并且想要找到使得是使得 margin 最大化的boundary，而 margin(*) 这个函数是: 输入一个 boundary ，计算（正确分类的）所有苹果和香蕉中，到 boundary 的最小距离。）</p><p>又有最大又有最小看起来好矛盾。实际上『最大』是对这个整体使用不同 boundary 层面的最大，『最小』是在比较『点』的层面上的最小。外层在比较 boundary 找最大的 margin ，内层在比较点点找最小的距离。</p><p>其中距离，说白了就是点到直线的距离；只要定义带正负号的距离，是 {苹果+1} 面为正 {香蕉-1} 面为负的距离，互相乘上各自的 label <img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200701103641519.png" alt="k_8" title="k_8"> ，就和谐统一民主富强了。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_9.png" alt="k_9" title="k_9"></p><p>到这里为止已经说完了所有关于SVM的直观了解，如果不想看求解，可以跳过下面一大段直接到 objective function 。</p><p>直接表达虽然清楚但是求解无从下手。做一些简单地等价变换（分母倒上来）可以得到 <b>II. canonical representation </b> （敲黑板）</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_10.png" alt="k_10" title="k_10"></p><p>要得到 <b>III. dual representation</b> 之前需要大概知道一下拉格朗日乘子法 (method of lagrange multiplier)，它是用在有各种约束条件(各种 “subject to” )下的目标函数，也就是直接可以求导可以引出 dual representation（怎么还没完摔）</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_11.png" alt="k_11" title="k_11"></p><p>稍微借用刚刚数学表达里面的内容看个有趣的东西: </p><p>还记得我们怎么预测一个新的水果是苹果还是香蕉吗？我们代入到分界的直线里，然后通过符号来判断。</p><p>刚刚w已经被表达出来了也就是说这个直线现在变成了:  <img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_12.png" alt="k_12" title="k_12"></p><p>看似仿佛用到了所有的训练水果，但是其中 <img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_13.png" alt="k_13" title="k_13"> 的水果都没有起到作用，剩下的就是小部分靠边边的 Support vectors 呀。</p><p><b>III. dual representation</b></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_14.png" alt="k_14" title="k_14"></p><p><b>如果香蕉和苹果不能用直线分割呢？</b></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_15.png" alt="k_3" title="k_3"></p><p>Kernel trick. </p><p>其实用直线分割的时候我们已经使用了 kernel ，那就是线性 kernel , <img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_3.jpg" alt="k_15" title="k_15"></p><p>如果要替换 kernel 那么把目标函数里面的内积全部替换成新的 kernel function 就好了，就是这么简单。</p><p>第一个武侠大师的比喻已经说得很直观了，低维非线性的分界线其实在高维是可以线性分割的，可以理解为——『你们是虫子！』分得开个p…（大雾）</p><p><b>如果香蕉和苹果有交集呢？</b></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_4.jpg" alt="k_4" title="k_4"></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_16.png" alt="k_16" title="k_16"></p><p><b>如果还有梨呢？</b></p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/k_5.jpg" alt="k_5" title="k_5"></p><p>可以每个类别做一次 SVM: 是苹果还是不是苹果？是香蕉还是不是香蕉？是梨子还是不是梨子？从中选出可能性最大的。这是 one-versus-the-rest approach。</p><p>也可以两两做一次 SVM: 是苹果还是香蕉？是香蕉还是梨子？是梨子还是苹果？最后三个分类器投票决定。这是 one-versus-one approace。</p><p>但这其实都多多少少有问题，比如苹果特别多，香蕉特别少，我就无脑判断为苹果也不会错太多；多个分类器要放到一个台面上，万一他们的 scale 没有在一个台面上也未可知。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列五：决策树</title>
      <link href="/2020/06/30/scikit-learn-xi-lie-wu-jue-ce-shu/"/>
      <url>/2020/06/30/scikit-learn-xi-lie-wu-jue-ce-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="1-决策树概述"><a href="#1-决策树概述" class="headerlink" title="1. 决策树概述"></a>1. 决策树概述</h2><p>决策树（Decision Tree）算法是一种基本的分类与回归方法，是最经常使用的数据挖掘算法之一，它的预测结果容易理解，易于向业务部门解释，预测速度快，可以处理离散型数据和连续型数据。</p><p>决策树模型呈树形结构，在分类问题中，表示基于特征对实例进行分类的过程。它可以认为是 if-then 规则的集合，也可以认为是定义在特征空间与类空间上的条件概率分布。</p><p>决策树学习通常包括 3 个步骤: 特征选择、决策树的生成和决策树的修剪。</p><hr><h2 id="2-决策树原理"><a href="#2-决策树原理" class="headerlink" title="2. 决策树原理"></a>2. 决策树原理</h2><p>一个叫做 “二十个问题” 的游戏，游戏的规则很简单: 参与游戏的一方在脑海中想某个事物，其他参与者向他提问，只允许提 20 个问题，问题的答案也只能用对或错回答。问问题的人通过推断分解，逐步缩小待猜测事物的范围，最后得到游戏的答案。</p><p>一个邮件分类系统，大致工作流程如下: </p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/%E5%86%B3%E7%AD%96%E6%A0%91-%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="决策树-流程图" title="决策树示例流程图"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先检测发送邮件域名地址。如果地址为 myEmployer.com, 则将其放在分类 "无聊时需要阅读的邮件"中。</span><br><span class="line">如果邮件不是来自这个域名，则检测邮件内容里是否包含单词 "曲棍球" , 如果包含则将邮件归类到 "需要及时处理的朋友邮件", </span><br><span class="line">如果不包含则将邮件归类到 "无需阅读的垃圾邮件" 。</span><br></pre></td></tr></tbody></table></figure><p>问题来了，在创建决策树的过程中，要先对哪个特征进行分裂？比如上图中的例子，先判断域名地址进行分裂还是先判断包含 “曲棍球” 进行分裂？要回答这个问题，我们需要从信息的量化谈起。</p><h3 id="2-1-信息熵-amp-信息增益"><a href="#2-1-信息熵-amp-信息增益" class="headerlink" title="2.1 信息熵 &amp; 信息增益"></a>2.1 信息熵 &amp; 信息增益</h3><p><code>熵（entropy）:</code><br>熵指的是体系的混乱的程度，在不同的学科中也有引申出的更为具体的定义，是各领域十分重要的参量。</p><p><code>信息论（information theory）中的熵（香农熵）:</code><br>是一种信息的度量方式，表示信息的混乱程度，也就是说: 信息越有序，信息熵越低。例如: 火柴有序放在火柴盒里，熵值很低，相反，熵值很高。</p><p><code>信息增益（information gain）:</code><br>在划分数据集前后信息发生的变化称为信息增益。</p><h3 id="2-2-决策树的创建"><a href="#2-2-决策树的创建" class="headerlink" title="2.2 决策树的创建"></a>2.2 决策树的创建</h3><p>决策树的构建过程，就是从训练数据集中归纳出一组分类规则，使它与训练数据矛盾较小的同时具有较强的泛化能力。有了信息增益来量化地选择数据集的划分特征，使决策树的创建过程变得容易了。决策树的创建基本上分为以下几个步骤：</p><p> （1）计算数据集划分前的信息熵。<br> （2）遍历所有未作为划分条件的特征，分别计算根据每个特征划分数据集后的信息熵。<br> （3）选择信息增益最大的特征，并使用这个特征作为数据划分节点来划分数据。<br> （4）递归地处理被划分后的所有子数据集，从未被选择的特征里继续选择最优数据划分特征来划分子数据集。</p><p>问题来了，递归过程什么时候结束呢？一般来讲，有两个终止条件：一是所有的特征都用完了，即没有新的特征可以用来进一步划分数据集。二是划分后的信息增益足够小了，这个时候就可以停止递归划分了。针对这个停止条件，需要事先选择信息增益的阈值来作为结束递归地条件。</p><p>使用信息增益作为特征选择指标的决策树构建算法，称为ID3算法。</p><h3 id="2-3-剪枝算法"><a href="#2-3-剪枝算法" class="headerlink" title="2.3 剪枝算法"></a>2.3 剪枝算法</h3><p>使用决策树模型拟合数据时，容易造成过拟合。解决过拟合的方法是对决策树进行剪枝处理。决策树的剪枝有两种思路：前剪枝（Pre-Pruning）和后剪枝（Post-Pruning）。</p><h4 id="前剪枝（Pre-Pruning）"><a href="#前剪枝（Pre-Pruning）" class="headerlink" title="前剪枝（Pre-Pruning）"></a>前剪枝（Pre-Pruning）</h4><p> 前剪枝是在构造决策树的同时进行剪枝。在决策树的构建过程中，如果无法进一步降低信息熵，就会停止创建分支。为了避免过拟合，可以设定一个阈值，即使可以继续降低信息熵，也停止继续创建分支。这种方法称为前剪枝。还有一些简单的前剪枝方法，如限制叶子节点的样本个数，当样本个数小于一定的阈值时，即不再继续创建分支。</p><h4 id="后剪枝（Post-Pruning）"><a href="#后剪枝（Post-Pruning）" class="headerlink" title="后剪枝（Post-Pruning）"></a>后剪枝（Post-Pruning）</h4><p> 后剪枝是指决策树构建完成之后进行剪枝。剪枝的过程是对拥有同样父节点的一组节点进行检查，判断如果将其合并，信息熵的增加量是否小于某一阈值。如果小于阈值，则这一组节点可以合并成一个节点。后剪枝是目前较普遍的做法。后剪枝的过程是删除一些子树，然后用子树的根节点代替，来作为新的叶子结点。这个新的叶子节点所标识的类别通过大多数原则来确定，即把这个叶子节点里样本最多的类别，作为这个叶子节点的类别。</p><p>后剪枝算法有很多种，其中常用的一种称为 <code>降低错误率剪枝法（Reduced-Error Pruning）</code>。其思路是，自底向上，从已经构建好的完全决策树中找出一棵子树，然后用子树的根代替这棵子树，作为新的叶子节点。叶子节点所标识的类别通过大多数原则来确定。这样就构建出了一个新的简化版的决策树。然后使用交叉验证数据集来检测这棵简化版的决策树，看其错误率是否降低了。如果错误率降低了，则可以使用这个简化版的决策树代替完全决策树。否则，还是采用原来的决策树。通过遍历所有的子树，直到针对交叉验证数据集，无法进一步降低错误率为止。</p><hr><h2 id="3-决策树算法参数"><a href="#3-决策树算法参数" class="headerlink" title="3. 决策树算法参数"></a>3. 决策树算法参数</h2><p><code>scikit-learn</code>使用 <code>sklearn.tree.DecisionTreeClassifier</code> 类来实现决策树分类算法。其中几个典型的参数如下：</p><ul><li><code>criterion：特征选择算法。</code>一种是基于信息熵，另外一种是基于基尼不纯度。研究表明，这两种算法的差异性不大，对模型准确性没有太大的影响。相对而言，信息熵运算效率会低一些，因为它有对数运算。</li><li><code>splitter：创建决策树分支的选项。</code>一种是选择最优的分支创建原则。另外一种是从排名靠前的特征中，随机选择一个特征来创建分支，这个方法和正则项的效果类似，可以避免过拟合。</li><li><code>max_depth：</code>指定决策树的最大深度。通过指定该参数，用来解决模型过拟合问题。</li><li><code>min_samples_split：</code>这个参数指定能创建分支的数据集的大小，默认是2。如果一个节点的数据样本个数小于这个数值，则不再创建分支。这就是上面介绍的前剪枝的一种方法。</li><li><code>min_samples_leaf：</code>叶子节点的最小样本数量，叶子节点的样本数量必须大于等于这个值。这也是上面介绍的另一种前剪枝的方法。</li><li><code>max_leaf_nodes：</code>最大叶子节点个数，即数据集最多能划分成几个类别。</li><li><code>min_impurity_split：</code>信息增益必须大于等于这个阈值才可以继续分支，否则不创建分支。<br> 从这些参数可以看出，<code>scikit-learn</code>有一系列的参数用来控制决策树的生成过程，从而解决过拟合问题。</li></ul><hr><h2 id="4-示例：预测泰坦尼克号幸存者"><a href="#4-示例：预测泰坦尼克号幸存者" class="headerlink" title="4. 示例：预测泰坦尼克号幸存者"></a>4. 示例：预测泰坦尼克号幸存者</h2><p>众所周知，泰坦尼克号是历史上最严重的一起海难事故。我们通过决策树模型，来预测哪些人可能成为幸存者。<a href="https://www.kaggle.com/c/titanic">数据集下载</a>，也可以去<a href="https://github.com/DongZhouGu/scikit-learn-ml">仓库地址</a></p><p>数据集中总共有两个文件，都是 csv 格式的数据。其中，train.csv 是训练数据集，包含已标注的训练样本数据。test.csv 是模型进行幸存者预测的测试数据。我们的任务就是根据 train.csv 里的数据训练出决策树模型，然后使用该模型来预测test.csv里的数据，并查看模型的预测效果。</p><h3 id="4-1-数据分析"><a href="#4-1-数据分析" class="headerlink" title="4.1 数据分析"></a>4.1 数据分析</h3><p>train.csv 是一个892行、12列的数据表格。意味着我们有 891 个训练样本（扣除表头），每个样本有12个特征。我们需要先分析这些特征，以便决定哪些特征可以用来进行模型训练。</p><ul><li><code>PassengerId：</code>乘客的ID号，这个是顺序编号，用来唯一地标识一名乘客。这个特征和幸存与否无关，丢弃这个特征。</li><li><code>Survived</code>：1表示幸存，0表示遇难。这是标注数据。</li><li><code>Pclass</code>：仓位等级。这是个很重要的特征，高仓位的乘客能更快的到达甲板，从而更容易获救。</li><li><code>Name</code>：乘客的名字，这个特征和幸存与否无关，丢弃这个特征。</li><li><code>Sex</code>：乘客性别。由于救生艇数量不够，船长让妇女和儿童先上救生艇。所以这也是个很重要的特征。</li><li><code>Age</code>：乘客的年龄。儿童会优先上救生艇，身强力壮者幸存概率也会高一些。所以这也是个很重要的特征。</li><li><code>SibSp</code>：兄弟姐妹同在船上的数量。</li><li><code>Parch</code>：同船的父辈人员的数量。</li><li><code>Ticket</code>：乘客的票号。这个特征和幸存与否无关，丢弃这个特征。</li><li><code>Fare</code>：乘客的体热指标。</li><li><code>Cabin</code>：乘客所在的船舱号。实际上这个特征和幸存与否有一定的关系，比如最早被水淹没的船舱位置，其乘客的幸存概率要低一些。但由于这个特征有大量的丢失数据，而且没有更多的数据来对船舱进行归类，因此我们丢弃这个特征的数据。</li><li><code>Embarked</code>：乘客登船的港口。我们需要把港口数据转换为数值类型的数据。</li></ul><p>我们需要加载csv数据。并做一些预处理，包括：</p><ul><li>提取Survived列的数据作为模型的标注数据。</li><li>丢弃不需要的特征数据。</li><li>对数据进行转换，以便模型处理。比如把性别数据转换为0和1.</li><li>处理缺失的数据。比如年龄这个特征，有很多缺失的数据。</li></ul><p><code>Pandas</code> 是完成这些任务的理想软件包，我们先把数据从文件里读取出来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_dataset</span>(<span class="params">fname</span>):</span></span><br><span class="line">    <span class="comment"># 指定第一列作为行索引</span></span><br><span class="line">    data = pd.read_csv(fname,index_col=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 丢弃无用的数据</span></span><br><span class="line">    data.drop([<span class="string">'Name'</span>,<span class="string">'Ticket'</span>,<span class="string">'Cabin'</span>],axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 处理性别数据</span></span><br><span class="line">    data[<span class="string">'Sex'</span>] = (data[<span class="string">'Sex'</span>]==<span class="string">'male'</span>).astype(<span class="string">'int'</span>)</span><br><span class="line">    <span class="comment"># 处理登船港口数据</span></span><br><span class="line">    labels = data[<span class="string">'Embarked'</span>].unique().tolist()</span><br><span class="line">    data[<span class="string">'Embarked'</span>] = data[<span class="string">'Embarked'</span>].apply(<span class="keyword">lambda</span> n:labels.index(n))</span><br><span class="line">    <span class="comment"># 处理缺失数据</span></span><br><span class="line">    data = data.fillna(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">train = read_dataset(<span class="string">'./titanic/train.csv'</span>)</span><br><span class="line">train.head()</span><br></pre></td></tr></tbody></table></figure><p>处理完的数据如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630171531856.png" alt="img"></p><h3 id="4-2-模型训练"><a href="#4-2-模型训练" class="headerlink" title="4.2 模型训练"></a>4.2 模型训练</h3><p>首先需要把 <code>Survived</code> 列提取出来作为标签，并在原数据集中删除这一列。然后把数据集划分成训练数据集和交叉验证数据集。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">y = train[<span class="string">'Survived'</span>].values</span><br><span class="line">X = train.drop([<span class="string">'Survived'</span>],axis=<span class="number">1</span>).values</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'train dataset: {0}; test dataset: {1}'</span>.<span class="built_in">format</span>(X_train.shape,X_test.shape))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train dataset: (<span class="number">712</span>, <span class="number">7</span>); test dataset: (<span class="number">179</span>, <span class="number">7</span>)</span><br></pre></td></tr></tbody></table></figure><p>接着，使用 <code>scikit-learn</code> 的决策树模型对数据集进行拟合，并观察模型的性能：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">clf = DecisionTreeClassifier()</span><br><span class="line">clf.fit(X_train,y_train)</span><br><span class="line">train_score = clf.score(X_train,y_train)</span><br><span class="line">test_score = clf.score(X_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'train score: {0}; test score: {1}'</span>.<span class="built_in">format</span>(train_score,test_score))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train score: <span class="number">0.9859550561797753</span>; test score: <span class="number">0.7877094972067039</span></span><br></pre></td></tr></tbody></table></figure><p>从输出结果可以看出，针对训练样本评分很高，但是针对交叉验证数据集评分较低，两者差距较大。没错，这是过拟合现象。解决决策树过拟合的方法是剪枝，包括前剪枝和后剪枝。不幸的是 <code>scikit-learn</code> 不支持后剪枝，但是提供了一系列模型参数进行前剪枝。例如，可以通过 <code>max_depth</code> 参数限定决策树的深度，当决策树达到限定的深度时，就不再进行分裂了。这样就可以在一定程度上避免过拟合。</p><h3 id="4-3-优化模型参数"><a href="#4-3-优化模型参数" class="headerlink" title="4.3 优化模型参数"></a>4.3 优化模型参数</h3><p>我们可以选择一系列的参数值，然后分别计算指定参数训练出来的模型的评分。还可以把参数值和模型评分通过图形画出来，以便直观地发现两者之间的关系。</p><p>这里以限制决策树深度 <code>max_depth</code> 为了来介绍模型参数的优化过程。我们先创建一个函数，它使用不同的<code>max_depth</code> 来训练模型，并计算模型评分。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参数选择 max_depth</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_score</span>(<span class="params">d</span>):</span></span><br><span class="line">    clf = DecisionTreeClassifier(max_depth=d)</span><br><span class="line">    clf.fit(X_train,y_train)</span><br><span class="line">    tr_score = clf.score(X_train,y_train)</span><br><span class="line">    cv_score = clf.score(X_test,y_test)</span><br><span class="line">    <span class="keyword">return</span> (tr_score,cv_score)</span><br></pre></td></tr></tbody></table></figure><p>接着构造参数范围，在这个范围内分别计算模型评分，并找出评分最高的模型所对应的参数。</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">depths = range(<span class="number">2</span>,<span class="number">15</span>)</span><br><span class="line">scores = [cv_score(d) <span class="keyword">for</span> d <span class="keyword">in</span> depths]</span><br><span class="line">tr_scores = [s[<span class="number">0</span>] <span class="keyword">for</span> s <span class="keyword">in</span> scores]</span><br><span class="line">cv_scores = [s[<span class="number">1</span>] <span class="keyword">for</span> s <span class="keyword">in</span> scores]</span><br><span class="line">best_score_index = np.argmax(cv_scores)</span><br><span class="line">best_score = cv_scores[best_score_index]</span><br><span class="line">best_param = depths[best_score_index]</span><br><span class="line"><span class="built_in">print</span>(scores)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'best param: {0}； best score： {1}'</span>.format(best_param,best_score))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">best param: <span class="number">4</span>； best score： <span class="number">0.8212290502793296</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，针对模型深度这个参数，最优的值是4，其对应的交叉验证数据集评分为0.82。我们还可以把模型参数和对应的模型评分画出来，更直观地观察其变化规律。</p><figure class="highlight dart"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.figure(figsize=(<span class="number">6</span>,<span class="number">4</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.xlabel(<span class="string">'max depth of decision tree'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'score'</span>)</span><br><span class="line">plt.plot(depths,cv_scores,<span class="string">'.g-'</span>,label=<span class="string">'cross-validation score'</span>)</span><br><span class="line">plt.plot(depths,tr_scores,<span class="string">'.r--'</span>,label=<span class="string">'training score'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-8536c1c2cfda1d0f.png" alt="image-20200630171531856"></p><p>使用同样的方式，我们可以考察参数 m<code>in_impurity_split</code> 。这个参数用来指定信息熵或基尼不纯度的阈值。当决策树分裂后，其信息增益低于这个阈值，则不再分裂。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型，并计算评分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_score</span>(<span class="params">val</span>):</span></span><br><span class="line">    clf = DecisionTreeClassifier(criterion=<span class="string">'gini'</span>, min_impurity_decrease=val)</span><br><span class="line">    clf.fit(X_train, y_train)</span><br><span class="line">    tr_score = clf.score(X_train, y_train)</span><br><span class="line">    cv_score = clf.score(X_test, y_test)</span><br><span class="line">    <span class="keyword">return</span> (tr_score, cv_score)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定参数范围，分别训练模型，并计算评分</span></span><br><span class="line">values = np.linspace(<span class="number">0</span>, <span class="number">0.005</span>, <span class="number">50</span>)</span><br><span class="line">scores = [cv_score(v) <span class="keyword">for</span> v <span class="keyword">in</span> values]</span><br><span class="line">tr_scores = [s[<span class="number">0</span>] <span class="keyword">for</span> s <span class="keyword">in</span> scores]</span><br><span class="line">cv_scores = [s[<span class="number">1</span>] <span class="keyword">for</span> s <span class="keyword">in</span> scores]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出评分最高的模型参数</span></span><br><span class="line">best_score_index = np.argmax(cv_scores)</span><br><span class="line">best_score = cv_scores[best_score_index]</span><br><span class="line">best_param = values[best_score_index]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'best param: {0}; best score: {1}'</span>.<span class="built_in">format</span>(best_param, best_score))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出模型参数与模型评分的关系</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>), dpi=<span class="number">144</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.xlabel(<span class="string">'threshold of entropy'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'score'</span>)</span><br><span class="line">plt.plot(values, cv_scores, <span class="string">'.g-'</span>, label=<span class="string">'cross-validation score'</span>)</span><br><span class="line">plt.plot(values, tr_scores, <span class="string">'.r--'</span>, label=<span class="string">'training score'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">best param: <span class="number">0.0005102040816326531</span>; best score: <span class="number">0.8100558659217877</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630181702264.png" alt="image-20200630174835975"></p><p>这里把[0,0.005]等分50份，以每个等分点作为信息增益阈值来训练一次模型。可以看到，训练数据集的评分急速下降，且训练评分和测试评分都保持较低水平，说明模型欠拟合。我们可以把决策树特征选择的基尼不纯度改为信息熵，即把参数<code>criterion</code>的值改为<code>'entropy'</code>观察图形的变化。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">clf = DecisionTreeClassifier(criterion=<span class="string">'entropy'</span>, min_impurity_decrease=val)</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630174835975.png" alt="image-20200630175057127"></p><h3 id="4-4-模型参数选择工具包"><a href="#4-4-模型参数选择工具包" class="headerlink" title="4.4 模型参数选择工具包"></a>4.4 模型参数选择工具包</h3><p>上面的模型参数优化过程存在两个问题。其一，数据不稳定，即数据集每次都是随机划分的，选择出来的最优参数在下一次运行时就不是最优的了。其二，不能一次选择多个参数，例如，想要考察 <code>max_depth</code>和<code>min_samples_leaf</code>两个结合起来的最优参数就无法实现。</p><p>问题一的原因是，每次把数据集划分为训练样本和交叉验证样本时，是随机划分的，这样导致每次的训练数据集是有差异的，训练出来的模型也有差异。解决这个问题的方法是多次计算，求平均值。具体来讲，就是针对模型的某个特定的参数，多次划分数据集，多次训练模型，计算出这个参数对应的模型的最低评分、最高评分以及评价评分。问题二的解决办法比较简单，把代码再优化一下，能处理多个参数组合即可。</p><p>所幸，我们不需要从头实现这些代码。<code>scikit-learn</code>在 <code>sklearn.model_selection</code>包里提供了大量模型选择和评估工具供我们使用。针对以上问题，可以使用 <code>GridSearchCV</code> 类来解决。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">thresholds = np.linspace(<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">50</span>)</span><br><span class="line">param_grid = {<span class="string">'min_impurity_split'</span>: thresholds}</span><br><span class="line">clf = GridSearchCV(DecisionTreeClassifier(), param_grid, cv=<span class="number">5</span>,return_train_score=<span class="literal">True</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"best param: {0}\nbest score: {1}"</span>.<span class="built_in">format</span>(clf.best_params_, clf.best_score_))</span><br><span class="line">plot_curve(thresholds, clf.cv_results_, xlabel=<span class="string">'gini thresholds'</span>)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">best param: {<span class="string">'min_impurity_split'</span>: <span class="number">0.19387755102040816</span>}</span><br><span class="line">best score: <span class="number">0.82045069361622</span></span><br></pre></td></tr></tbody></table></figure><p>其中关键的参数是<code>param_grid</code>，它是一个字典，键对应的值是一个列表。<code>GridSearchCV</code>会枚举列表里的所有值来构建模型，最终得出指定参数值的平均评分及标准差。另外一个关键参数是cv，它用来指定交叉验证数据集的生成规则，代码中的 cv=5 ，表示每次计算都把数据集分成 5 份，拿其中一份作为交叉验证数据集，其他的作为训练数据集。最终得出的最优参数及最优评分保存在 <code>clf.best_params</code> 和 <code>clf.best_score</code>里。此外，<code>clf.cv_results_</code>保存了计算过程的所有中间结果。我们可以拿这个数据来画出模型参数与模型评分的关系图，如下所示:</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630175057127.png" alt="image-20200630181702264"></p><p>接下来看一下如何在多组参数之间选择最优的参数组合：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">entropy_thresholds = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">50</span>)</span><br><span class="line">gini_thresholds = np.linspace(<span class="number">0</span>,<span class="number">0.5</span>,<span class="number">50</span>)</span><br><span class="line">param_grid = [{<span class="string">'criterion'</span>:[<span class="string">'entropy'</span>],<span class="string">'min_impurity_split'</span>:entropy_thresholds},</span><br><span class="line">              {<span class="string">'criterion'</span>:[<span class="string">'gini'</span>],<span class="string">'min_impurity_split'</span>:gini_thresholds},</span><br><span class="line">              {<span class="string">'max_depth'</span>:<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>)},</span><br><span class="line">              {<span class="string">'min_samples_split'</span>:<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">30</span>,<span class="number">2</span>)}]</span><br><span class="line">clf=GridSearchCV(DecisionTreeClassifier(),param_grid,cv=<span class="number">5</span>)</span><br><span class="line">clf.fit(X,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'best param: {0}\nbest score: {1}'</span>.<span class="built_in">format</span>(clf.best_params_,clf.best_score_))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">best param: {<span class="string">'criterion'</span>: <span class="string">'entropy'</span>, <span class="string">'min_impurity_split'</span>: <span class="number">0.5306122448979591</span>}</span><br><span class="line">best score: <span class="number">0.8305818843763729</span></span><br></pre></td></tr></tbody></table></figure><p>代码关键部分还是<code>param_grid</code>参数，它是一个列表，列表中的每个元素都是字典。例如：针对列表中的第一个字典，选择信息熵作为决策树特征选择的判断标准，同时其阈值范围是[0,1]之间分了50等份。<code>GridSearchCV</code>会针对列表中的每个字典进行迭代，最终比较列表中每个字典所对应的参数组合，选择出最优的参数。关于<code>GridSearchCV</code>的更多详情可参考<a href="http://lijiancheng0614.github.io/scikit-learn/modules/generated/sklearn.grid_search.GridSearchCV.html">官方文档</a>。</p><p>最后基于好奇，使用最优参数的决策树到底是什么样呢？我们可以使用 <code>sklearn.tree.export_graphviz()</code> 函数把决策树模型导出到文件中，然后使用<code>graphviz</code>工具包生成决策树示意图。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line"></span><br><span class="line">columns = train.columns[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># 导出 titanic.dot 文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"E:/titanic.dot"</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = export_graphviz(clf, out_file=f,feature_names=columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. conda安装 graphviz ：conda install python-graphviz </span></span><br><span class="line"><span class="comment"># 2. 运行 `dot -Tpdf titanic.dot -o titanic.pdf` </span></span><br><span class="line"><span class="comment"># 3. 在当前目录查看生成的决策树 titanic.png</span></span><br></pre></td></tr></tbody></table></figure><p>最优参数的决策树就长这个样子</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630185703496.png" alt="image-20200630185703496"></p><hr><h2 id="5-集合算法"><a href="#5-集合算法" class="headerlink" title="5.集合算法"></a>5.集合算法</h2><p>集合算法（Ensemble）是一种元算法（Meta-algorithm），它利用统计学采样原理，训练出成百上千个不同的算法模型。当需要预测一个新样本时，使用这些模型分别对这个样本进行预测，然后采样少数服从多数的原则，决定新样本的类别。集合算法可以有效地解决过拟合问题。在scikit-learn 里，所有的集合算法都实现在<code>sklearn.ensemble</code>包里。</p><h3 id="5-1-自助聚合算法Bagging"><a href="#5-1-自助聚合算法Bagging" class="headerlink" title="5.1 自助聚合算法Bagging"></a>5.1 自助聚合算法Bagging</h3><p>自助聚合（Bagging，Bootstrap Aggregating的缩写）的核心思想是，采用有放回的采样规则，从m个样本的原数据集里进行n次采样（n&lt;=m），构成一个包含n个样本的新训练数据集。重复这个过程B次，得到B个模型，当有新样本需要预测时，拿这B个模型分别对这个样本进行预测，然后采用投票方式（回归问题）得到新样本的预测值。</p><p>所谓的有放回采样规则是指，在m个数据集里，随机取出一个样本放到新数据集里，然后把这个样本放回到原数据集里，继续随机采样，直到到达采样次数n为止。由此可见，随机采样出的数据集里可能有重复数据，并且原数据集的每一个数据不一定都出现在新数据集里。</p><p>单一模型往往容易对数据噪声敏感，从而造成高方差（High Variance）。自助聚合算法可以降低对数据噪声的敏感性，从而提高模型准确性和稳定性。这种方法不需要额外的输入，只是简单地对同一个数据集训练出多个模型即可实现。当然这并不是说没有代价，自助聚合算法一般会增加模型训练的计算量。</p><p>在<code>scikit-learn</code>里，由<code>BaggingClassifier</code>类和B<code>aggingRegressor</code>类分别实现了分类和回归的Bagging算法。</p><h3 id="5-2-正向激励算法Boosting"><a href="#5-2-正向激励算法Boosting" class="headerlink" title="5.2 正向激励算法Boosting"></a>5.2 正向激励算法Boosting</h3><p>正向激励算法（Boosting）的基本原理是，初始化时，针对有m个训练样本的数据集，给每个样本都分配一个初始权重，然后使用这个带有权重的数据集来训练模型。训练出模型之后，针对这个模型预测错误的那些样本，增加其权重，然后拿这个更新过权重的数据集来训练出一个新的模型。重复这个过程B次，就可以训练出B个模型。</p><p>Boosting算法和Bagging算法的区别如下：</p><ul><li>采样规则不同：Bagging算法是采样有放回的随机采样规则。而Boosting算法是使用增加预测错误样本权重的方法，相当于加强了对预测错误的样本的学习力度，从而提高模型的准确性。</li><li>训练方式不同：Bagging算法可以并行训练多个模型。而Boosting算法只能串行训练，因为下一个模型依赖上一个模型的预测结果。</li><li>模型权重不同：Bagging算法训练出来的B个模型的权重是一样的。而Boosting算法训练出来的B个模型本身带有权重信息，在对新样本进行预测时，每个模型的权重是不一样的。单个模型的权重由模型训练的效果来决定，即准确性高的模型权重更高。</li></ul><p>Boosting算法有很多种实现，其中最著名的是 <code>AdaBoosting</code> 算法。在 <code>scikit-learn</code> 里由<code>AdaBoostingClassifier</code>类和 <code>AdaBoostingRegression</code>类分别实现Boosting分类和Boosting回归。</p><h3 id="5-3-随机森林"><a href="#5-3-随机森林" class="headerlink" title="5.3 随机森林"></a>5.3 随机森林</h3><p>随机森林（RF，Random Forest）在自助聚合算法（Bagging）的基础上更进一步，对特征应用自助聚合算法。即，每次训练时，不拿所有的特征来训练，而是随机选择一个特征的子集来进行训练。随机森林算法有两个关键参数，一是构建的决策树的个数t，二是构建单棵决策树特征的个数f。</p><p>假设，针对一个有m个样本、n个特征的数据集，则其算法原理如下：</p><h4 id="单棵决策树的构建"><a href="#单棵决策树的构建" class="headerlink" title="单棵决策树的构建"></a>单棵决策树的构建</h4><ul><li>采用有放回采样，从原数据集中经过m次采样，获取到一个m个样本的数据集（这个数据集里可能有重复的样本）</li><li>从n个特征里，采用无放回采样规则，从中取出f个特征作为输入特征。</li><li>重复上述过程t次，构建出t棵决策树。</li></ul><h4 id="随机森林的分类结果"><a href="#随机森林的分类结果" class="headerlink" title="随机森林的分类结果"></a>随机森林的分类结果</h4><p> 生成t棵决策树之后，对于每个新的测试样例，集合多棵决策树的预测结果来作为随机森林的预测结果。具体为，如果是回归问题，取t棵决策树的预测值的平均值作为随机森林的预测结果；如果是分类问题，采取少数服从多数的原则，取单棵决策树预测最多的那个类别作为随机森林的分类结果。</p><blockquote><p>思考：为什么随机森林要选取特征的子集来构建决策树？</p></blockquote><p> 假如某个输入特征对预测结果是强关联的，那么如果选择全部的特征来构建决策树，这个特征都会体现在所有的决策树里面。由于这个特征和预测结果强关联，会造成所有的决策树都强烈地反映这个特征的“倾向性”，从而导致无法很好地解决过拟合问题。我们在讨论线性回归算法时，通过增加正则项来解决过拟合，它的原理就是确保每个特征都对预测结果有少量的贡献，从而避免单个特征对预测结果有过大贡献导致的过拟合问题。这里的原理是一样的。</p><p>在 <code>scikit-learn</code> 里由 <code>RandomForestClassifier</code> 类和 <code>RandomForestRegression</code> 类分别实现随机森林的分类算法和随机森林的回归算法。</p><h3 id="5-4-ExtraTrees算法"><a href="#5-4-ExtraTrees算法" class="headerlink" title="5.4 ExtraTrees算法"></a>5.4 ExtraTrees算法</h3><p>ExtraTrees，叫做极限树或者极端随机树。随机森林在构建决策树的过程中，会使用信息熵或者基尼不纯度，然后选择信息增益最大的特征来进行分裂。而 <code>ExtraTrees</code> 是直接从所有特征里随机选择一个特征来分裂，从而避免了过拟合问题。</p><p>在<code>scikit-learn</code>里，由<code>ExtraTreesClassifier</code>类和 <code>ExtraTreesRegression</code> 类分别实现 <code>ExtraTrees</code> 的分类算法和 ExtraTrees 的回归算法。</p><hr><h2 id="6-扩展阅读"><a href="#6-扩展阅读" class="headerlink" title="6. 扩展阅读"></a>6. 扩展阅读</h2><h3 id="6-1-熵和条件熵"><a href="#6-1-熵和条件熵" class="headerlink" title="6.1 熵和条件熵"></a>6.1 熵和条件熵</h3><p>在决策树创建过程中，我们会计算以某个特征创建分支后的子数据集的信息熵。用数学语言描述实际上是计算条件熵，即满足某个条件的信息熵。</p><p>关于信息熵和条件熵的相关概念，可以阅读吴军老师的<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/1580521?fr=aladdin">《数学之美》</a>里”信息的度量和作用”一文。《数学之美》这本书，吴军老师用平实的语言，把复杂的数学概念解释的入木三分，即使你只有高中的数学水平，也可以领略到数学的“优雅”和“威力”。</p><h3 id="6-2-决策树的构建算法"><a href="#6-2-决策树的构建算法" class="headerlink" title="6.2 决策树的构建算法"></a>6.2 决策树的构建算法</h3><p>本文重点介绍的决策树构建算法是ID3算法，它是1986年由Ross Quinlan提出的。1993年，该算法作者发布了新的决策树构建算法C4.5，作为ID3算法的改进，主要体现在：</p><ul><li>增加了对连续值的处理，方法是使用一个阈值作为连续值的划分条件，从而把数据离散化。</li><li>自动处理特征值缺失问题，处理方法是直接把这个特征抛弃，不参与计算信息增益比。</li><li>使用信息增益比作为特征选择标准。</li><li>采用后剪枝算法处理过拟合，即在决策树创建完成之后，再通过合并叶子节点的方式进行剪枝。</li></ul><p>此后，该算法作者又发布了改进的商业版本C5.0，它运算效率更高，使用内存更小，创建出来的决策树更小，并且准确性更高，适合大数据集的决策树构建。</p><p>除了前面介绍的使用基尼不纯度来构建决策树的CART算法之外，还有其他知名的决策树构建算法，如CHAID算法、MARS算法等。这里不再详述。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列四：逻辑回归</title>
      <link href="/2020/06/30/scikit-learn-xi-lie-si-luo-ji-hui-gui/"/>
      <url>/2020/06/30/scikit-learn-xi-lie-si-luo-ji-hui-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="1-Logistic-回归概述"><a href="#1-Logistic-回归概述" class="headerlink" title="1. Logistic 回归概述"></a>1. Logistic 回归概述</h2><p>Logistic 回归 或者叫逻辑回归，虽然名字有回归，但是它是用来做分类的。其主要思想是: 根据现有数据对分类边界线 (Decision Boundary) 建立回归公式，以此进行分类。</p><h2 id="2-算法原理"><a href="#2-算法原理" class="headerlink" title="2. 算法原理"></a>2. 算法原理</h2><p>假设有一场足球赛，我们有两支球队的所有出场球员信息、历史交锋成绩、比赛时间、主客场、裁判和天气等信息，根据这些信息预测球队的输赢。假设比赛结果记为y，赢球标记为1，输球标记为0，这就是典型的二元分类问题，可以用逻辑回归算法来解决。</p><p>与线性回归算法的最大区别是，逻辑回归算法的输出是个离散值。</p><h3 id="2-1-预测函数"><a href="#2-1-预测函数" class="headerlink" title="2.1 预测函数"></a>2.1 预测函数</h3><p>需要找出一个预测函数模型，使其值输出在[0,1]之间。然后选择一个基准值，如0.5，如果算出来的预测值大于0.5，就认为其预测值为1，反之，则其预测值为0。</p><p>选择Sigmoid函数（也称为Logistic函数，逻辑回归的名字由此而来）<br>$$<br>g(z)=\frac{1}{1+e^{-z}}<br>$$<br>来作为预测函数，其中e是自然对数的底数。以z为横坐标，以g(z)为纵坐标，画出的图形如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/LR_3.png" alt="Sigmoid 函数在不同坐标下的图片"></p><p>从图中可以看出，当z=0时，g(z)=0.5；当z&gt;0时，g(z)&gt;0.5，当z越来越大时，g(z)无限接近于1；当z&lt;0时，g(z)&lt;0.5，当z越来越小时，g(z)无限接近于0。这正是我们想要的针对二元分类算法的预测函数。</p><h3 id="2-2-判定边界"><a href="#2-2-判定边界" class="headerlink" title="2.2 判定边界"></a>2.2 判定边界</h3><p>逻辑回归算法的预测函数由下面两个公式给出：<br>$$<br>h_{\theta}(x)=g\left(\theta^{T} x\right)<br>$$</p><p>$$<br>g(z)=\frac{1}{1+e^{-z}}<br>$$</p><p>下面给出两个判定边界的例子。假设有两个变量x1，x2，其逻辑回归预测函数是$h_{\theta}(x)=g\left(\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}\right)$</p><p>假设给定参数：<br>$$<br>\theta=\left[\begin{array}{c}<br>-3 \<br>1 \<br>1<br>\end{array}\right]<br>$$<br>那么，可以得到判定边$-3+x_{1}+x_{2}=0$ ，如果以 $x_{1}$ 为横坐标， $x_{2}$  为纵坐标，则这个函数画出来就是一条通过(0,3)和(3,0)两点的直线。这条线就是判定边界，其中，直线左下方为y=0，直线右上方为y=1，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-0bf913a36c2847a8.png" alt="img"></p><p>如果预测函数是多项式 $h_{\theta}(x)=g\left(\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\theta_{3} x_{1}^{2}+\theta_{4} x_{2}^{2}\right)$，且给定</p><p>$$<br>\theta=\left[\begin{array}{c}<br>-1 \<br>0 \<br>0 \<br>1 \<br>1<br>\end{array}\right]<br>$$<br>则可以得到判定边界函数$x_{1}^{2}+x_{2}^{2}=1$ 则这是一个半径为1的圆。圆内部是y=0，圆外部是y=1，如上图所示。</p><h3 id="2-3-损失函数"><a href="#2-3-损失函数" class="headerlink" title="2.3 损失函数"></a>2.3 损失函数</h3><p>我们不能使用线性回归模型的损失函数来推导逻辑回归的损失函数，因为那样的损失函数太复杂，最终很可能会导致无法通过迭代找到损失函数值最小的点。</p><p>为了容易地求出损失函数的最小值，我们分成 y=1 和 y=0 两种情况来分别考虑其预测值和真实值的误差。我们先考虑最简单的情况，即计算某个样本 x，y=1 和 y=0 两种情况下的预测值与真实值的误差，我们选择的损失公式如下：</p><p>$\operatorname{cost}\left(h_{\theta}(x), y\right)=\left{\begin{array}{ccc}-\log \left(h_{\theta}(x)\right), &amp; \text { if } &amp; y=1 \ -\log \left(1-h_{\theta}(x)\right), &amp; \text { if } &amp; y=0\end{array}\right.$</p><p>其中， $h_{\theta}(x)$ 表示预测为1的概率，log(x)为自然对数。如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630141514106.png" alt="img"></p><p>根据损失函数的定义，损失是预测值与真实值的差异。当差异越大时，损失越大，模型受到的“惩罚”也越严重。在左图中，当 y=1 时，随着（预测为1的概率）越来越大，预测值越来越接近真实值，其损失越来越小；在右图中，当 y=0 时，随着（预测为1的概率）越来越大，预测值越来越偏离真实值，其损失越来越大。</p><h3 id="2-4-梯度下降算法"><a href="#2-4-梯度下降算法" class="headerlink" title="2.4 梯度下降算法"></a>2.4 梯度下降算法</h3><p>和线性回归类似，这里使用梯度下降算法来求解逻辑回归模型参数。具体可见上一节 <a href="https://dongzhougu.github.io/2020/06/30/scikit-learn-xi-lie-san-xian-xing-hui-gui/">线性回归回归算法</a>。</p><h2 id="3-多元分类"><a href="#3-多元分类" class="headerlink" title="3. 多元分类"></a>3. 多元分类</h2><p>逻辑回归模型可以解决二元分类问题，即 y={0,1}，能不能解决多元分类问题呢？答案是肯定的。针对多元分类问题，y={0,1,2,3,…,n}，总共有n+1个类别。其解决思路是：首先把问题转换为二元分类问题，即y=0是一个类别，y={1,2,3,…,n}作为另外一个类别，然后计算这两个类别的概率；接着，把y=1作为一个类别，把y={0,2,3,…,n}作为另外一个类别，再计算这两个类别的概率。</p><h2 id="4-正则化"><a href="#4-正则化" class="headerlink" title="4. 正则化"></a>4. 正则化</h2><p>我们知道，过拟合是指模型很好地拟合了训练样本，但对新数据预测的准确性很差，这是因为模型太复杂了。解决办法是减少输入特征的个数，或者获取更多的训练样本。这里介绍的正则化也可以用来解决过拟合问题：</p><ul><li><p>保留所有的特征，减少特征的权重 $\theta_{j} $ 的值。确保所有的特征对预测值都有少量的贡献。</p></li><li><p>当每个特征 $x_{j} $ 对预测值y都有少量的贡献时，这样的模型可以良好的工作，这正是正则化的目的，可以用它来解决特征过多时的过拟合问题。</p></li></ul><h3 id="4-1-线性回归模型正则化"><a href="#4-1-线性回归模型正则化" class="headerlink" title="4.1 线性回归模型正则化"></a>4.1 线性回归模型正则化</h3><p>我们先来看线性回归模型的损失函数是如何正则化的：<br>$$<br>J(\theta)=\frac{1}{2 m} \sum_{i=1}^{m}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}+\lambda \sum_{j=1}^{n} \theta_{j}^{2}<br>$$<br>公式中前半部分就是原来的线性回归模型的损失函数，也称为预测值与实际值的误差。后半部分为加入的正则项。其中 $\lambda $ 的值有两个目的，即要维持对训练样本的拟合，又要避免对训练样本的过拟合。如果  $\lambda $  的值太大，则能确保不出现过拟合，但可能会导致对现有训练样本出现欠拟合。</p><h3 id="4-2-线性回归模型正则化"><a href="#4-2-线性回归模型正则化" class="headerlink" title="4.2 线性回归模型正则化"></a>4.2 线性回归模型正则化</h3><p>同样，可以对逻辑回归模型的损失函数进行正则化，其方法也是在原来的损失函数的基础上加上正则项：<br>$$<br>J(\theta)=-\frac{1}{m}\left[\sum_{i=1}^{m} y^{(i)} \log \left(h_{\theta}\left(x^{(i)}\right)\right)+\left(1-y^{(i)}\right) \log \left(1-h_{\theta}\left(x^{(i)}\right)\right)\right]+\frac{\lambda}{2 m} \sum_{j=1}^{n} \theta_{j}^{2}<br>$$</p><h2 id="5-算法参数"><a href="#5-算法参数" class="headerlink" title="5. 算法参数"></a>5. 算法参数</h2><p>在 <code>scikit-learn</code>里，逻辑回归模型由类 <code>sklearn.linear_model.LogisticRegression</code>实现。</p><h3 id="5-1-正则项权重"><a href="#5-1-正则项权重" class="headerlink" title="5.1 正则项权重"></a>5.1 正则项权重</h3><p>上面介绍的正则项权重  $\lambda $  ，在<code>LogisticRegression</code>类里有个参数 C 与之对应，但成反比。即 C 值越大，  $\lambda $ 越小，模型容易出现过拟合；C 值越小，  $\lambda $  越大，模型容易出现欠拟合。</p><h3 id="5-2-L1-L2范数"><a href="#5-2-L1-L2范数" class="headerlink" title="5.2 L1/L2范数"></a>5.2 L1/L2范数</h3><p>创建逻辑回归模型时，有个参数penalty（惩罚），其取值有“l1”或“l2”</p><ul><li>L1范数作为正则项，会让模型参数 $\theta$ 稀疏化，即让模型参数向量里的0元素尽可能多，只保留模型参数向量中重要特征的贡献。</li><li>L2范数作为正则项，则让模型参数尽量小，但不会为0，即尽量让每个特征对应预测值都有一些小的贡献。</li></ul><p>假设模型只有两个参数，它们构成一个二维向量 $\theta=\left[\theta_{1}, \theta_{2}\right]$,则L1范数为：</p><p>$|\theta|<em>{1}=\left|\theta</em>{1}\right|+\left|\theta_{2}\right|$</p><p>即L1范数是向量里元素的绝对值之和。L2范数为向量里所有元素的平方和的算术平方根：</p><p>$|\theta|<em>{2}=\sqrt{\theta</em>{1}^{2}+\theta_{2}^{2}}$</p><p>我们知道，梯度下降算法在参数迭代的过程中，实际上是在损失函数的等高线上跳跃，并最终收敛在误差最小的点上。那么正则项的本质是什么？正则项的本质是惩罚。在参数迭代的过程中，如果没有遵循正则项所表达的规则，那么其损失会变大，即受到了惩罚，从而往正则项所表达的规则处收敛。正则化后的模型参数应该收敛在误差等高线与正则项等高线相切的点上。</p><p>作为推论，L1范数作为正则项，有以下几个用途：</p><ul><li>选择重要特征：L1范数会让模型参数向量里的元素为0的点尽量多，这样可以排除掉那些对预测值没有什么影响的特征，从而简化问题。所以L1范数解决过拟合，实际上是减少特征数量。</li><li>模型可解释性好：模型参数向量稀疏化后，只会留下那些对预测值有重要影响的特征。这样我们就容易解释模型的因果关系。比如，针对某种癌症的筛查，如果有100个特征，那么我们无从解释到底哪些特征对阳性呈关键作用。稀疏化后，只留下几个关键的特征，就容易看到因果关系。</li></ul><p>由此可见，L1范数作为正则项，更多的是一个分析工具，而适合用来对模型求解。因为它会把不重要的特征直接去除。大部分的情况下解决过拟合问题，还是选择L2范数作为正则项，这也是 <code>scikit-learn</code> 里的默认值。</p><h2 id="6-示例：乳腺癌检测"><a href="#6-示例：乳腺癌检测" class="headerlink" title="6 示例：乳腺癌检测"></a>6 示例：乳腺癌检测</h2><p>本节来看一个实例，使用逻辑回归算法解决乳腺癌检测问题。我们需要先采集肿瘤病灶造影图片，然后对图片进行分析，从图片中提取特征，再根据特征来训练模型。最终使用模型来检测新采集到的肿瘤病灶造影，以便判断肿瘤是良性的还是恶性的。这是个典型的二元分类问题。</p><h3 id="6-1-数据采集及特征提取"><a href="#6-1-数据采集及特征提取" class="headerlink" title="6.1 数据采集及特征提取"></a>6.1 数据采集及特征提取</h3><p>为了简单起见，直接加载 <code>scikit-learn</code> 自带的一个乳腺癌数据集。这个数据集是已经采集后的数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_breast_cancer</span><br><span class="line">cancer = load_breast_cancer()</span><br><span class="line">X = cancer.data</span><br><span class="line">y = cancer.target</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'data shape: {0}; no. positive: {1}; no. negative: {2}'</span></span><br><span class="line">      .<span class="built_in">format</span>(X.shape,y[y==<span class="number">1</span>].shape[<span class="number">0</span>],y[y==<span class="number">0</span>].shape[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(cancer.data[<span class="number">0</span>])</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data shape: (<span class="number">569</span>, <span class="number">30</span>); no. positive: <span class="number">357</span>; no. negative: <span class="number">212</span></span><br><span class="line">[<span class="number">1.799e+01</span> <span class="number">1.038e+01</span> <span class="number">1.228e+02</span> <span class="number">1.001e+03</span> <span class="number">1.184e-01</span> <span class="number">2.776e-01</span> <span class="number">3.001e-01</span></span><br><span class="line"> <span class="number">1.471e-01</span> <span class="number">2.419e-01</span> <span class="number">7.871e-02</span> <span class="number">1.095e+00</span> <span class="number">9.053e-01</span> <span class="number">8.589e+00</span> <span class="number">1.534e+02</span></span><br><span class="line"> <span class="number">6.399e-03</span> <span class="number">4.904e-02</span> <span class="number">5.373e-02</span> <span class="number">1.587e-02</span> <span class="number">3.003e-02</span> <span class="number">6.193e-03</span> <span class="number">2.538e+01</span></span><br><span class="line"> <span class="number">1.733e+01</span> <span class="number">1.846e+02</span> <span class="number">2.019e+03</span> <span class="number">1.622e-01</span> <span class="number">6.656e-01</span> <span class="number">7.119e-01</span> <span class="number">2.654e-01</span></span><br><span class="line"> <span class="number">4.601e-01</span> <span class="number">1.189e-01</span>]</span><br></pre></td></tr></tbody></table></figure><p>数据集中总共有569个样本，每个样本有30个特征，其中357个阳性（y=1）样本，212个阴性（y=0）样本。同时，还打印出一个样本数据，以便直观地进行观察。</p><p>这30个特征是怎么来的呢？这个数据集总共从病灶造影图片中提取了以下10个关键属性：</p><ul><li>radius：半径，即病灶中心点离边界的平均距离。</li><li>texture：纹理，灰度值的标准偏差。</li><li>perimeter：周长，即病灶的大小。</li><li>area：面积，也是反映病灶大小的一个指标。</li><li>smoothness：平滑度，即半径的变化幅度。</li><li>compactness：密实度，周长的平方除以面积，再减去1</li><li>concavity：凹度，凹陷部分轮廓的严重程度。</li><li>concave points：凹点，凹陷轮廓的数量。</li><li>symmetry：对称性。</li><li>fractal demension：分形维度。</li></ul><p>实际上它只关注10个特征，然后又构造出了每个特征的标准差及最大值，这样每个特征就衍生出了两个特征，所以总共就有了30个特征。可以通过 <code>cancer.feature_names</code> 变量来查看这些特征的名称。</p><h3 id="6-2-模型训练"><a href="#6-2-模型训练" class="headerlink" title="6.2 模型训练"></a>6.2 模型训练</h3><p>首先，把数据集分成训练数据集和测试数据集：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=<span class="number">0.2</span>)</span><br></pre></td></tr></tbody></table></figure><p>然后使用 <code>LogisticRegression</code> 模型来训练，并计算训练数据集的评分数据和测试数据集的评分数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(X_train,y_train)</span><br><span class="line">train_score = model.score(X_train,y_train)</span><br><span class="line">test_score = model.score(X_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'train score: {train_score:.6f}; test_score:{test_score:.6f}'</span></span><br><span class="line">      .<span class="built_in">format</span>(train_score=train_score,</span><br><span class="line">             test_score=test_score))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train score: <span class="number">0.940659</span>; test_score:<span class="number">0.964912</span></span><br></pre></td></tr></tbody></table></figure><p>观察模型在测试样本集的表现：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">y_pred = model.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'matchs: {0}/{1}'</span>.<span class="built_in">format</span>(np.equal(y_pred,y_test).shape[<span class="number">0</span>],y_test.shape[<span class="number">0</span>]))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matchs: <span class="number">114</span>/<span class="number">114</span></span><br></pre></td></tr></tbody></table></figure><p>总共114个测试样本，全部预测正确。为什么 <code>testscore</code> 却只有0.973684，而不是1呢？答案是，<code>scikit-learn</code>不是使用这个数据来计算分数，因为这个数据不能完全反映误差情况，而是使用预测概率数据计算模型评分。</p><p>针对二元分类问题，<code>LogisticRegression</code>模型会对每个样本输出两个概率，即为 0 的概率和为 1 的概率，哪个概率高就预测为哪个类别。</p><p>找出测试数据集中预测“自信度”低于90%的样本。这里先计算出测试数据集里的每个样本的预测概率数据，针对每个样本，它会有两个数据，一是预测其为阳性的概率，另外一个是预测其为阴性的概率。接着找出预测为阴性的概率大于0.1且小于0.9的样本（同时也是预测为阳性的概率大于0.1小于0.9），这些样本就是“自信度”不足90%的样本。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预测概率：找出预测概率低于 90% 的样本</span></span><br><span class="line">y_pred_proba = model.predict_proba(X_test)  <span class="comment"># 计算每个测试样本的预测概率</span></span><br><span class="line"><span class="comment"># 找出第一列，即预测为阴性的概率大于 0.1 的样本，保存在 result 里</span></span><br><span class="line">y_pred_proba_0 = y_pred_proba[:, <span class="number">0</span>] &gt; <span class="number">0.1</span></span><br><span class="line">result = y_pred_proba[y_pred_proba_0]</span><br><span class="line"><span class="comment"># 在 result 结果集里，找出第二列，即预测为阳性的概率大于 0.1 的样本</span></span><br><span class="line">y_pred_proba_1 = result[:, <span class="number">1</span>] &gt; <span class="number">0.1</span></span><br><span class="line"><span class="built_in">print</span>(result[y_pred_proba_1])</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.29623162</span> <span class="number">0.70376838</span>]</span><br><span class="line"> [<span class="number">0.54660262</span> <span class="number">0.45339738</span>]</span><br><span class="line"> [<span class="number">0.17874247</span> <span class="number">0.82125753</span>]</span><br><span class="line"> [<span class="number">0.20917573</span> <span class="number">0.79082427</span>]</span><br><span class="line"> [<span class="number">0.10943452</span> <span class="number">0.89056548</span>]</span><br><span class="line"> [<span class="number">0.35503614</span> <span class="number">0.64496386</span>]</span><br><span class="line"> [<span class="number">0.23849987</span> <span class="number">0.76150013</span>]</span><br><span class="line"> [<span class="number">0.13634228</span> <span class="number">0.86365772</span>]</span><br><span class="line"> [<span class="number">0.80171734</span> <span class="number">0.19828266</span>]</span><br><span class="line"> [<span class="number">0.21744759</span> <span class="number">0.78255241</span>]</span><br><span class="line"> [<span class="number">0.81346356</span> <span class="number">0.18653644</span>]</span><br><span class="line"> [<span class="number">0.2225791</span>  <span class="number">0.7774209</span> ]</span><br><span class="line"> [<span class="number">0.10788007</span> <span class="number">0.89211993</span>]</span><br><span class="line"> [<span class="number">0.88068005</span> <span class="number">0.11931995</span>]</span><br><span class="line"> [<span class="number">0.18189724</span> <span class="number">0.81810276</span>]]</span><br></pre></td></tr></tbody></table></figure><p>由此可见，计算预测概率使用model.predict_proba()函数，而计算预测分类用model.predict()函数。</p><h3 id="6-3-模型优化"><a href="#6-3-模型优化" class="headerlink" title="6.3 模型优化"></a>6.3 模型优化</h3><p>首先，使用Pipeline来增加多项式特征：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加多项式预处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">polynomial_model</span>(<span class="params">degree=<span class="number">1</span>, **kwarg</span>):</span></span><br><span class="line">    polynomial_features = PolynomialFeatures(degree=degree,</span><br><span class="line">                                             include_bias=<span class="literal">False</span>)</span><br><span class="line">    logistic_regression = LogisticRegression(**kwarg)</span><br><span class="line">    pipeline = Pipeline([(<span class="string">"polynomial_features"</span>, polynomial_features),</span><br><span class="line">                         (<span class="string">"logistic_regression"</span>, logistic_regression)])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure><p>接着，增加二阶多项式特征，创建并训练模型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">model = polynomial_model(degree=<span class="number">2</span>, penalty=<span class="string">'l1'</span>, solver=<span class="string">'liblinear'</span>)</span><br><span class="line">start = time.process_time()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">train_score = model.score(X_train, y_train)</span><br><span class="line">test_score = model.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'elaspe: {0:.6f}; train_score: {1:0.6f}; cv_score: {2:.6f}'</span>.<span class="built_in">format</span>(</span><br><span class="line">    time.process_time() - start, train_score, test_score))</span><br></pre></td></tr></tbody></table></figure><p>使用L1范数作为正则项（参数penalty=’l1’），输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaspe: <span class="number">0.156250</span>; train_score: <span class="number">1.000000</span>; cv_score: <span class="number">0.956140</span></span><br></pre></td></tr></tbody></table></figure><p>可以看到，训练数据集评分和测试数据集评分都增加了。为什么使用L1范数作为正则项呢？L1范数作为正则项可以实现参数的稀疏化，即自动选择出那些对模型有关联的重要特征。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logistic_regression = model.named_steps[<span class="string">'logistic_regression'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'model parameters shape: {0}; count of non-zero element: {1}'</span>.<span class="built_in">format</span>(</span><br><span class="line">    logistic_regression.coef_.shape, </span><br><span class="line">    np.count_nonzero(logistic_regression.coef_)))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model parameters shape: (<span class="number">1</span>, <span class="number">495</span>); count of non-zero element: <span class="number">110</span></span><br></pre></td></tr></tbody></table></figure><p>逻辑回归模型的coef_属性里保存的就是模型参数。从输出结果可以看到，增加二阶多项式特征后，输入特征由原来的30个增加到了495个，最终大多数特征都被丢弃，只保留了110个有效特征。</p><h3 id="6-4-学习曲线"><a href="#6-4-学习曲线" class="headerlink" title="6.4 学习曲线"></a>6.4 学习曲线</h3><p>首先画出使用L1范数作为正则项所对应的一阶和二阶多项式的学习曲线：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> plot_learning_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> ShuffleSplit</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">cv = ShuffleSplit(n_splits=<span class="number">10</span>, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line">title = <span class="string">'Learning Curves (degree={0}, penalty={1})'</span></span><br><span class="line">degrees = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">penalty = <span class="string">'l1'</span></span><br><span class="line"></span><br><span class="line">start = time.process_time()</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(degrees)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="built_in">len</span>(degrees), i + <span class="number">1</span>)</span><br><span class="line">    plot_learning_curve(plt, polynomial_model(degree=degrees[i], penalty=penalty, solver=<span class="string">'liblinear'</span>, max_iter=<span class="number">300</span>), </span><br><span class="line">                        title.<span class="built_in">format</span>(degrees[i], penalty), X, y, ylim=(<span class="number">0.8</span>, <span class="number">1.01</span>), cv=cv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'elaspe: {0:.6f}'</span>.<span class="built_in">format</span>(time.process_time()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出的结果如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l1_elaspe: <span class="number">10.781250</span></span><br></pre></td></tr></tbody></table></figure><p>L1范数学习曲线如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-08d8944e88c2ae64.png" alt="image-20200630141514106"></p><p>接着画出使用L2范数作为正则项所对应的一阶和二阶多项式的学习曲线：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"></span><br><span class="line">penalty = <span class="string">'l2'</span></span><br><span class="line"></span><br><span class="line">start = time.clock()</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">4</span>), dpi=<span class="number">144</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(degrees)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="built_in">len</span>(degrees), i + <span class="number">1</span>)</span><br><span class="line">    plot_learning_curve(plt, polynomial_model(degree=degrees[i], penalty=penalty, solver=<span class="string">'lbfgs'</span>), </span><br><span class="line">                        title.<span class="built_in">format</span>(degrees[i], penalty), X, y, ylim=(<span class="number">0.8</span>, <span class="number">1.01</span>), cv=cv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'elaspe: {0:.6f}'</span>.<span class="built_in">format</span>(time.clock()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出的结果如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l2_elaspe: <span class="number">2.718750</span></span><br></pre></td></tr></tbody></table></figure><p>L2范数学习曲线如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630141743010.png" alt="image-20200630141743010"></p><p>可以明显地看出，使用二阶多项式并使用L1范数作为正则项的模型最优，因为它的训练样本评分最高，交叉验证样本评分也最高。从图中还可以看出，训练样本评分和交叉验证样本评分之间的间隙还比较大，我们可以采集更多的数据来训练模型，以便进一步优化模型。</p><p>另外从输出的时间可以看出，L1 范数对应的学习曲线，需要花费较长的时间，原因是，<code>scikit-learn</code> 的<code>learning_curve()</code> 函数在画学习曲线的过程中，要对模型进行多次训练，并计算交叉验证样本评分。同时，为了使曲线更平滑，针对每个点还会进行多次计算求平均值。这个就是 <code>ShuffleSplit</code> 类的作用。在我们这个实例里，只有569个训练样本，这是个很小的数据集。如果数据集增加100倍，甚至1000倍，拿出来画学习曲线将是场灾难。</p><p>那么，针对大数据集，怎样高效地画学习曲线？答案很简单，可以从大数据集里选择一小部分数据来画学习曲线，待选择好最优的模型之后，再使用全部的数据集来训练模型。但是要尽量保持选择出来的这部分数据的标签分布与大数据集的标签分布相同，如针对二元分类，阳性和阴性比例要一致。更直观的说就是，抽取出来的样本集为原来数据集的一个缩影，尽可能相似。</p><h2 id="7-拓展阅读"><a href="#7-拓展阅读" class="headerlink" title="7.拓展阅读"></a>7.拓展阅读</h2><p>实际上，我们的预测函数就是写成向量形式的：<br>$$<br>h_{\theta}(x)=g(z)=g\left(\theta^{T} x\right)=\frac{1}{1+e^{-\theta^{T} x}}<br>$$<br>这个预测函数一次只计算一个训练样本的预测值，怎样一次性计算出所有样本的预测值呢？答案是把预测函数的参数写成向量的形式：<br>$$<br>h=g(X \theta)<br>$$<br>其中g(x)为Sigmoid函数。X为m×n的矩阵，即数据集的矩阵表达。损失函数也有对应的矩阵形式：<br>$$<br>J(\theta)=\frac{1}{m}\left(-y^{T} \log (h)-(1-y)^{T} \log (1-h)\right)<br>$$<br>其中，y为目标值向量，h为一次性计算出来的所有样本的预测值。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列三：线性回归</title>
      <link href="/2020/06/30/scikit-learn-xi-lie-san-xian-xing-hui-gui/"/>
      <url>/2020/06/30/scikit-learn-xi-lie-san-xian-xing-hui-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h1 id="线性回归算法"><a href="#线性回归算法" class="headerlink" title="线性回归算法"></a>线性回归算法</h1><p>线性回归算法是使用线性方程对数据集拟合的算法，本文从单变量线性回归算法、多变量线性回归算法，其中损失函数以及梯度下降算法的推导过程会用到部分线性代数和偏导数；接着重点介绍了梯度下降算法的求解步骤以及性能优化方面的内容；最后通过一个房价预测模型，介绍了线性回归算法性能优化的一些常用步骤和方法。</p><h2 id="线性回归概述"><a href="#线性回归概述" class="headerlink" title="线性回归概述"></a>线性回归概述</h2><p>说到回归，一般都是指 <code>线性回归(linear regression)</code>。线性回归意味着可以将输入项分别乘以一些常量，再将结果加起来得到输出。回归的目的是预测数值型的目标值，最直接的办法是依据输入写出一个目标值的计算公式。</p><p>假如你想要预测兰博基尼跑车的功率大小，可能会这样计算:</p><blockquote><p>HorsePower = 0.0015 * annualSalary - 0.99 * hoursListeningToPublicRadio</p></blockquote><p>这就是所谓的 <code>回归方程(regression equation)</code>，其中的 0.0015 和 -0.99 称作 <code>回归系数（regression weights）</code>，求这些回归系数的过程就是回归。一旦有了这些回归系数，再给定输入，做预测就非常容易了。具体的做法是用回归系数乘以输入值，再将结果全部加在一起，就得到了预测值。我们这里所说的，回归系数是一个向量，输入也是向量，这些运算也就是求出二者的内积。</p><h2 id="单变量线性回归算法"><a href="#单变量线性回归算法" class="headerlink" title="单变量线性回归算法"></a>单变量线性回归算法</h2><p>先考虑最简单的单变量线性回归算法，即只有一个输入特征。</p><h3 id="预测函数"><a href="#预测函数" class="headerlink" title="预测函数"></a>预测函数</h3><p>针对数据集x和y，预测函数会根据输入特征x来计算输出值h(x)。其输入和输出的函数关系如下：<br>$$<br>h_{\theta}(x)=\theta_{0}+\theta_{1} x<br>$$</p><p>这个方程表达的是一条直线。我们的任务是构造一个 $h_{\theta}$ 函数，来映射数据集中的输入特征x和输出值y，使得预测函数 $h_{\theta}$ 计算出来的值与真实值y的整体误差最小。构造  $h_{\theta}$ 函数的关键就是找到合适的 $\theta_{0}$和 $\theta_{1}$ 的值， 模型参数，也就是所说的模型参数。</p><p>假设有如下的数据集：</p><table><thead><tr><th align="center">输入特征x</th><th align="center">输出y</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">6</td></tr><tr><td align="center">3</td><td align="center">10</td></tr><tr><td align="center">4</td><td align="center">15</td></tr></tbody></table><p>假设模型参数 $\theta_{0}=1,  \theta_{1}=3$ ,  则预测函数为 $h_{\theta}(x)=1+3 x$ 。针对数据集中的第一个样本，输入为1，根据模型函数预测出来的值是4，与输出值y是吻合的。针对第二个样本，输入为2，根据模型函数预测出来的值是7，与实际输出值y相差1。模型的求解过程就是找出一组最合适的模型参数 $\theta_{0}$和 $\theta_{1}$，以便能最好地拟合数据集。</p><p>怎样来判断最好地拟合了数据集呢？没错，就是使用损失函数（也叫损失函数）。当拟合损失最小时，即找到了最好的拟合参数。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>单变量线性回归算法的损失函数是：</p><p>$$<br>J(\theta)=J\left(\theta_{0}, \theta_{1}\right)=\frac{1}{2 m} \sum_{i=1}^{m}\left(h\left(x^{(i)}\right)-y^{(i)}\right)^{2}<br>$$<br>其中，$h\left(x^{(i)}\right)-y^{(i)}$ 是预测值和真实值之间的误差，故损失就是预测值和真实值之间误差平方的平均值，之所以乘以1/2是为了方便计算。这个函数也称为均方差公式。有了损失函数，就可以精确地测量模型对训练样本拟合的好坏程度。</p><h3 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h3><p>有了预测函数，也可以精确地测量预测函数对训练样本的拟合情况。但怎么求解模型参数 $\theta_{0}$和 $\theta_{1}$的值呢？这时梯度下降算法就排上了用场。</p><p>我们的任务是找到合适的 $\theta_{0}$和 $\theta_{1}$ ，使得损失函数 $J\left(\theta_{0}, \theta_{1}\right)$ 最小。为了便于理解，我们切换到三维空间来描述这个任务。在一个三维空间里，以  $\theta_{0}$ 作为 x 轴， 以 $\theta_{1}$ 作为 y 轴，以损失函数 $J\left(\theta_{0}, \theta_{1}\right)$ 作为 z 轴，那么我们的任务就是要找出当 z 轴上的值最小的时候所对应的 x 轴上的值和 y 轴上的值。</p><p><strong>梯度下降算法的原理：</strong>先随机选择一组 $\theta_{0}$ 和 $\theta_{1}$ ，同时选择一个参数 $\alpha$ 作为移动的步长。然后，让x轴上的 $\theta_{0}$ 和 y轴上的  $\theta_{1}$ 别向特定的方向移动一小步，这个步长的大小就由参数  $\alpha$ 决定。经过多次迭代之后，x 轴和 y 轴上的值决定的点就慢慢靠近 z 轴上的最小值处，如图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/u=3721595541,2272727131&amp;fm=26&amp;gp=0.jpg" alt="img"></p><p>那特定的方向怎么确定呢？答案是<strong>偏导数</strong>。</p><p>可以简单地把偏导数理解为斜率。我们要让 $\theta_{j}$ 不停地迭代，由当前  $\theta_{j}$ 的值，根据 $J(\theta)$ 的偏导数函数，算出 $J(\theta)$ 在  $\theta_{j}$ 上的斜率，然后在乘以学习率  $\alpha$ ，就可以让 $\theta_{j}$ 往 $J(\theta)$ 变小的方向迈一小步。</p><p>用数学来描述上述过程，梯度下降的公式为：<br>$$<br>\theta_{j}=\theta_{j}-\alpha \frac{\partial}{\partial \theta_{j}} J(\theta)<br>$$<br>把损失函数 $J(\theta)$ 的定义代入上面的公式中，不难推导出梯度下降算法公式：<br>$$<br>\begin{array}{c}<br>\theta_{0}=\theta_{0}-\frac{\alpha}{m} \sum_{i=1}^{m}\left(h\left(x^{(i)}\right)-y^{(j)}\right) \<br>\<br>\theta_{1}=\theta_{1}-\frac{\alpha}{m} \sum_{i=1}^{m}\left(\left(h\left(x^{(i)}\right)-y^{(i)}\right) x_{i}\right)<br>\end{array}<br>$$<br>公式中， $\alpha$  是学习率；m 是训练样本的个数: $h\left(x^{(i)}\right)-y^{(i)}$ 是模型预测值和真实值的误差。需要注意的是，针对</p><p> $\theta_{0}$ 和 $\theta_{1}$ 分别求出了其迭代公式，在 $\theta_{1}$ 的迭代公式里，累加器中还需要乘以 $x_{i}$, 具体参考扩展部分。</p><h2 id="多变量线性回归算法"><a href="#多变量线性回归算法" class="headerlink" title="多变量线性回归算法"></a>多变量线性回归算法</h2><p>实际应用中往往不止一个输入特征。熟悉了单变量线性回归算法后，我们来探讨一下多变量线性回归算法。</p><h3 id="预测函数-1"><a href="#预测函数-1" class="headerlink" title="预测函数"></a>预测函数</h3><p>上面介绍的单变量线性回归模型里只有一个输入特征，我们推广到更一般的情况，即多个输入特征。此时输出y的值由n个输入特征 $x_{1}, x_{2}, \ldots, x_{n}$ 决定。那么预测函数模型可以改写如下：</p><p>$$<br>h_{\theta}(x)=\theta_{0}+\theta_{1} x_{1}+\theta_{2} x_{2}+\ldots+\theta_{n} x_{n}<br>$$<br>假设 $x_{0}=1$，那么上面的公式可以重写为：<br>$$<br>h_{\theta}(x)=\sum_{j=0}^{n} \theta_{j} x_{j}<br>$$<br>其中，$\theta_{0}, \theta_{1}, \dots, \theta_{n}$ 统称为 $\theta$ , 是预测函数的参数。即一组 $\theta$ 值就决定了一个预测函数，记为 $h_{\theta}(x)$ , 为了简便起见，在不引起误解的情况下可以简写为 $h(x)$ 。理论上，预测函数有无穷多个，我们求解的目标就是找出一个最优的 $\theta$ 值。</p><h4 id="向量形式的预测函数"><a href="#向量形式的预测函数" class="headerlink" title="向量形式的预测函数"></a>向量形式的预测函数</h4><p>根据向量乘法运算法则，损失函数可重写为：</p><p>$$<br>h_{\theta}(x)=\left[\theta_{0}, \theta_{1}, \cdots, \theta_{n}\right]\left[\begin{array}{c}<br>x_{0} \<br>x_{1} \<br>\vdots \<br>x_{n}<br>\end{array}\right]=\theta^{T} x<br>$$<br>此处，依然假设 $x_{0}=1$， $x_{0}$ 称为模型偏置（bias）。</p><p>写成向量形式的预测函数有两个原因。一是因为简洁，二是因为在实现算法时，要用到数值计算里的矩阵运算来提高效率，比如 <code>Numpy</code> 库里的矩阵运算。</p><h4 id="向量形式的训练样本"><a href="#向量形式的训练样本" class="headerlink" title="向量形式的训练样本"></a>向量形式的训练样本</h4><p>假设输入特征的个数是n，即 $x_{1}, x_{2}, \ldots, x_{n}$ , 我们总共有 m 个训练样本，为了书写方便，假设 $x_{0}=1$。这样训练样本可以写成矩阵的形式，即矩阵里每一行都是一个训练样本，总共有 m 行，每行有 n+1 列。</p><blockquote><p>思考：为什么不是n列而是n+1列？答案是：把模型偏置 $x_{0}$也加入了训练样本里。最后把训练样本写成一个矩阵，如下：</p></blockquote><p>$$<br>\boldsymbol{X}=\left[\begin{array}{ccccc}<br>x_{0}^{(1)} &amp; x_{1}^{(1)} &amp; x_{2}^{(1)} &amp; \dots &amp; x_{n}^{(1)} \<br>x_{0}^{(2)} &amp; x_{1}^{(2)} &amp; x_{2}^{(2)} &amp; \dots &amp; x_{n}^{(2)} \<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>x_{0}^{(m)} &amp; x_{1}^{(m)} &amp; x_{2}^{(m)} &amp; \cdots &amp; x_{n}^{(m)}<br>\end{array}\right], \theta=\left[\begin{array}{c}<br>\theta_{0} \<br>\theta_{1} \<br>\theta_{2} \<br>\vdots \<br>\theta_{n}<br>\end{array}\right]<br>$$</p><p>理解训练样本矩阵的关键在于理解这些上标和下标的含义。其中，带括号的上标表示样本序号，从1到m；下标表示特征序号，从0到n，其中 $x_{0}$ 为常数1。</p><blockquote><p>$x_{j}^{(i)}$ 表示第 i 个训练样本的第 j 个特征的值。而 $x^{(i)}$ 只有上标，则表示第 i 个训练样本所构成的列向量。</p></blockquote><p>综上，训练样本的预测值 $h_{\theta}(X)$ ，可以使用下面的矩阵运算公式：</p><p>$$<br>h_{\theta}(X)=X \theta<br>$$</p><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><p>多变量线性回归算法的损失函数：</p><p>$$<br>J(\theta)=\frac{1}{2 m} \sum_{i=1}^{m}\left(h\left(x^{(i)}\right)-y^{(i)}\right)^{2}<br>$$<br>其中，模型参数 $\theta$ 为 n+1 维的向量，$h\left(x^{(i)}\right)-y^{(i)}$ 是预测值和实际值的差，这个形式和单变量线性回归算法的类似。</p><p>损失函数有其对应的矩阵形式：<br>$$<br>J(\theta)=\frac{1}{2 m}(X \theta-\vec{y})^{T}(X \theta-\vec{y})<br>$$<br>其中，X 为 $m \times(n+1)$ 维的训练样本矩阵；上标T表示转置矩阵；$\vec{y}$ 表示由所有的训练样本的输出 $y^{(i)}$ 构成的向量。这个公式的优势是：没有累加器，不需要循环，直接使用矩阵运算，就可以一次性计算出对特定的参数 $\theta$ 下模型的拟合损失。</p><h3 id="梯度下降算法-1"><a href="#梯度下降算法-1" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h3><p>根据单变量线性回归算法的介绍，梯度下降的公式为：<br>$$<br>\theta_{j}=\theta_{j}-\alpha \frac{\partial}{\partial \theta_{j}} J(\theta)<br>$$<br>公式中，下标 j 是参数的序号，其值从 0 到 n； $\alpha$ 为学习率。把损失函数代入上式，利用偏导数计算法则，不难推导出梯度下降算法的参数迭代公式：<br>$$<br>\theta_{j}=\theta_{j}-\frac{\alpha}{m} \sum_{i=1}^{m}\left(\left(h\left(x^{(i)}\right)-y^{(i)}\right) x_{j}^{(i)}\right)<br>$$<br>我们可以对比一下单变量线性回归函数的参数迭代公式。实际上和多变量线性回归函数的参数迭代公式是一模一样的。惟一的区别就是因为 $x_{0}$ 为常数1，在单变量线性回归算法的参数迭代公式中省去了。</p><p>应用这个公式编写机器学习算法，一般步骤如下：</p><ul><li><p>确定学习率： $\alpha$ 太大可能会使损失函数无法收敛，太小则计算太多，机器学习算法效率就比较低。</p></li><li><p>参数初始化：比如让所有的参数都以1作为起始点，$\theta_{0}=1, \theta_{1}=1, \dots, \theta_{n}=1$，根据预测值和损失函数，就可以算出在参数起始位置的损失。需要注意的是，参数起始点可以根据实际情况灵活选择，以便让机器学习算法的性能更高，比如选择比较靠近极点的位置。</p></li><li><p>计算参数的下一组值：据梯度下降参数迭代公式，分别同时计算出新的 $\theta_{j}$ 值，进而得到新的预测函数 $h_{\theta}(x)$ 。再根据新的预测函数，代入损失函数就可以算出新的损失。</p></li><li><p>确定损失函数是否收敛：拿新的和旧的损失进行比较，看损失是不是变得越来越小。如果两次损失之间的差异小于误差范围，即说明已经非常靠近最小损失了，就可以近似地认为我们找到了最小损失。如果两次损失之间的差异在误差范围之外，重复步骤（3）继续计算下一组参数直到找到最优解。</p></li></ul><h2 id="模型优化"><a href="#模型优化" class="headerlink" title="模型优化"></a>模型优化</h2><p>线性回归模型常用的优化方法，包括增加多项式特征以及数据归一化处理等。</p><h3 id="多项式与线性回归"><a href="#多项式与线性回归" class="headerlink" title="多项式与线性回归"></a>多项式与线性回归</h3><p>当线性回归模型太简单导致欠拟合时，我们可以增加特征多项式来让线性回归模型更好地拟合数据。比如有两个特征  $x_{1}$ 和 $x_{2}$ ，可以增加两个特征的乘积 $x_{1} \times x_{2}$ 作为新特征  $x_{3}$ 。同理，我们也可以增加 $x_{1}^{2}$ 和 $x_{2}^{2}$  分别作为新特征  $x_{4}$ 和 $x_{5}$ 。</p><p>在 <code>scikit-learn</code> 里，线性回归是由类 <code>sklearn.learn_model.LinearRegression</code> 实现的，多项式由类<code>sklearn.preprocessing.PolynomialFeatures</code> 实现。那么要怎样添加多项式特征呢？我们需要用一个管道把两个类串起来，即用 <code>sklearn.pipeline.Pipeline</code> 把这两个模型串起来。</p><p>比如下面的函数就可以创建一个多项式拟合：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">polynomial_model</span>(<span class="params">degree=<span class="number">1</span></span>):</span></span><br><span class="line">    polynomial_features = PolynomialFeatures(degree=degree,include_bias=<span class="literal">False</span>)</span><br><span class="line">    linear_regression = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 这是一个流水线，先增加多项式阶数，然后再用线性回归算法来拟合数据</span></span><br><span class="line">    pipeline = Pipeline([(<span class="string">"polynomial_features"</span>, polynomial_features),</span><br><span class="line">                         (<span class="string">"linear_regression"</span>, linear_regression)])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure><p>一个 Pipeline 可以包含多个处理节点，在 scikit-learn 里，除了最后一个节点外，其他的节点都必须实现 fit() 方法和 transform() 方法，最后一个节点只需要实现 fit() 方法即可。当训练样本数据送进 Pipeline 里进行处理时，它会逐个调用节点的 fit() 方法和 transform() 方法，最后调用最后一个节点的 fit() 方法来拟合数据。管道的示意图如下所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630093109778.png" alt="image-20200630090937011"></p><h3 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h3><p>当线性回归模型有多个输入特征时，特别是使用多项式添加特征时，需要对数据进行归一化处理。比如，特征</p><p>$x_{1}$ 的范围在[1,4]之间，特征 $x_{2}$ 的范文在[1,2000]之间，这种情况下，可以让 $x_{1}$除以4来作为新特征 $x_{1}$，同时让 $x_{2}$ </p><p>除以2000来作为新特征 $x_{2}$ ，该过程称为特征缩放（feature scaling）。可以使用特征缩放来对训练样本进行归一化处理，处理后的特征范围在[0,1]之间。</p><ul><li>归一化处理的目的是让算法收敛更快，提升模型拟合过程中的计算效率。</li><li>进行归一化处理后，当有个新的样本需要计算预测值时，也需要先进行归一化处理，再通过模型来计算预测值，计算出来的预测值要再乘以归一化处理的系数，这样得到的数据才是真正的预测数据。</li><li>在 <code>scikit-learn</code> 里，使用 <code>LinearRegression</code> 进行线性回归时，可以指定 <code>normalize=True</code> 来对数据进行归一化处理。</li></ul><h2 id="示例1：使用线性回归算法拟合正弦函数"><a href="#示例1：使用线性回归算法拟合正弦函数" class="headerlink" title="示例1：使用线性回归算法拟合正弦函数"></a>示例1：使用线性回归算法拟合正弦函数</h2><p>首先生成200个在区间 $[2 \pi, 2 \pi]$ 内的正弦函数上的点，并给这些点加上一些随机的噪声。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n_dots = <span class="number">200</span></span><br><span class="line">X = np.linspace(-<span class="number">2</span> * np.pi, <span class="number">2</span> * np.pi, n_dots)</span><br><span class="line">Y = np.sin(X) + <span class="number">0.2</span> * np.random.rand(n_dots) - <span class="number">0.1</span></span><br><span class="line"><span class="comment"># 把一个n维向量转换成一个n*1维的矩阵</span></span><br><span class="line">X = X.reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">Y = Y.reshape(-<span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>PolynomialFeatures</code> 和 <code>Pipeline</code> 创建一个多项式拟合模型</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> PolynomialFeatures</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">polynomial_model</span>(<span class="params">degree=<span class="number">1</span></span>):</span></span><br><span class="line">    polynomial_features = PolynomialFeatures(degree=degree,include_bias=<span class="literal">False</span>)</span><br><span class="line">    linear_regression = LinearRegression(normalize=<span class="literal">True</span>)</span><br><span class="line">    pipeline = Pipeline([(<span class="string">"polynomial_features"</span>, polynomial_features),</span><br><span class="line">                         (<span class="string">"linear_regression"</span>, linear_regression)])</span><br><span class="line">    <span class="keyword">return</span> pipeline</span><br></pre></td></tr></tbody></table></figure><p>分别用2/3/5/10阶多项式来拟合数据集：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">degrees = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> degrees:</span><br><span class="line">    model = polynomial_model(degree=d)</span><br><span class="line">    model.fit(X, Y)</span><br><span class="line">    train_score = model.score(X, Y)</span><br><span class="line">    mse = mean_squared_error(Y, model.predict(X))</span><br><span class="line">    results.append({<span class="string">"model"</span>: model, <span class="string">"degree"</span>: d, <span class="string">"score"</span>: train_score, <span class="string">"mse"</span>: mse})</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"degree: {}; train score: {}; mean squared error: {}"</span></span><br><span class="line">          .<span class="built_in">format</span>(r[<span class="string">"degree"</span>], r[<span class="string">"score"</span>], r[<span class="string">"mse"</span>]))</span><br></pre></td></tr></tbody></table></figure><p>算出每个模型拟合的评分，此外，使用 <code>mean_squared_error</code> 算出均方根误差，即实际的点和模型预点之间的距离，均方根误差越小说明模型拟合效果越好——上述代码的输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">degree: <span class="number">2</span>; train score: <span class="number">0.1543189069883787</span>; mean squared error: <span class="number">0.43058829267318416</span></span><br><span class="line">degree: <span class="number">3</span>; train score: <span class="number">0.2755383996826518</span>; mean squared error: <span class="number">0.3688679883773196</span></span><br><span class="line">degree: <span class="number">5</span>; train score: <span class="number">0.8982707756590037</span>; mean squared error: <span class="number">0.051796609130712795</span></span><br><span class="line">degree: <span class="number">10</span>; train score: <span class="number">0.9935830575581858</span>; mean squared error: <span class="number">0.0032672603337543927</span></span><br></pre></td></tr></tbody></table></figure><p>从输出结果可以看出，多项式阶数越高，拟合评分越高，均方根误差越小，拟合效果越好。</p><p>把不同模型的拟合效果在二维坐标上画出来，可以清楚地看到不同阶数的多项式的拟合效果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.figure <span class="keyword">import</span> SubplotParams</span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>),dpi=<span class="number">200</span>,subplotpars=SubplotParams(hspace=<span class="number">0.3</span>))</span><br><span class="line"><span class="keyword">for</span> i,r <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">    fig = plt.subplot(<span class="number">2</span>,<span class="number">2</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.xlim(-<span class="number">8</span>,<span class="number">8</span>)</span><br><span class="line">    plt.title(<span class="string">"LinearRegression degree={}"</span>.<span class="built_in">format</span>(r[<span class="string">"degree"</span>]))</span><br><span class="line">    plt.scatter(X,Y,s=<span class="number">5</span>,c=<span class="string">'b'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">    plt.plot(X,r[<span class="string">"model"</span>].predict(X),<span class="string">'r-'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>SubplotParam</code>s 调整了子图的竖直间距，并且使用 <code>subplot()</code> 函数把4个模型的拟合情况都画在同一个图形上。上述代码的输出结果如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630090937011.png" alt="image-20200630092742917"></p><p>在[-2π，2π]区间内，10阶多项式对数据拟合得非常好，我们可以试着画出这10阶模型在[-20,20]的区域内的曲线，观察一下该模型的曲线和正弦函数的差异。代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">6</span>),dpi=<span class="number">200</span>)</span><br><span class="line">X = np.linspace(-<span class="number">20</span>,<span class="number">20</span>,<span class="number">2000</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">Y = np.sin(X).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">model_10 = results[<span class="number">3</span>][<span class="string">"model"</span>]</span><br><span class="line">plt.xlim(-<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line">plt.ylim(-<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">plt.plot(X,Y,<span class="string">'b-'</span>)</span><br><span class="line">plt.plot(X,model_10.predict(X),<span class="string">'r-'</span>)</span><br><span class="line">dot1 = [-<span class="number">2</span>*np.pi,<span class="number">0</span>]</span><br><span class="line">dot2 = [<span class="number">2</span>*np.pi,<span class="number">0</span>]</span><br><span class="line">plt.scatter(dot1[<span class="number">0</span>],dot1[<span class="number">1</span>],s=<span class="number">50</span>,c=<span class="string">'r'</span>)</span><br><span class="line">plt.scatter(dot2[<span class="number">0</span>],dot2[<span class="number">1</span>],s=<span class="number">50</span>,c=<span class="string">'r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>上述代码的输出结果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630100257358.png" alt="image-20200630093109778"></p><p>从图中可以看出，10阶多项式模型只有在区间[-2π,2π]之间对正弦曲线拟合较好，在此区间以外，两者相差甚远。此案例告诉我们，每个模型都有自己的适用范围，在满足适用范围的基本前提下，要尽可能寻找拟合程度最高的模型来使用。</p><h2 id="示例2：预测房价"><a href="#示例2：预测房价" class="headerlink" title="示例2：预测房价"></a>示例2：预测房价</h2><p>本节使用 <code>scikit-learn</code> 自带的波士顿房价数据来训练模型，然后用模型来预测房价。</p><h3 id="输入特征"><a href="#输入特征" class="headerlink" title="输入特征"></a>输入特征</h3><p>房价和哪些因素有关？很多人可能对这个问题特别敏感，随时可以列出很多，如房子面子、房子地理位置、周边教育资源、周边商业资源、房子朝向、年限、小区情况等。在 <code>scikit-learn</code>的波士顿房价数据集里，它总共收集了13个特征，具体如下：</p><ul><li><p>CRIM：城镇人均犯罪率。</p></li><li><p>ZN：城镇超过25000平方英尺的住宅区域的占地比例。</p></li><li><p>INDUS：城镇非零售用地占地比例。</p></li><li><p>CHAS：是否靠近河边，1为靠近，0为远离。</p></li><li><p>NOX：一氧化氮浓度</p></li><li><p>RM：每套房产的平均房间个数。</p></li><li><p>AGE：在1940年之前就盖好，且业主自住的房子的比例。</p></li><li><p>DIS：与波士顿市中心的距离。</p></li><li><p>RAD：周边高速公路的便利性指数。</p></li><li><p>TAX：每10000美元的财产税率。</p></li><li><p>PTRATIO：小学老师的比例。</p></li><li><p>B：城镇黑人的比例。</p></li><li><p>LSTAT：地位较低的人口比例。</p></li></ul><p>从这些指标里可以看到中美指标的一些差异。当然，这个数据是在1993年之前收集的，可能和现在会有差异。不要小看了这些指标，实际上一个模型的好坏和输入特征的选择关系密切。大家可以思考一下，如果要在中国预测房价，你会收集哪些特征数据？这些特征数据的可获得性如何？收集成本多高？</p><p>先导入数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line">boston = load_boston()</span><br><span class="line">X = boston.data</span><br><span class="line">y = boston.target</span><br><span class="line"><span class="built_in">print</span>(X.shape)  <span class="comment"># (506, 13)</span></span><br></pre></td></tr></tbody></table></figure><p>表明这个数据集有506个样本，每个样本有13个特征。整个训练样本放在一个506*13的矩阵里。可以通过X[0]来查看一个样本数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(X[<span class="number">0</span>])</span><br><span class="line">array([<span class="number">6.320e-03</span>, <span class="number">1.800e+01</span>, <span class="number">2.310e+00</span>, <span class="number">0.000e+00</span>, <span class="number">5.380e-01</span>, <span class="number">6.575e+00</span>,</span><br><span class="line">       <span class="number">6.520e+01</span>, <span class="number">4.090e+00</span>, <span class="number">1.000e+00</span>, <span class="number">2.960e+02</span>, <span class="number">1.530e+01</span>, <span class="number">3.969e+02</span>,</span><br><span class="line">       <span class="number">4.980e+00</span>])</span><br></pre></td></tr></tbody></table></figure><p>还可以通过 <code>boston.features_names</code> 来查看这些特征的标签：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(boston.feature_names)</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([<span class="string">'CRIM'</span>, <span class="string">'ZN'</span>, <span class="string">'INDUS'</span>, <span class="string">'CHAS'</span>, <span class="string">'NOX'</span>, <span class="string">'RM'</span>, <span class="string">'AGE'</span>, <span class="string">'DIS'</span>, <span class="string">'RAD'</span>,</span><br><span class="line">       <span class="string">'TAX'</span>, <span class="string">'PTRATIO'</span>, <span class="string">'B'</span>, <span class="string">'LSTAT'</span>], dtype=<span class="string">'&lt;U7'</span>)</span><br></pre></td></tr></tbody></table></figure><p>我们可以把特征和数值对应起来，观察一下数据。</p><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><p>在 <code>scikit-learn</code> 里，<code>LinearRegression</code> 类实现了线性回归算法。在对模型进行训练之前，我们需要先把数据集分成两份，以便评估算法的准确性。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=<span class="number">0.2</span>,random_state=<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p>由于数据量比较小，我们只选了20%的样本来作为测试数据集。接着，训练模型并测试模型的准确性评分：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">start = time.process_time()</span><br><span class="line">model.fit(X_train,y_train)</span><br><span class="line">train_score = model.score(X_train,y_train)</span><br><span class="line">test_score = model.score(X_test,y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"elaspe:{0:.6f};train_score:{1:0.6f};test_score:{2:.6f}"</span></span><br><span class="line">      .<span class="built_in">format</span>(time.process_time()-start,train_score,test_score))</span><br></pre></td></tr></tbody></table></figure><p>我们顺便统计了模型的训练时间，除此之外，统计模型对训练样本的准确性得分（即对训练样本拟合的好坏程度）<code>train_score</code>，还测试了模型对测试样本的得分test_score。运行结果如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaspe:<span class="number">0.000000</span>;train_score:<span class="number">0.723941</span>;test_score:<span class="number">0.795262</span></span><br></pre></td></tr></tbody></table></figure><p>从得分情况来看，模型的拟合效果一般，还有没有办法来优化模型的拟合效果呢？</p><h3 id="模型优化-1"><a href="#模型优化-1" class="headerlink" title="模型优化"></a>模型优化</h3><p>首先观察一下数据，特征数据的范围相差比较大，最小的在$10^{-3}$级别，而最大的在$10^{2}$级别，看来我们需要先把数据进行归一化处理。归一化处理最简单的方式是，创建线性回归模型时增加normalize=True参数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = LinearRegression(normalize=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p>当然，数据归一化处理只会加快算法收敛速度，优化算法训练的效率，无法提升算法的准确性。</p><p>怎么样优化模型的准确性呢？我们回到训练分数上来，可以观察到模型针对训练样本的评分比较低（train_score:0.723941），即模型对训练样本的拟合成本比较高，这是一个典型的欠拟合现象。回忆我们之前介绍的优化欠拟合模型的方法，一是挖掘更多的输入特征，而是增加多项式特征。在我们这个例子里，通过使用低成本的方案——即增加多项式特征来看能否优化模型的性能。增加多项式特征，其实就是增加模型的复杂度。</p><p>我们使用之前创建多项式模型的函数 <code>polynomial_model</code>，接着，我们使用二阶多项式来拟合数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = polynomial_model(degree=<span class="number">2</span>)</span><br><span class="line">start = time.process_time()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">train_score = model.score(X_train, y_train)</span><br><span class="line">test_score = model.score(X_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"elaspe:{0:.6f};train_score:{1:0.6f};test_score:{2:.6f}"</span></span><br><span class="line">      .<span class="built_in">format</span>(time.process_time() - start, train_score, test_score))</span><br></pre></td></tr></tbody></table></figure><p>输出结果是：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaspe:<span class="number">0.078125</span>;train_score:<span class="number">0.930547</span>;test_score:<span class="number">0.860049</span></span><br></pre></td></tr></tbody></table></figure><p>训练样本分数和测试分数都提高了，看来模型确实得到了优化。我们可以把多项式改为3阶看一下效果：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elaspe:<span class="number">0.093750</span>;train_score:<span class="number">1.000000</span>;test_score:-<span class="number">105.548323</span></span><br></pre></td></tr></tbody></table></figure><p>改为3阶多项式后，针对训练样本的分数达到了1，而针对测试样本的分数确实负数，说明这个模型过拟合了。</p><p>思考：我们总共有13个输入特征，从一阶多项式变为二阶多项式，输入特征个数增加了多少个？<br> 参考：二阶多项式共有：13个单一的特征，$C_{13}^{2}=78$ 个两两配对的特征，13个各自平方的特征，共计104个特征。比一阶多项式的13个特征增加了91个特征。</p><h3 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h3><p>更好的方法是画出学习曲线，这样对模型的状态以及优化的方向就一目了然。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> plot_learning_curve</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> ShuffleSplit</span><br><span class="line">cv = ShuffleSplit(n_splits=<span class="number">10</span>,test_size=<span class="number">0.2</span>,random_state=<span class="number">0</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>,<span class="number">4</span>),dpi=<span class="number">200</span>)</span><br><span class="line">title = <span class="string">'Learning Curves (degree={0})'</span></span><br><span class="line">degrees = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">start = time.process_time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(degrees)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>,<span class="number">3</span>,i+<span class="number">1</span>)</span><br><span class="line">    plot_learning_curve(plt,polynomial_model(degrees[i]),title.<span class="built_in">format</span>(degrees[i]),</span><br><span class="line">                        X,y,ylim=(<span class="number">0.01</span>,<span class="number">1.01</span>),cv=cv)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'elaspe:{0:.6f}'</span>.<span class="built_in">format</span>(time.process_time()-start))</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200630092742917.png" alt="image-20200630100257358"></p><p>从学习曲线中可以看出，一阶多项式欠拟合，因为针对训练样本的分数比较低；而三阶多项式过拟合，因为针对训练样本的分数达到1，却看不到交叉验证数据集的分数。针对二阶多项式拟合的情况，虽然比一阶多项式的效果好，但从图中可以明显地看出来，针对训练数据集的分数和针对交叉验证数据集的分数之间的间隔比较大，这说明训练样本数量不够，我们应该去采集更多的数据，以提高模型的准确性。</p><h2 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h2><p>本节内容涉及到较多的数学知识，特别是矩阵和偏导数运算法则。如果阅读起来有困难，可以先跳过。如果有一定数学基础，这些知识对理解算法的实现细节及算法的效率有较大的帮助。</p><h3 id="公式推导的数学基础"><a href="#公式推导的数学基础" class="headerlink" title="公式推导的数学基础"></a>公式推导的数学基础</h3><p>AI的数学基础最主要的是高等数学、线性代数、概率论与数理统计这三门课程。下面是简易的入门文章供参考</p><ul><li>高等数学 <a href="https://zhuanlan.zhihu.com/p/36311622">https://zhuanlan.zhihu.com/p/36311622</a></li><li>线性代数 <a href="https://zhuanlan.zhihu.com/p/36584206">https://zhuanlan.zhihu.com/p/36584206</a></li><li>概率论与数理统计 <a href="https://zhuanlan.zhihu.com/p/36584335">https://zhuanlan.zhihu.com/p/36584335</a></li></ul><h3 id="随机梯度下降算法"><a href="#随机梯度下降算法" class="headerlink" title="随机梯度下降算法"></a>随机梯度下降算法</h3><p>本章介绍的梯度下降算法迭代公式称为批量梯度下降算法（Batch Gradient Descent，简称BGD），用它对参数进行一次迭代运算，需要遍历所有的训练数据集。当训练数据集比较大时，其算法的效率会比较低。考虑另外一个算法：<br>$$<br>\theta_{j}=\theta_{j}-\alpha\left(\left(h\left(x^{(i)}\right)-y^{(i)}\right) x_{j}^{(i)}\right)<br>$$<br> 这个算法的关键点是把累加器去掉，不去遍历所有的数据集，而是改成每次随机地从训练数据集中取一个数据进行参数迭代计算，这就是随机梯度下降算法（Stochastic Gradient Descent，简称SGD）。随机梯度下降算法可以大大提高模型训练的效率。</p><h3 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h3><p>梯度下降算法通过不断地迭代，从而不停地逼近成本函数的最小值来求解模型的参数。另外一个方法是直接计算成本函数的微分，令微分算子为0，求解这个方程，即可得到线性回归的解。<br> 线性回归算法的损失函数：<br>$$<br>J(\theta)=\frac{1}{2 m} \sum_{i=0}^{n}\left(h_{\theta}\left(x^{(i)}\right)-y^{(i)}\right)^{2}<br>$$<br>成本函数的“斜率”为0的点，即为模型参数的解。令$\frac{\partial}{\partial \theta} J(\theta)=0$，求解这个方程最终可以得到模型参数：<br>$$<br>\theta=\left(X^{T} X\right)^{-1} X^{T} y<br>$$<br>这就是我们的正规方程。它通过矩阵运算，直接从训练样本里求出参数θ的值。其中X为训练样本的矩阵形式，它是m×n的矩阵，y是训练样本的结果数据，它是个m维列向量。方程求解过程可参阅<a href="https://baike.baidu.com/item/%E6%AD%A3%E8%A7%84%E6%96%B9%E7%A8%8B/10001812?fr=aladdin">百度百科</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列二：K-近邻</title>
      <link href="/2020/06/29/scikit-learn-xi-lie-er-k-jin-lin/"/>
      <url>/2020/06/29/scikit-learn-xi-lie-er-k-jin-lin/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址传送门，欢迎-star-和-fork-！"><a href="#项目地址传送门，欢迎-star-和-fork-！" class="headerlink" title="项目地址传送门，欢迎 star 和 fork ！"></a>项目地址<a href="https://github.com/DongZhouGu/scikit-learn-ml">传送门</a>，欢迎 star 和 fork ！</h2><h2 id="KNN-概述"><a href="#KNN-概述" class="headerlink" title="KNN 概述"></a>KNN 概述</h2><p>KNN（K-Nearest Neighbor，K-近邻算法）算法是一种<strong>有监督</strong>的机器学习算法，可以解决分类问题，也可以解决回归问题。</p><blockquote><p><strong>一句话总结: 近朱者赤近墨者黑！</strong> </p></blockquote><p>k -近邻算法的输入为实例的特征向量，对应于特征空间的点；输出为实例的类别，可以取多类。k 近邻算法假设给定一个训练数据集，其中的实例类别已定。分类时，对新的实例，根据其 k 个最近邻的训练实例的类别，通过多数表决等方式进行预测。因此，k近邻算法不具有显式的学习过程。</p><h2 id="KNN算法原理"><a href="#KNN算法原理" class="headerlink" title="KNN算法原理"></a>KNN算法原理</h2><p>K-近邻算法的核心思想是未标记样本的类别，由距离其最近的 K 个邻居投票来决定。</p><p>假设，我们有一个已经标记的数据集，即已经知道了数据集中每个样本所属的类别。此时，有一个未标记的数据样本，我们的任务是预测出这个数据样本所属的类别。<strong>K-近邻算法的原理是，计算待标记的数据样本和数据集中每个样本的距离，取距离最近的K个样本。</strong>待标记的数据样本所属的类别，就由这K个距离最近的样本投票产生。</p><blockquote><p>KNN工作原理</p></blockquote><p>假设X_test为待标记的数据样本，X_train为已标记的数据集，算法原理的伪代码如下：</p><ul><li>遍历 X_train 中的所有样本，计算每个样本与 X_test 的距离，并把距离保存在 Distance 数组中。</li><li>对 Distance 数组进行排序，取距离最近的K个点，记为 X_knn 。</li><li>在 X_knn 中统计每个类别的个数，即 class0 在 X_knn 中有几个样本，class1 在 X_knn 中有几个样本等。</li><li>待标记样本的类别，就是在 X_knn 中样本数最多的那个类别。</li></ul><blockquote><p>KNN算法优缺点</p></blockquote><ul><li>优点：准确度高，对异常值和噪声有较高的容忍度。</li><li>缺点：计算复杂度高、空间复杂度高，从算法原理可以看出，每次对一个未标记样本进行分类时，都需要全部计算一遍距离。</li></ul><blockquote><p>KNN算法参数</p></blockquote><p>其算法参数是K，参数选择需要根据数据来决定。K值越大，模型的偏差越大，对噪声数据越不敏感，当K值很大时，可能造成模型欠拟合；K值越小，模型的方差就会越大，当K值太小，就会造成模型过拟合。</p><blockquote><p>KNN算法变种</p></blockquote><p>K-近邻算法有一些变种，其中之一就是可以增加邻居的权重。默认情况下，在计算距离时，都是使用相同的权重。实际上，我们可以针对不同的邻居指定不同的权重，如距离越近权重越高。这个可以通过指定算法的weights参数来实现。</p><p>另外一个变种是，使用一定半径内的点取代距离最近的K个点。在 <code>scikit-learn</code> 里，<code>RadiusNeighborsClassifier</code> 类实现了这个算法的变种。当数据采样不均匀时，该算法变种可以取得更好的性能。</p><h2 id="KNN-项目案例"><a href="#KNN-项目案例" class="headerlink" title="KNN 项目案例"></a>KNN 项目案例</h2><h3 id="案例1-使用KNN算法进行分类"><a href="#案例1-使用KNN算法进行分类" class="headerlink" title="案例1: 使用KNN算法进行分类"></a>案例1: 使用KNN算法进行分类</h3><p>完整代码地址：</p><p>在 <code>scikit-learn</code>里，使用K-近邻算法进行分类处理的是 <code>sklearn.neightbors.KNeightborsClassifier</code> 类。</p><h4 id="rainbow-生成数据集"><a href="#rainbow-生成数据集" class="headerlink" title=":rainbow:   生成数据集"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>   生成数据集</h4><p>我们使用 <code>sklearn.datasets.samples_generator</code> 包下的 <code>make_blobs()</code> 函数来生成数据集，这里生成60个训练样本，这些样本分布在 <code>centers</code> 参数指定的中心点的周围。<code>cluster_std</code> 是标准差，用来指明生成的点分布的松散程度。生成的训练数据集放在变量X里面，数据集的类别标记放在 y 里面。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_blobs</span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">centers = [[-<span class="number">2</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">4</span>]]</span><br><span class="line">X,y = make_blobs(n_samples=<span class="number">60</span>,centers=centers,random_state=<span class="number">0</span>,cluster_std=<span class="number">0.60</span>)</span><br></pre></td></tr></tbody></table></figure><blockquote><p>X:  [[ 1.59652373  1.7842681 ] ,[-1.08033247 2.88161526],…]共60个点的横纵坐标</p><p>y: [1 0 0 1 0 1 1 0 2…1 2 0 1] 共60个点的类别，用0，1，2分别表示以哪个中心聚合</p></blockquote><p>使用 <code>matplotlib</code> 库，它可以很容易地把生成的点画出来：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>),dpi=<span class="number">144</span>)</span><br><span class="line">c = np.array(centers)</span><br><span class="line"><span class="comment"># cmap就是指matplotlib.colors.Colormap,一个包含三列矩阵的色彩映射表</span></span><br><span class="line"><span class="comment"># 使用c和cmap来映射颜色，s为形状的大小</span></span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>],X[:,<span class="number">1</span>],c=y,s=<span class="number">100</span>,cmap=<span class="string">'cool'</span>)</span><br><span class="line">plt.scatter(c[:,<span class="number">0</span>],c[:,<span class="number">1</span>],s=<span class="number">100</span>,marker=<span class="string">'*'</span>,c=<span class="string">'black'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200628191906466.png"><p>这些点的分布情况在坐标轴上一目了然，其中五角星的点即各个类别的中心点。</p><h4 id="rainbow-训练算法"><a href="#rainbow-训练算法" class="headerlink" title=":rainbow: 训练算法"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span> 训练算法</h4><p>使用 <code>KNeighborsClassifier</code> 来对算法进行训练，我们选择的参数是 <code>K=5</code></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">k = <span class="number">5</span></span><br><span class="line">clf = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">clf.fit(X,y)</span><br></pre></td></tr></tbody></table></figure><p><code>KNeighborsClassifier</code>的参数细节为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsClassifier(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">           metric_params=<span class="literal">None</span>, n_jobs=<span class="number">1</span>, n_neighbors=<span class="number">5</span>, p=<span class="number">2</span>,</span><br><span class="line">           weights=<span class="string">'uniform'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="rainbow-对样本进行预测"><a href="#rainbow-对样本进行预测" class="headerlink" title=":rainbow:  对样本进行预测"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>  对样本进行预测</h4><p>我们要预测的样本是[0,2]，使用 <code>kneighbors()</code> 方法，把这个样本周围距离最近的5个点取出来。取出来的点是训练样本X里的索引，从0开始计算。<br> 注意：<code>kneighbors()</code>接收一个二维数组作为参数，所以 <code>X_sample</code> 需要变成二维。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X_sample = [<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">X_sample = np.array(X_sample).reshape(<span class="number">1</span>, -<span class="number">1</span>)  <span class="comment">#[[0 2]]</span></span><br><span class="line">y_sample = clf.predict(X_sample)</span><br><span class="line">neighbors = clf.kneighbors(X_sample,return_distance=<span class="literal">False</span>) <span class="comment">#[[16 20 48  6 23]]</span></span><br></pre></td></tr></tbody></table></figure><h4 id="rainbow-标记最近的5个点"><a href="#rainbow-标记最近的5个点" class="headerlink" title=":rainbow:  标记最近的5个点"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>  标记最近的5个点</h4><p>把待预测的样本以及和其最近的5个点标记出来</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, s=<span class="number">100</span>, cmap=<span class="string">'cool'</span>)    <span class="comment"># 样本</span></span><br><span class="line">plt.scatter(c[:, <span class="number">0</span>], c[:, <span class="number">1</span>], s=<span class="number">100</span>, marker=<span class="string">'^'</span>, c=<span class="string">'k'</span>)   <span class="comment"># 中心点</span></span><br><span class="line">plt.scatter(X_sample[<span class="number">0</span>][<span class="number">0</span>],X_sample[<span class="number">0</span>][<span class="number">1</span>],marker=<span class="string">"x"</span>, s=<span class="number">100</span>, cmap=<span class="string">'cool'</span>)  <span class="comment">#待预测的点</span></span><br><span class="line"><span class="comment">#预测点与距离最近的5个样本的连线</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> neighbors[<span class="number">0</span>]:</span><br><span class="line">    plt.plot([X[i][<span class="number">0</span>],X_sample[<span class="number">0</span>][<span class="number">0</span>]],[X[i][<span class="number">1</span>],X_sample[<span class="number">0</span>][<span class="number">1</span>]],<span class="string">'k--'</span>,linewidth=<span class="number">0.6</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200628204257514.png" alt=""></p><h3 id="案例2-使用KNN算法进行回归拟合"><a href="#案例2-使用KNN算法进行回归拟合" class="headerlink" title="案例2: 使用KNN算法进行回归拟合"></a>案例2: 使用KNN算法进行回归拟合</h3><p>分类问题的预测值是离散的，我们也可以使用 KNN 算法对连续区间内的数值进行预测，即进行回归拟合。在<code>scikit-learn</code>里面，使用KNN算法进行回归拟合的实现是 <code>sklearn.neighbors.KNeighborsRegressor</code> 类。</p><h4 id="rainbow-生成数据集-1"><a href="#rainbow-生成数据集-1" class="headerlink" title=":rainbow:  生成数据集"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>  生成数据集</h4><p>在余弦曲线的基础上加入了噪声：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n_dots = <span class="number">40</span></span><br><span class="line"><span class="comment"># 生成40行1列的服从“0~5”均匀分布的随机样本</span></span><br><span class="line">X = <span class="number">5</span> * np.random.rand(n_dots, <span class="number">1</span>)</span><br><span class="line">y = np.cos(X).flatten()</span><br><span class="line"><span class="comment"># 生成40行1列的服从“-0.1~0.1”均匀分布的随机误差</span></span><br><span class="line">y += <span class="number">0.2</span> * np.random.rand(n_dots) - <span class="number">0.1</span></span><br></pre></td></tr></tbody></table></figure><h4 id="rainbow-训练算法-1"><a href="#rainbow-训练算法-1" class="headerlink" title=":rainbow:  训练算法"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>  训练算法</h4><p>使用 <code>KNeighborsRegressor</code> 来训练模型：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsRegressor</span><br><span class="line">k = <span class="number">5</span></span><br><span class="line">knn = KNeighborsRegressor(k)</span><br><span class="line">knn.fit(X,y)</span><br></pre></td></tr></tbody></table></figure><p><code>KNeighborsRegressor</code>方法的参数细节为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KNeighborsRegressor(algorithm=<span class="string">'auto'</span>, leaf_size=<span class="number">30</span>, metric=<span class="string">'minkowski'</span>,</span><br><span class="line">          metric_params=<span class="literal">None</span>, n_jobs=<span class="number">1</span>, n_neighbors=<span class="number">5</span>, p=<span class="number">2</span>,</span><br><span class="line">          weights=<span class="string">'uniform'</span>)</span><br></pre></td></tr></tbody></table></figure><p>可以使用 <code>score()</code>方法 计算拟合曲线对训练样本的拟合准确性：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">knn.score(X,y)</span><br><span class="line"><span class="number">0.9596828473009764</span></span><br></pre></td></tr></tbody></table></figure><h4 id="rainbow-回归拟合"><a href="#rainbow-回归拟合" class="headerlink" title=":rainbow:  回归拟合"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>  回归拟合</h4><p> 一个常用的方法是，在X轴上的指定区域生成足够多的点，针对这些足够密集的点，使用训练出来的模型进行预测，得到预测值y_pred，然后在坐标轴上，把所有的预测点连接起来，这样就画出了拟合曲线。<br> 生成足够密集的点并进行预测：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T = np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">500</span>)[:,np.newaxis]</span><br><span class="line">y_pred = knn.predict(T)</span><br></pre></td></tr></tbody></table></figure><p>把这些预测点连起来，构成拟合曲线：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>),dpi=<span class="number">144</span>)</span><br><span class="line">plt.scatter(X,y,c=<span class="string">'g'</span>,label=<span class="string">'data'</span>,s=<span class="number">100</span>)</span><br><span class="line">plt.plot(T,y_pred,c=<span class="string">'k'</span>,label=<span class="string">'prediction'</span>,lw=<span class="number">4</span>)</span><br><span class="line">plt.axis(<span class="string">'tight'</span>)</span><br><span class="line">plt.title(<span class="string">'KNeighborsRegressor (k = %i)'</span> % k)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p>最终生成的拟合曲线和训练样本数据如图，拟合出来确实和 cos 曲线相似。</p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200628223010274.png" style="zoom: 67%;"><h3 id="案例3-使用KNN算法预测糖尿病"><a href="#案例3-使用KNN算法预测糖尿病" class="headerlink" title="案例3: 使用KNN算法预测糖尿病"></a>案例3: 使用KNN算法预测糖尿病</h3><p>本节使用KNN算法及其变种，对Pima印第安人的糖尿病进行预测。数据来源<a href="">kaggle.com</a>大家可以自己去下载。也可以使用 <a href="./pima-indians-diabetes/diabetes.csv">仓库文件</a>。</p><h4 id="rainbow-加载数据集"><a href="#rainbow-加载数据集" class="headerlink" title=":rainbow:加载数据集"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>加载数据集</h4><p>使用Pandas加载数据：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">'./pima-indians-diabetes/diabetes.csv'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'dataset shape {}'</span>.<span class="built_in">format</span>(data.shape))</span><br><span class="line"><span class="built_in">print</span>(data.head())</span><br></pre></td></tr></tbody></table></figure><p>输出如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataset shape (<span class="number">768</span>, <span class="number">9</span>)</span><br><span class="line">Out[<span class="number">23</span>]:</span><br><span class="line">Pregnancies Glucose BloodPressure   SkinThickness   Insulin BMI DiabetesPedigreeFunction    Age Outcome</span><br><span class="line"><span class="number">0</span>   <span class="number">6</span>   <span class="number">148</span> <span class="number">72</span>  <span class="number">35</span>  <span class="number">0</span>   <span class="number">33.6</span>    <span class="number">0.627</span>   <span class="number">50</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   <span class="number">1</span>   <span class="number">85</span>  <span class="number">66</span>  <span class="number">29</span>  <span class="number">0</span>   <span class="number">26.6</span>    <span class="number">0.351</span>   <span class="number">31</span>  <span class="number">0</span></span><br><span class="line"><span class="number">2</span>   <span class="number">8</span>   <span class="number">183</span> <span class="number">64</span>  <span class="number">0</span>   <span class="number">0</span>   <span class="number">23.3</span>    <span class="number">0.672</span>   <span class="number">32</span>  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   <span class="number">1</span>   <span class="number">89</span>  <span class="number">66</span>  <span class="number">23</span>  <span class="number">94</span>  <span class="number">28.1</span>    <span class="number">0.167</span>   <span class="number">21</span>  <span class="number">0</span></span><br><span class="line"><span class="number">4</span>   <span class="number">0</span>   <span class="number">137</span> <span class="number">40</span>  <span class="number">35</span>  <span class="number">168</span> <span class="number">43.1</span>    <span class="number">2.288</span>   <span class="number">33</span>  <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>从打印出的信息可以看到，这个数据集一共有 768 个样本、8 个特征、1 个标签：</p><p><code>Pregnancies</code>：怀孕的次数</p><p><code>Glucose</code>：血浆葡萄糖浓度，采用 2 小时口服葡萄糖耐量试验测得</p><p><code>BloodPressure</code>：舒张压（毫米汞柱）</p><p><code>SkinThickness</code>：肱三头肌皮肤褶皱厚度（毫米）</p><p><code>Insulin</code>：两个小时血清胰岛素（ μU /毫升）</p><p><code>BMI</code>：身体质量指数，体重除以身高的平方</p><p><code>DiabetesPedigreeFunction</code>：糖尿病血统指数，糖尿病和家庭遗传相关</p><p><code>Age</code>：年龄</p><p><code>Outcome</code>：0表示没有糖尿病，1表示有糖尿病</p><p> 我们可以进一步观察数据集里的阳性和阴性样本的个数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.groupby(<span class="string">'Outcome'</span>).size()</span><br></pre></td></tr></tbody></table></figure><p>输出为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Outcome</span><br><span class="line"><span class="number">0</span>    <span class="number">500</span></span><br><span class="line"><span class="number">1</span>    <span class="number">268</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></tbody></table></figure><p>其中，阴性样本500例，阳性样本268例。</p><h4 id="rainbow-处理数据集"><a href="#rainbow-处理数据集" class="headerlink" title=":rainbow: 处理数据集"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span> 处理数据集</h4><p> 接着需要对数据集进行简单处理，把8个特征值分离出来，作为训练数据集，把Outcome列分离出来作为目标值。然后，把数据集划分为训练数据集和测试数据集。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">X = data.iloc[:,:<span class="number">8</span>]</span><br><span class="line">Y = data.iloc[:,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="built_in">print</span>(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)</span><br></pre></td></tr></tbody></table></figure><p>输出：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">614</span>, <span class="number">8</span>) (<span class="number">154</span>, <span class="number">8</span>) (<span class="number">614</span>,) (<span class="number">154</span>,)</span><br></pre></td></tr></tbody></table></figure><h4 id="rainbow-模型比较"><a href="#rainbow-模型比较" class="headerlink" title=":rainbow: 模型比较"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span> 模型比较</h4><p>分别使用普通的KNN算法、带权重的KNN算法和指定半径的KNN算法对数据集进行拟合并计算评分：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier, RadiusNeighborsClassifier</span><br><span class="line"></span><br><span class="line">models = []</span><br><span class="line">models.append((<span class="string">"KNN"</span>, KNeighborsClassifier(n_neighbors=<span class="number">2</span>)))</span><br><span class="line">models.append((<span class="string">"KNN with weights"</span>, KNeighborsClassifier(</span><br><span class="line">    n_neighbors=<span class="number">2</span>, weights=<span class="string">"distance"</span>)))</span><br><span class="line">models.append((<span class="string">"Radius Neighbors"</span>, RadiusNeighborsClassifier(</span><br><span class="line">    n_neighbors=<span class="number">2</span>, radius=<span class="number">500.0</span>)))</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> name, model <span class="keyword">in</span> models:</span><br><span class="line">    model.fit(X_train, Y_train)</span><br><span class="line">    results.append((name, model.score(X_test, Y_test)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name: {}; score: {}"</span>.<span class="built_in">format</span>(results[i][<span class="number">0</span>],results[i][<span class="number">1</span>]))</span><br></pre></td></tr></tbody></table></figure><p>三种算法的性能如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: KNN; score: <span class="number">0.7467532467532467</span></span><br><span class="line">name: KNN <span class="keyword">with</span> weights; score: <span class="number">0.6818181818181818</span></span><br><span class="line">name: Radius Neighbors; score: <span class="number">0.6558441558441559</span></span><br></pre></td></tr></tbody></table></figure><p>带权重的KNN算法，我们选择了距离越近、权重越高。指定半径的KNN算法的半径选择了500。从上面的输出结果可以看出，普通的KNN算法性能最好。问题来了，这个判断准确么？答案是不准确。因为我们的训练样本和测试样本是随机分配的，不同的训练样本和测试样本组合可能导致计算出来的算法准确性是有差异的。我们可以试着多次运行上面的代码，观察输出值是否有变化。</p><p>怎么样更准确地对比算法准确性呢？一个方法是，多次随机分配训练数据集和交叉验证数据集，然后求模型准确性评分的平均值。所幸，我们不需要从头实现这个过程，<code>scikit-learn</code> 提供了 <code>KFold</code> 和 <code>cross_val_score()</code>函数来处理这种问题：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> KFold</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> name, model <span class="keyword">in</span> models:</span><br><span class="line">    kfold = KFold(n_splits=<span class="number">10</span>)</span><br><span class="line">    cv_result = cross_val_score(model, X, Y, cv=kfold)</span><br><span class="line">    results.append((name, cv_result))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name: {}; cross val score: {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">        results[i][<span class="number">0</span>],results[i][<span class="number">1</span>].mean()))</span><br></pre></td></tr></tbody></table></figure><p>上述代码中，我们通过KFold把数据集分成10份，其中1份会作为交叉验证数据集来计算模型准确性，剩余的9份作为训练数据集。cross_val_score()函数总共计算出10次不同训练数据集和交叉验证数据集组合得到的模型准确性评分，最后求平均值。这样的评价结果相对更准确一些。<br> 输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: KNN; cross val score: <span class="number">0.7147641831852358</span></span><br><span class="line">name: KNN <span class="keyword">with</span> weights; cross val score: <span class="number">0.6770505809979495</span></span><br><span class="line">name: Radius Neighbors; cross val score: <span class="number">0.6497265892002735</span></span><br></pre></td></tr></tbody></table></figure><h4 id="rainbow-模型训练及分析"><a href="#rainbow-模型训练及分析" class="headerlink" title=":rainbow:模型训练及分析"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>模型训练及分析</h4><p>通过上面的对比来看，普通的KNN算法性能更优一些。接下来，我们就使用普通的KNN算法模型对数据集进行训练，并查看对训练样本的拟合情况以及对测试样本的预测准确性情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">2</span>)</span><br><span class="line">knn.fit(X_train, Y_train)</span><br><span class="line">train_score = knn.score(X_train, Y_train)</span><br><span class="line">test_score = knn.score(X_test, Y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"train score: {}\ntest score: {}"</span>.<span class="built_in">format</span>(train_score, test_score))</span><br></pre></td></tr></tbody></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train score: <span class="number">0.8387622149837134</span></span><br><span class="line">test score: <span class="number">0.7337662337662337</span></span><br></pre></td></tr></tbody></table></figure><p>从输出中可以看到两个问题。一是对训练样本的拟合情况不佳，评分才0.82多，这说明算法模型太简单了，无法很好地拟合训练样本。二是模型的准确性欠佳，不到74%的预测准确性。我们可以进一步画出学习曲线，证实结论。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> ShuffleSplit</span><br><span class="line"><span class="keyword">from</span> common.utils <span class="keyword">import</span> plot_learning_curve</span><br><span class="line">knn = KNeighborsClassifier(n_neighbors=<span class="number">2</span>)</span><br><span class="line">cv = ShuffleSplit(n_splits=<span class="number">10</span>, test_size=<span class="number">0.2</span>, random_state=<span class="number">0</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plot_learning_curve(plt, knn, <span class="string">"Learn Curve for KNN Diabetes"</span>, </span><br><span class="line">                    X, Y, ylim=(<span class="number">0.0</span>, <span class="number">1.01</span>), cv=cv)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200629101150911.png" style="zoom:67%;"><p>从图中可以看出来，训练样本评分较低，且测试样本与训练样本距离较大，这是典型的欠拟合现象。KNN算法没有更好的措施来解决欠拟合问题，我们学完本书的其他章节后，可以试着用其他算法（如逻辑回归算法、支持向量机等）来对比不同模型的准确性情况。</p><h4 id="rainbow-特征选择及数据可视化"><a href="#rainbow-特征选择及数据可视化" class="headerlink" title=":rainbow:特征选择及数据可视化"></a><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8">🌈</span>特征选择及数据可视化</h4><p>那有没有直观的方法，来揭示出为什么KNN算法不是针对这一问题的好模型？一个办法是把数据画出来，可是我们有8个特征，无法在这么高的维度里画出数据，并直观地观察。一个解决办法是特征选择，即只选择2个与输出值相关性最大的特征，这样就可以在二维平面上画出输入特征值与输出值的关系了。</p><p><code>scikit-learn</code>在 <code>sklearn.feature_selection</code> 包里提供了丰富的特征选择方法。我们使用 <code>SelectKBest</code> 来选择相关性最大的两个特征：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line">selector = SelectKBest(k=<span class="number">2</span>)</span><br><span class="line">X_new = selector.fit_transform(X, Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'X_new.shape {}'</span>.<span class="built_in">format</span>(X_new.shape))</span><br></pre></td></tr></tbody></table></figure><p>把相关性最大的两个特征放在X_new变量里，输出结果为：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X_new.shape (<span class="number">768</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>我们可能会好奇，相关性最大的特征到底是哪两个？对比一下本节开头的数据即可知道，它们分别是Glucose（血糖浓度）和BMI（身体质量指数）。血糖浓度和糖尿病的关系自不必说，身体质量指数是反映肥胖程度的指标，从业务角度来看，我们选择出来的2个相关性最高的特征还算合理。那么 <code>SelectKBest</code> 到底使用什么神奇的方法选择出了这两个相关性最高的特征呢？详情参考下一节。</p><p>我们来看看，如果只使用这2个相关性最高的特征的话，3种不同的KNN算法哪个准确性更高：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> name, model <span class="keyword">in</span> models:</span><br><span class="line">    kfold = KFold(n_splits=<span class="number">10</span>)</span><br><span class="line">    cv_result = cross_val_score(model, X_new, Y, cv=kfold)</span><br><span class="line">    results.append((name, cv_result))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(results)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name: {}; cross val score: {}"</span>.<span class="built_in">format</span>(</span><br><span class="line">        results[i][<span class="number">0</span>],results[i][<span class="number">1</span>].mean()))</span><br></pre></td></tr></tbody></table></figure><p>这次使用X_new作为输入，输出如下</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: KNN; cross val score: <span class="number">0.725205058099795</span></span><br><span class="line">name: KNN <span class="keyword">with</span> weights; cross val score: <span class="number">0.6900375939849623</span></span><br><span class="line">name: Radius Neighbors; cross val score: <span class="number">0.6510252904989747</span></span><br></pre></td></tr></tbody></table></figure><p>从输出可以看出来，还是普通的KNN模型准确性较高，其准确性也达到了将近 73 %，与所有特征拿来一块儿训练的准确性差不多。这也侧面证明了 <code>SelectKBest</code> 特征选择的有效性。</p><p>回到目标上来，我们是想看看为什么KNN无法很好地拟合训练样本。现在我们只有 2 个特征，可以很方便地在二维坐标上画出所有的训练样本，观察这些数据的分布情况：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.ylabel(<span class="string">"BMI"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Glucose"</span>)</span><br><span class="line">plt.scatter(X_new[Y==<span class="number">0</span>][:, <span class="number">0</span>], X_new[Y==<span class="number">0</span>][:, <span class="number">1</span>], c=<span class="string">'r'</span>, s=<span class="number">20</span>, marker=<span class="string">'o'</span>);   <span class="comment">#画出样本</span></span><br><span class="line">plt.scatter(X_new[Y==<span class="number">1</span>][:, <span class="number">0</span>], X_new[Y==<span class="number">1</span>][:, <span class="number">1</span>], c=<span class="string">'g'</span>, s=<span class="number">20</span>, marker=<span class="string">'^'</span>);   <span class="comment">#画出样本</span></span><br></pre></td></tr></tbody></table></figure><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/image-20200629102028938.png" style="zoom:67%;"><p>横坐标是血糖值 Glucose，纵坐标是BMI值，反映身体肥胖情况。从图中可以看出，在中间数据集密集的区域，阳性样本和阴性样本几乎重叠在一起了。假设现在有一个待预测的样本在中间密集区域，它的阳性邻居多还是阴性邻居多呢？这真的很难说。这样就可以直观地看到，KNN算法在这个糖尿病预测问题上，无法达到很高的预测准确性。</p><h3 id="拓展阅读"><a href="#拓展阅读" class="headerlink" title="拓展阅读"></a>拓展阅读</h3><p>这里再继续再介绍一下特征选择时，计算相关性大小的 <code>SelectKBest()</code> 函数背后的统计学知识。</p><h4 id="如何提高KNN算法的运算效率"><a href="#如何提高KNN算法的运算效率" class="headerlink" title="如何提高KNN算法的运算效率"></a>如何提高KNN算法的运算效率</h4><p>根据算法原理，每次需要预测一个点时，我们都需要计算训练数据集里每个点到这个点的距离，然后选出距离最近的k个点进行投票。当数据集很大时，这个计算成本非常高。针对$N$个样本，$D$个特征的数据集，其算法复杂度为$O(DN^2)$。</p><p>为了解决这个问题，一种叫<code>K-D Tree</code> 的数据结构被发明出来。为了避免每次都重新计算一遍距离，算法会把距离信息保存在一棵树里，这样在计算之前从树里查询距离信息，尽量避免重新计算。其基本原理是，如果A和B距离很远，B和C距离很近，那么A和C的距离也很远。有了这个信息，就可以在合适的时候跳过距离远的点。这样优化后的算法复杂度可降低到$O(DNlog(N))$。感兴趣的读者可参阅论文：Bentley, J.L., Communications of the ACM (1975)。</p><p>1989年，另外一种称为<code>Ball Tree</code>的算法，在<code>K-D Tree</code>的基础上对性能进一步进行了优化。感兴趣的读者可以搜索Five balltree construction algorithms来了解详细的算法信息。</p><h4 id="相关性测试"><a href="#相关性测试" class="headerlink" title="相关性测试"></a>相关性测试</h4><p>先通过一个简单的例子来看假设检验问题，即判断假设的结论是否成立或成立的概率有多高。假设，在一个城市随机采样到程序员和性别的关系的数据：</p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-0c82f9f4005936fa.png" style="zoom:50%;"><p>假设，我们的结论是程序员和性别无关，这个假设称为原假设（null hypothesis）。问：通过我们随机采样观测到的数据，原假设是否成立，或者说原假设成立的概率有多高？</p><p><code>卡方检验（chi-squared test）</code>是检测假设成立与否的一个常用的工具。它的计算公式是：</p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-3a52b648ce9e2196.png" style="zoom:50%;"><p>其中，卡方检验的值记为 ,  $O$ 是观测值，$E$  是期望值。针对我们的例子，如果原假设成立，即程序员职业和性别无关，那么我们期望的男程序员数量应该为(14/489) * 242=6.928，女程序员数量应该为(14/489) * 247=7.072，同理可得到我们的期望值如下：</p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-9f2c88dc6a7eeb66.png" style="zoom:50%;"><p> 根据卡方检验的公式，可以算出卡方值为：</p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/17634123-bf0dbd2fd6c8db0c.png" style="zoom:50%;"><p> 算出卡方值后，怎么判断原假设成立的概率是多少呢？这里还涉及到自由度和卡方分布的概念。简单地讲，自由度是$(r-1)×(c-1)$，其中 r 是行数，c 是列数，针对我们的问题，其自由度为1。卡方分布是指，若n个相互独立的随机变量均服从正态分布，则这 n 个随机变量的平方和构成一新的随机变量，其分布规律称为卡方分布。卡方分布的密度函数和自由度相关，知道了自由度和目标概率，我们就能求出卡方值。</p><p>针对我们的问题，可以查表得到，自由度为1的卡方分布，在99%处的卡方值为6.63。我们计算出来的卡方值为7.670。由于7.67&gt;6.63，故有99%的把握可以推翻原假设。换个说法，如果原假设成立，即程序员职业和性别无关，那么我们随机采样到的数据出现的概率将低于1%。我们可以搜索<code>“卡方表”</code>或<code>“Chi Squared Table”</code>找到不同自由度对应的卡方值。</p><p>卡方值的大小可以反映变量与目标值的相关性，值越大，相关性越大。利用这一特性，<code>SelectKBest()</code> 函数就可以计算不同特征的卡方值来判断特征与输出值的相关性大小，从而完成特征选择。在<code>scikit-learn</code>里，计算卡方值的函数是 <code>sklearn.feature_selection.chi2()</code>。除了卡方检验外，还有<code>F值检验</code>等算法，也可以用来评估特征与目标值的相关性。<code>SelectKBest</code> 默认使用的就是F值检验算法，在<code>scikit-learn</code>里，使用<code>sklearn.feature_selection.f_classif</code>来计算F值。关于F值相关的资料，感兴趣的读者可以在英文版维基百科上搜索<code>“Fisher’sexact test”</code>，了解更多信息。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scikit-learn系列一：机器学习基础</title>
      <link href="/2020/06/28/scikit-learn-xi-lie-yi-ji-qi-xue-xi-ji-chu/"/>
      <url>/2020/06/28/scikit-learn-xi-lie-yi-ji-qi-xue-xi-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自作者: 片刻1998<br>GitHub地址:  <a href="https://github.com/apachecn/AiLearning">https://github.com/apachecn/AiLearning</a></p></blockquote><h2 id="机器学习-概述"><a href="#机器学习-概述" class="headerlink" title="机器学习 概述"></a>机器学习 概述</h2><p><code>机器学习(Machine Learning,ML)</code> 是使用计算机来彰显数据背后的真实含义，它为了把无序的数据转换成有用的信息。是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。<br>它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。</p><ol><li>海量的数据</li><li>获取有用的信息</li></ol><h2 id="机器学习-研究意义"><a href="#机器学习-研究意义" class="headerlink" title="机器学习 研究意义"></a>机器学习 研究意义</h2><p>机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习中改善具体算法的性能”。 “机器学习是对能通过经验自动改进的计算机算法的研究”。 “机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。” 一种经常引用的英文定义是: A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.</p><p>机器学习已经有了十分广泛的应用，例如: 数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人运用。</p><h2 id="机器学习-场景"><a href="#机器学习-场景" class="headerlink" title="机器学习 场景"></a>机器学习 场景</h2><ul><li><p>例如: 识别动物猫</p><ul><li>模式识别（官方标准）: 人们通过大量的经验，得到结论，从而判断它就是猫。</li><li>机器学习（数据学习）: 人们通过阅读进行学习，观察它会叫、小眼睛、两只耳朵、四条腿、一条尾巴，得到结论，从而判断它就是猫。</li><li>深度学习（深入数据）: 人们通过深入了解它，发现它会’喵喵’的叫、与同类的猫科动物很类似，得到结论，从而判断它就是猫。（深度学习常用领域: 语音识别、图像识别）</li></ul></li><li><p>模式识别（pattern recognition）: 模式识别是最古老的（作为一个术语而言，可以说是很过时的）。</p><ul><li>我们把环境与客体统称为“模式”，识别是对模式的一种认知，是如何让一个计算机程序去做一些看起来很“智能”的事情。</li><li>通过融于智慧和直觉后，通过构建程序，识别一些事物，而不是人，例如: 识别数字。</li></ul></li><li><p>机器学习（machine learning）: 机器学习是最基础的（当下初创公司和研究实验室的热点领域之一）。</p><ul><li>在90年代初，人们开始意识到一种可以更有效地构建模式识别算法的方法，那就是用数据（可以通过廉价劳动力采集获得）去替换专家（具有很多图像方面知识的人）。</li><li>“机器学习”强调的是，在给计算机程序（或者机器）输入一些数据后，它必须做一些事情，那就是学习这些数据，而这个学习的步骤是明确的。</li><li>机器学习（Machine Learning）是一门专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身性能的学科。</li></ul></li><li><p>深度学习（deep learning）: 深度学习是非常崭新和有影响力的前沿领域，我们甚至不会去思考-后深度学习时代。</p><ul><li>深度学习是机器学习研究中的一个新的领域，其动机在于建立、模拟人脑进行分析学习的神经网络，它模仿人脑的机制来解释数据，例如图像，声音和文本。</li></ul></li><li><p>参考地址:  </p><ul><li><a href="http://www.csdn.net/article/2015-03-24/2824301">深度学习 vs 机器学习 vs 模式识别</a></li><li><a href="http://baike.baidu.com/link?url=76P-uA4EBrC3G-I__P1tqeO7eoDS709Kp4wYuHxc7GNkz_xn0NxuAtEohbpey7LUa2zUQLJxvIKUx4bnrEfOmsWLKbDmvG1PCoRkJisMTQka6-QReTrIxdYY3v93f55q">深度学习 百科资料</a></li></ul></li></ul><blockquote><p>机器学习已应用于多个领域，远远超出大多数人的想象，横跨: 计算机科学、工程技术和统计学等多个学科。</p></blockquote><ul><li>搜索引擎: 根据你的搜索点击，优化你下次的搜索结果,是机器学习来帮助搜索引擎判断哪个结果更适合你（也判断哪个广告更适合你）。</li><li>垃圾邮件: 会自动的过滤垃圾广告邮件到垃圾箱内。</li><li>超市优惠券: 你会发现，你在购买小孩子尿布的时候，售货员会赠送你一张优惠券可以兑换6罐啤酒。</li><li>邮局邮寄: 手写软件自动识别寄送贺卡的地址。</li><li>申请贷款: 通过你最近的金融活动信息进行综合评定，决定你是否合格。</li></ul><h2 id="机器学习-组成"><a href="#机器学习-组成" class="headerlink" title="机器学习 组成"></a>机器学习 组成</h2><h3 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h3><ul><li>分类（classification）: 将实例数据划分到合适的类别中。<ul><li>应用实例: 判断网站是否被黑客入侵（二分类 ），手写数字的自动识别（多分类）</li></ul></li><li>回归（regression）: 主要用于预测数值型数据。<ul><li>应用实例: 股票价格波动的预测，房屋价格的预测等。</li></ul></li></ul><h3 id="监督学习（supervised-learning）"><a href="#监督学习（supervised-learning）" class="headerlink" title="监督学习（supervised learning）"></a>监督学习（supervised learning）</h3><ul><li>必须确定目标变量的值，以便机器学习算法可以发现特征和目标变量之间的关系。在监督学习中，给定一组数据，我们知道正确的输出结果应该是什么样子，并且知道在输入和输出之间有着一个特定的关系。 (包括: 分类和回归)</li><li>样本集: 训练数据 + 测试数据<ul><li>训练样本 = 特征(feature) + 目标变量(label: 分类-离散值/回归-连续值)</li><li>特征通常是训练样本集的列，它们是独立测量得到的。</li><li>目标变量: 目标变量是机器学习预测算法的测试结果。<ul><li>在分类算法中目标变量的类型通常是标称型(如: 真与假)，而在回归算法中通常是连续型(如: 1~100)。</li></ul></li></ul></li><li>监督学习需要注意的问题: <ul><li>偏置方差权衡</li><li>功能的复杂性和数量的训练数据</li><li>输入空间的维数</li><li>噪声中的输出值</li></ul></li><li><code>知识表示</code>: <ul><li>可以采用规则集的形式【例如: 数学成绩大于90分为优秀】</li><li>可以采用概率分布的形式【例如: 通过统计分布发现，90%的同学数学成绩，在70分以下，那么大于70分定为优秀】</li><li>可以使用训练样本集中的一个实例【例如: 通过样本集合，我们训练出一个模型实例，得出 年轻，数学成绩中高等，谈吐优雅，我们认为是优秀】</li></ul></li></ul><h3 id="非监督学习（unsupervised-learning）"><a href="#非监督学习（unsupervised-learning）" class="headerlink" title="非监督学习（unsupervised learning）"></a>非监督学习（unsupervised learning）</h3><ul><li>在机器学习，无监督学习的问题是，在未加标签的数据中，试图找到隐藏的结构。因为提供给学习者的实例是未标记的，因此没有错误或报酬信号来评估潜在的解决方案。</li><li>无监督学习是密切相关的统计数据密度估计的问题。然而无监督学习还包括寻求，总结和解释数据的主要特点等诸多技术。在无监督学习使用的许多方法是基于用于处理数据的数据挖掘方法。</li><li>数据没有类别信息，也不会给定目标值。</li><li>非监督学习包括的类型: <ul><li>聚类: 在无监督学习中，将数据集分成由类似的对象组成多个类的过程称为聚类。</li><li>密度估计: 通过样本分布的紧密程度，来估计与分组的相似性。</li><li>此外，无监督学习还可以减少数据特征的维度，以便我们可以使用二维或三维图形更加直观地展示数据信息。</li></ul></li></ul><h3 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h3><p>这个算法可以训练程序做出某一决定。程序在某一情况下尝试所有的可能行动，记录不同行动的结果并试着找出最好的一次尝试来做决定。 属于这一类算法的有马尔可夫决策过程。</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E8%AE%AD%E7%BB%83%E8%BF%87%E7%A8%8B.jpg" alt="机器学习训练过程图"></p><h3 id="算法汇总"><a href="#算法汇总" class="headerlink" title="算法汇总"></a>算法汇总</h3><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/ml_algorithm.jpg" alt="算法汇总"></p><h2 id="机器学习-使用"><a href="#机器学习-使用" class="headerlink" title="机器学习 使用"></a>机器学习 使用</h2><blockquote><p>选择算法需要考虑的两个问题</p></blockquote><ol><li>算法场景<ul><li>预测明天是否下雨，因为可以用历史的天气情况做预测，所以选择监督学习算法</li><li>给一群陌生的人进行分组，但是我们并没有这些人的类别信息，所以选择无监督学习算法、通过他们身高、体重等特征进行处理。</li></ul></li><li>需要收集或分析的数据是什么</li></ol><blockquote><p>举例</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80-%E9%80%89%E6%8B%A9%E7%AE%97%E6%B3%95.jpg" alt="选择算法图"></p><blockquote><p>机器学习 开发流程</p></blockquote><ol><li>收集数据: 收集样本数据</li><li>准备数据: 注意数据的格式</li><li>分析数据: 为了确保数据集中没有垃圾数据；<ul><li>如果是算法可以处理的数据格式或可信任的数据源，则可以跳过该步骤；</li><li>另外该步骤需要人工干预，会降低自动化系统的价值。</li></ul></li><li>训练算法: [机器学习算法核心]如果使用无监督学习算法，由于不存在目标变量值，则可以跳过该步骤</li><li>测试算法: [机器学习算法核心]评估算法效果</li><li>使用算法: 将机器学习算法转为应用程序</li></ol><h2 id="机器学习-数学基础"><a href="#机器学习-数学基础" class="headerlink" title="机器学习 数学基础"></a>机器学习 数学基础</h2><ul><li>微积分</li><li>统计学/概率论</li><li>线性代数</li></ul><h2 id="机器学习-工具"><a href="#机器学习-工具" class="headerlink" title="机器学习 工具"></a>机器学习 工具</h2><h3 id="Python语言"><a href="#Python语言" class="headerlink" title="Python语言"></a>Python语言</h3><ol><li>可执行伪代码</li><li>Python比较流行: 使用广泛、代码范例多、丰富模块库，开发周期短</li><li>Python语言的特色: 清晰简练、易于理解</li><li>Python语言的缺点: 唯一不足的是性能问题</li><li>Python相关的库<ul><li>科学函数库: <code>SciPy</code>、<code>NumPy</code>(底层语言: C和Fortran)</li><li>绘图工具库: <code>Matplotlib</code></li><li>数据分析库 <code>Pandas</code></li></ul></li></ol><h3 id="数学工具"><a href="#数学工具" class="headerlink" title="数学工具"></a>数学工具</h3><ul><li>Matlab</li></ul><h2 id="附-机器学习专业术语"><a href="#附-机器学习专业术语" class="headerlink" title="附: 机器学习专业术语"></a>附: 机器学习专业术语</h2><ul><li>模型（model）: 计算机层面的认知</li><li>学习算法（learning algorithm），从数据中产生模型的方法</li><li>数据集（data set）: 一组记录的合集</li><li>示例（instance）: 对于某个对象的描述</li><li>样本（sample）: 也叫示例</li><li>属性（attribute）: 对象的某方面表现或特征</li><li>特征（feature）: 同属性</li><li>属性值（attribute value）: 属性上的取值</li><li>属性空间（attribute space）: 属性张成的空间</li><li>样本空间/输入空间（samplespace）: 同属性空间</li><li>特征向量（feature vector）: 在属性空间里每个点对应一个坐标向量，把一个示例称作特征向量</li><li>维数（dimensionality）: 描述样本参数的个数（也就是空间是几维的）</li><li>学习（learning）/训练（training）: 从数据中学得模型</li><li>训练数据（training data）: 训练过程中用到的数据</li><li>训练样本（training sample）:训练用到的每个样本</li><li>训练集（training set）: 训练样本组成的集合</li><li>假设（hypothesis）: 学习模型对应了关于数据的某种潜在规则</li><li>真相（ground-truth）:真正存在的潜在规律</li><li>学习器（learner）: 模型的另一种叫法，把学习算法在给定数据和参数空间的实例化</li><li>预测（prediction）: 判断一个东西的属性</li><li>标记（label）: 关于示例的结果信息，比如我是一个“好人”。</li><li>样例（example）: 拥有标记的示例</li><li>标记空间/输出空间（label space）: 所有标记的集合</li><li>分类（classification）: 预测是离散值，比如把人分为好人和坏人之类的学习任务</li><li>回归（regression）: 预测值是连续值，比如你的好人程度达到了0.9，0.6之类的</li><li>二分类（binary classification）: 只涉及两个类别的分类任务</li><li>正类（positive class）: 二分类里的一个</li><li>反类（negative class）: 二分类里的另外一个</li><li>多分类（multi-class classification）: 涉及多个类别的分类</li><li>测试（testing）: 学习到模型之后对样本进行预测的过程</li><li>测试样本（testing sample）: 被预测的样本</li><li>聚类（clustering）: 把训练集中的对象分为若干组</li><li>簇（cluster）: 每一个组叫簇</li><li>监督学习（supervised learning）: 典范–分类和回归</li><li>无监督学习（unsupervised learning）: 典范–聚类</li><li>未见示例（unseen instance）: “新样本“，没训练过的样本</li><li>泛化（generalization）能力: 学得的模型适用于新样本的能力</li><li>分布（distribution）: 样本空间的全体样本服从的一种规律</li><li>独立同分布（independent and identically distributed，简称i,i,d.）:获得的每个样本都是独立地从这个分布上采样获得的。</li></ul><h2 id="机器学习基础补充"><a href="#机器学习基础补充" class="headerlink" title="机器学习基础补充"></a>机器学习基础补充</h2><h3 id="数据集的划分"><a href="#数据集的划分" class="headerlink" title="数据集的划分"></a>数据集的划分</h3><ul><li>训练集（Training set） —— 学习样本数据集，通过匹配一些参数来建立一个模型，主要用来训练模型。类比考研前做的解题大全。</li><li>验证集（validation set） —— 对学习出来的模型，调整模型的参数，如在神经网络中选择隐藏单元数。验证集还用来确定网络结构或者控制模型复杂程度的参数。类比 考研之前做的模拟考试。</li><li>测试集（Test set） —— 测试训练好的模型的分辨能力。类比 考研。这次真的是一考定终身。</li></ul><h3 id="模型拟合程度"><a href="#模型拟合程度" class="headerlink" title="模型拟合程度"></a>模型拟合程度</h3><ul><li>欠拟合（Underfitting）: 模型没有很好地捕捉到数据特征，不能够很好地拟合数据，对训练样本的一般性质尚未学好。类比，光看书不做题觉得自己什么都会了，上了考场才知道自己啥都不会。</li><li>过拟合（Overfitting）: 模型把训练样本学习“太好了”，可能把一些训练样本自身的特性当做了所有潜在样本都有的一般性质，导致泛化能力下降。类比，做课后题全都做对了，超纲题也都认为是考试必考题目，上了考场还是啥都不会。 </li></ul><p>通俗来说，欠拟合和过拟合都可以用一句话来说，欠拟合就是: “你太天真了！”，过拟合就是: “你想太多了！”。</p><h3 id="常见的模型指标"><a href="#常见的模型指标" class="headerlink" title="常见的模型指标"></a>常见的模型指标</h3><ul><li>正确率 —— 提取出的正确信息条数 / 提取出的信息条数</li><li>召回率 —— 提取出的正确信息条数 / 样本中的信息条数</li><li>F 值 —— 正确率 * 召回率 * 2 / （正确率 + 召回率）（F值即为正确率和召回率的调和平均值）</li></ul><p>举个例子如下: </p><p>举个例子如下:<br>某池塘有 1400 条鲤鱼，300 只虾，300 只乌龟。现在以捕鲤鱼为目的。撒了一张网，逮住了 700 条鲤鱼，200 只<br>虾， 100 只乌龟。那么这些指标分别如下:<br>正确率 = 700 / (700 + 200 + 100) = 70%<br>召回率 = 700 / 1400 = 50%<br>F 值 = 70% * 50% * 2 / (70% + 50%) = 58.3%</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><ul><li>分类问题 —— 说白了就是将一些未知类别的数据分到现在已知的类别中去。比如，根据你的一些信息，判断你是高富帅，还是穷屌丝。评判分类效果好坏的三个指标就是上面介绍的三个指标: 正确率，召回率，F值。</li><li>回归问题 —— 对数值型连续随机变量进行预测和建模的监督学习算法。回归往往会通过计算 误差（Error）来确定模型的精确性。</li><li>聚类问题 —— 聚类是一种无监督学习任务，该算法基于数据的内部结构寻找观察样本的自然族群（即集群）。聚类问题的标准一般基于距离: 簇内距离（Intra-cluster Distance） 和 簇间距离（Inter-cluster Distance） 。簇内距离是越小越好，也就是簇内的元素越相似越好；而簇间距离越大越好，也就是说簇间（不同簇）元素越不相同越好。一般的，衡量聚类问题会给出一个结合簇内距离和簇间距离的公式。</li></ul><p>下面这个图可以比较直观地展示出来: </p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/ml_add_2.jpg" alt=""></p><h3 id="特征工程的一些小东西"><a href="#特征工程的一些小东西" class="headerlink" title="特征工程的一些小东西"></a>特征工程的一些小东西</h3><ul><li><p>特征选择 —— 也叫特征子集选择（FSS，Feature Subset Selection）。是指从已有的 M 个特征（Feature）中选择 N 个特征使得系统的特定指标最优化，是从原始特征中选择出一些最有效特征以降低数据集维度的过程，是提高算法性能的一个重要手段，也是模式识别中关键的数据预处理步骤。</p></li><li><p>特征提取 —— 特征提取是计算机视觉和图像处理中的一个概念。它指的是使用计算机提取图像信息，决定每个图像的点是否属于一个图像特征。特征提取的结果是把图像上的点分为不同的子集，这些子集往往属于孤立的点，连续的曲线或者连续的区域。</p></li></ul><p>下面给出一个特征工程的图: </p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/ml_add_1.jpg" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>Learning rate —— 学习率，通俗地理解，可以理解为步长，步子大了，很容易错过最佳结果。就是本来目标尽在咫尺，可是因为我迈的步子很大，却一下子走过了。步子小了呢，就是同样的距离，我却要走很多很多步，这样导致训练的耗时费力还不讨好。</p></li><li><p>机器学习的数学基础 : <a href="https://zhuanlan.zhihu.com/p/25197792">https://zhuanlan.zhihu.com/p/25197792</a></p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客备份</title>
      <link href="/2020/06/28/hexo-bo-ke-bei-fen/"/>
      <url>/2020/06/28/hexo-bo-ke-bei-fen/</url>
      
        <content type="html"><![CDATA[<p><a href="https://dongzhougu.github.io/2020/06/27/shi-yong-hexo-da-jian-github-bo-ke/">上一篇文章</a>已经具体讲述了博客的搭建与基本使用，接下来记录博客的备份工作。</p><h4 id="初始备份"><a href="#初始备份" class="headerlink" title="初始备份"></a>初始备份</h4><ul><li><p>创建一个仓库用来存放备份文件，我的名字选择 <strong><a href="https://github.com/DongZhouGu/Blog-backup">Blog-backup</a></strong>，勾选README。</p></li><li><p>复制仓库地址，运行Git将仓库clone到本地。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:DongZhouGu/Blog-backup.git</span><br></pre></td></tr></tbody></table></figure></li><li><p>将要备份的文件放到我们刚才clone的文件夹里面。</p></li><li><p>在 clone 的文件夹下运行 Git，依次输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit  -m  <span class="string">"博客备份"</span>  （注：“backup”里面换成你需要，如“first commit”）</span><br><span class="line">git push -u origin master   （注：此操作目的是把本地仓库push到github上面，如果没有使用密钥此步骤需要你输入帐号和密码）</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="更新备份"><a href="#更新备份" class="headerlink" title="更新备份"></a>更新备份</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit  -m  <span class="string">"博客备份"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客优化加速</title>
      <link href="/2020/06/27/hexo-bo-ke-you-hua-jia-su/"/>
      <url>/2020/06/27/hexo-bo-ke-you-hua-jia-su/</url>
      
        <content type="html"><![CDATA[<p><a href="https://dongzhougu.github.io/2020/06/27/shi-yong-hexo-da-jian-github-bo-ke/">上一篇文章</a>已经具体讲述了博客的搭建与基本使用，接下来记录一下对博客的优化的工作，从<code>图片加载优化</code>和 <code>PicGo  图床</code>来介绍。</p><h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><h4 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h4><blockquote><p><code>预加载</code>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p></blockquote><p><a href="https://github.com/blinkfox/hexo-theme-matery">matery主题</a>  整体采用预加载模式，这样可以在我们访问其他页面的时候会稍微快点。我们可以在这个基础上对图片进行懒加载，这样做效果就是 html、css、js 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><ul><li><p>在 Blog 根目录执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></tbody></table></figure></li><li><p>在根目录下的 <code>_config.yml</code> 中添加对应配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  onlypost: <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  loadingImg: <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="设置插件"><a href="#设置插件" class="headerlink" title="设置插件"></a>设置插件</h4><ul><li><p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件,在第108行加上：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).find(<span class="string">'img[data-original]'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="built_in">this</span>).parent().attr(<span class="string">"href"</span>, $(<span class="built_in">this</span>).attr(<span class="string">"data-original"</span>));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></li><li><p>打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"brand-logo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%- url_for() %&gt;"</span> <span class="attr">class</span>=<span class="string">"waves-effect waves-light"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length &gt; 0) { %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%= theme.logo %&gt;"</span> <span class="attr">class</span>=<span class="string">"logo-img"</span> <span class="attr">alt</span>=<span class="string">"LOGO"</span>&gt;</span></span><br><span class="line">            &lt;% } %&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"logo-span"</span>&gt;</span>&lt;%- config.title %&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h4><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项，在 <code>loadingImg</code> 后配置图片的路径即可。</p><h3 id="使用PicGo图床"><a href="#使用PicGo图床" class="headerlink" title="使用PicGo图床"></a>使用PicGo图床</h3><p>PicGo 是一款开源的图床软件，该软件与iPic的不分伯仲，文档支持中文，支持插件开发。</p><h4 id="安装-PicGo"><a href="#安装-PicGo" class="headerlink" title="安装 PicGo"></a>安装 PicGo</h4><p>下载地址 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> ，选择下载与系统匹配的安装包，正常安装即可。</p><p>下载速度非常慢。。。备用地址：<a href="https://pan.baidu.com/s/1t3wookLIEE4NSXuaGABGPg">链接</a> 提取码：btzt</p><h4 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h4><p>创建一个用于存放图片的仓库，之后依次点击 <code>Setting</code> —— <code>Developer settings</code> —— <code>Personal access tokens</code>  创建一个token，并复制下来。</p><h4 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h4><p>下载完成后进行安装，安装完毕后开始配置，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1/20200628130208.png" alt=""></p><p><code>设定仓库名</code> 按照“账户名/仓库名的格式填写”，比如我的是：DongZhouGu/imageuse1</p><p><code>分支名</code>统一填写“master”。</p><p><code>设定Token</code>将之前的Token粘贴在这里。</p><p><code>指定存储路径</code>留空。</p><p><code>自定义域名</code>上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板上。默认留空也可以正常使用。这里为了使用CDN加快图片的访问速度，自定义域名我们按照这样去填写</p><blockquote><p><em><a href="https://cdn.jsdelivr.net/gh/GitHub用户名/仓库名">https://cdn.jsdelivr.net/gh/GitHub用户名/仓库名</a></em></p><p>我的是：<a href="https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1">https://cdn.jsdelivr.net/gh/dongzhougu/imageuse1</a></p></blockquote><p>之后就可以正常使用了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo搭建Github博客</title>
      <link href="/2020/06/27/shi-yong-hexo-da-jian-github-bo-ke/"/>
      <url>/2020/06/27/shi-yong-hexo-da-jian-github-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>以下为搭建本博客的教程<strong>(针对windows)</strong>，记录一下自己的过程，也方便想要建站的小伙伴快速上手。</p><blockquote><p><code>Github Pages:</code> 可以被认为是用户编写的、托管在 Github 上的静态网页。使用 Github Pages 可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><p><code>Hexo</code>: 一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p>下面从<strong>搭建前的准备工作</strong>，<strong>Github 部署</strong>，<strong>优化设置博客</strong>(使用  <code>matery</code>  主题)三方面详细介绍。</p><h3 id="1-搭建前的准备工作"><a href="#1-搭建前的准备工作" class="headerlink" title="1. 搭建前的准备工作"></a>1. 搭建前的准备工作</h3><h4 id="1-1-环境安装"><a href="#1-1-环境安装" class="headerlink" title="1.1 环境安装"></a>1.1 环境安装</h4><ul><li><p>安装  <a href="https://nodejs.org/en/">Node.js</a>（点击前往官网），请确保勾选  <strong>Add to PATH</strong>  选项（默认已勾选），这里可以参考 Hexo 的官方<a href="https://hexo.io/zh-cn/docs/">参考文档</a>。</p></li><li><p>安装<a href="https://git-scm.com/downloads">Git</a>(点击前往官网)，一路默认安装即可。</p></li><li><p>鼠标右键点击  <code>Git Bash Here</code> ,分别使用  <code>node -v</code>  和  <code>npm -v</code>  来验证安装，显示版本号则安装成功。</p></li></ul><h4 id="1-2-Hexo安装"><a href="#1-2-Hexo安装" class="headerlink" title="1.2 Hexo安装"></a>1.2 Hexo安装</h4><ul><li><p>新建一个存放博客的文件夹，比如  <code>E:\notebook\my_blog</code>，在此文件夹下右键点击  <code>Git Bash Here</code></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><p>安装完成后使用  <code>hexo -v</code>  检测是否安装成功</p></li><li><p>执行初始化并在本地查看效果</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></tbody></table></figure><p>完成后使用</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></tbody></table></figure><p>然后会出来一段 http 开头的网址，我们复制下来然后在浏览器打开，就可以看到初始化的 Hexo 的页面了。</p></li></ul><h3 id="2-Github部署"><a href="#2-Github部署" class="headerlink" title="2. Github部署"></a>2. Github部署</h3><ul><li><p><strong>创建一个仓库</strong>，名字必须是  <code>用户名.github.io</code>  ，然后勾选初始化 README。我第一次访问不了就是因为 github 竟然打错了，打错了，打错了…</p></li><li><p><strong>创建一个git秘钥</strong>，用来在这台电脑上通过 git 操作实现本地代码库与 Github 代码库同步</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your_email@youremail.com“</span><br></pre></td></tr></tbody></table></figure><p><code>your_email@youremail.com</code>  为你的 Github 邮箱地址，比如我的是  <code>gdz678@163.com</code></p><p>不管出现什么信息，只需要回车就可以了。接着，运行下面的命令将秘钥复制到剪切板</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>在 GitHub 账户中添加秘钥</strong>，进入 Github 的设置，点击  <code>Settings–SSH</code>  ——  <code>New SSH Key</code>，添加刚才复制的秘钥即可。</p></li><li><p><strong>测试</strong>，输入以下命令：注意：<code>git@github.com</code>不要做任何更改！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p>根据返回，输入 <code>yes</code> 会显示成功授权</p></li><li><p><strong>配置 Git 个人信息</strong>，Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"此处填你的用户名"</span>  </span><br><span class="line">$ git config --global user.email  <span class="string">"此处填你的邮箱"</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>将本地的 Hexo 文件更新到 Github 的库中</strong>，登录 Github 打开博客的项目，鼠标移到 <code>Clone or download</code> 按钮，选择 <code>Use SSH</code> 一键复制地址后，打开刚才创建的博客文件夹下的 <code>_config.yaml</code>文件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: 你复制的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>部署到 Github</strong>,首先安装  <code>deployer</code> </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>接着执行,博客就部署到 Github 上了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></tbody></table></figure><p>最后，你的博客地址：https://你的用户名.github.io，比如我的是：<a href="https://dongzhougu.github.io">https://dongzhougu.github.io</a> ,现在每个人都可以通过此链接访问我的博客！</p></li></ul><h3 id="3-优化设置博客"><a href="#3-优化设置博客" class="headerlink" title="3. 优化设置博客"></a>3. 优化设置博客</h3><h4 id="3-1-安装主题"><a href="#3-1-安装主题" class="headerlink" title="3.1 安装主题"></a>3.1 安装主题</h4><ul><li><p>安装 <a href="https://github.com/blinkfox/hexo-theme-matery">Metary</a> 主题。cd 到 Blog 目录下的 <code>Themes</code> 文件夹</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></tbody></table></figure></li><li><p>编辑站点配置文件 <code>_config.yml</code>,修改主题</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: hexo-theme-matery</span><br></pre></td></tr></tbody></table></figure></li></ul><blockquote><p><strong>主题的具体美化和设置可以<a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-19">参考这里</a>。</strong></p></blockquote><h4 id="3-2-安装插件"><a href="#3-2-安装插件" class="headerlink" title="3.2 安装插件"></a>3.2 安装插件</h4><p>cd到博客的根目录，分别运行以下，来安装插件</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save                 <span class="comment">#RSS</span></span><br><span class="line">npm install hexo-generator-search --save               <span class="comment">#搜索</span></span><br><span class="line">npm install hexo-prism-plugin --save                   <span class="comment">#代码高亮     </span></span><br><span class="line">npm install hexo-wordcount --save                      <span class="comment">#文章字数统计</span></span><br><span class="line">npm i hexo-permalink-pinyin --save</span><br><span class="line">npm install hexo-filter-github-emojis --save           <span class="comment">#添加emoji表情支持</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p><strong>RSS</strong> :  在根目录下的 <code>_config.yml</code> 中添加对应配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: <span class="string">' '</span></span><br><span class="line">  order_by: -date</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>搜索</strong> : 在根目录下的 <code>_config.yml</code> 中添加对应配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>代码高亮</strong> ： 修改根目录下 <code>_config.yml</code> 文件中  <code>highlight.enable</code> 的值为 <code>false</code> ，并新增以下配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">prism_plugin:</span><br><span class="line">  mode: <span class="string">'preprocess'</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  theme: <span class="string">'tomorrow'</span></span><br><span class="line">  line_number: <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  custom_css:</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>字数统计</strong>：在根目录下的 <code>_config.yml</code> 中添加对应配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">postInfo:</span><br><span class="line">  date: <span class="literal">true</span></span><br><span class="line">  update: <span class="literal">false</span></span><br><span class="line">  wordCount: <span class="literal">false</span>  <span class="comment"># 设置文章字数统计为 true.</span></span><br><span class="line">  totalCount: <span class="literal">false</span> <span class="comment"># 设置站点文章总字数统计为 true.</span></span><br><span class="line">  min2read: <span class="literal">false</span>   <span class="comment"># 阅读时长.</span></span><br><span class="line">  readCount: <span class="literal">false</span>  <span class="comment"># 阅读次数.</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>文章链接转静态短地址</strong>：在根目录下的 <code>_config.yml</code> 中添加对应配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">permalink_pinyin:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  separator: <span class="string">'-'</span> <span class="comment"># default: '-'</span></span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>添加emoji表情支持</strong>: 在根目录下的 <code>_config.yml</code> 中添加对应配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">githubEmojis:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  className: github-emoji</span><br><span class="line">  inject: <span class="literal">true</span></span><br><span class="line">  styles:</span><br><span class="line">  customEmojis:</span><br></pre></td></tr></tbody></table></figure></li></ul><ul><li><p><strong>评论系统</strong>： </p><ul><li>评论系统采用的是Valine，基于 <a href="https://www.leancloud.cn/">leancloud</a>。注册账号后完成认证，创建应用，名称随意，比如 blog，复制应用的 <code>APPID</code> 和 <code>APPKey</code> ，填入主题配置文件中的 Valine 配置中。</li></ul></li><li><p>需要在 <a href="https://www.leancloud.cn/">leancloud</a> 应用内的“存储”选项中创建<code>class</code>，名称为<code>Comment</code>，否则评论系统无法工作！</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># To use it, activate the configuration item and set appId and appKey.</span></span><br><span class="line"><span class="comment"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span></span><br><span class="line">valine:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  appId: *******</span><br><span class="line">  appKey: *******</span><br><span class="line">  notify: <span class="literal">false</span></span><br><span class="line">  verify: <span class="literal">false</span></span><br><span class="line">  visitor: <span class="literal">true</span></span><br><span class="line">  avatar: <span class="string">'mm'</span> <span class="comment"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span></span><br><span class="line">  pageSize: 10</span><br><span class="line">  placeholder: <span class="string">'快来交流吧'</span></span><br><span class="line">  background: /medias/comment_bg.png</span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="3-3-代码压缩"><a href="#3-3-代码压缩" class="headerlink" title="3.3 代码压缩"></a>3.3 代码压缩</h4><p>使用gulp来压缩网站的资源，包括js,html,css</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装gulp</span></span><br><span class="line">npm install gulp -g            </span><br><span class="line"><span class="comment"># 安装组件</span></span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></tbody></table></figure><p>在 Blog 根目录新建文件 <code>gulpfile.js</code> ，填入以下内容</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(<span class="string">"gulp"</span>);</span><br><span class="line">var debug = require(<span class="string">"gulp-debug"</span>);</span><br><span class="line">var cleancss = require(<span class="string">"gulp-clean-css"</span>); //css压缩组件</span><br><span class="line">var uglify = require(<span class="string">"gulp-uglify"</span>); //js压缩组件</span><br><span class="line">var htmlmin = require(<span class="string">"gulp-htmlmin"</span>); //html压缩组件</span><br><span class="line">var htmlclean = require(<span class="string">"gulp-htmlclean"</span>); //html清理组件</span><br><span class="line">var changed = require(<span class="string">"gulp-changed"</span>); //文件更改校验组件</span><br><span class="line">var gulpif = require(<span class="string">"gulp-if"</span>); //任务 帮助调用组件</span><br><span class="line">var plumber = require(<span class="string">"gulp-plumber"</span>); //容错组件（发生错误不跳出任务，并报出错误内容）</span><br><span class="line">var isScriptAll = <span class="literal">true</span>; //是否处理所有文件，(<span class="literal">true</span>|处理所有文件)(<span class="literal">false</span>|只处理有更改的文件)</span><br><span class="line">var isDebug = <span class="literal">true</span>; //是否调试显示 编译通过的文件</span><br><span class="line">var gulpBabel = require(<span class="string">"gulp-babel"</span>);</span><br><span class="line">var es2015Preset = require(<span class="string">"babel-preset-es2015"</span>);</span><br><span class="line">var del = require(<span class="string">"del"</span>);</span><br><span class="line">var Hexo = require(<span class="string">"hexo"</span>);</span><br><span class="line">var hexo = new Hexo(process.cwd(), {}); // 初始化一个hexo对象</span><br><span class="line"></span><br><span class="line">// hexo clean</span><br><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="title">function</span></span> () {</span><br><span class="line">    <span class="built_in">return</span> del([<span class="string">"public/**/*"</span>]);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">// hexo generate</span><br><span class="line">gulp.task(<span class="string">"generate"</span>, <span class="function"><span class="title">function</span></span> () {</span><br><span class="line">    <span class="built_in">return</span> hexo.init().<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span> () {</span><br><span class="line">        <span class="built_in">return</span> hexo</span><br><span class="line">            .call(<span class="string">"generate"</span>, {</span><br><span class="line">                watch: <span class="literal">false</span></span><br><span class="line">            })</span><br><span class="line">            .<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span> () {</span><br><span class="line">                <span class="built_in">return</span> hexo.exit();</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="keyword">function</span> (err) {</span><br><span class="line">                <span class="built_in">return</span> hexo.exit(err);</span><br><span class="line">            });</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">// Hexo s</span><br><span class="line">gulp.task(<span class="string">"server"</span>, <span class="function"><span class="title">function</span></span> () {</span><br><span class="line">    <span class="built_in">return</span> hexo</span><br><span class="line">        .init()</span><br><span class="line">        .<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span> () {</span><br><span class="line">            <span class="built_in">return</span> hexo.call(<span class="string">"server"</span>, {});</span><br><span class="line">        })</span><br><span class="line">        .catch(<span class="keyword">function</span> (err) {</span><br><span class="line">            console.log(err);</span><br><span class="line">        });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">// 压缩public目录下的js文件</span><br><span class="line">gulp.task(<span class="string">"compressJs"</span>, <span class="function"><span class="title">function</span></span> () {</span><br><span class="line">    <span class="built_in">return</span> gulp</span><br><span class="line">        .src([<span class="string">"./public/**/*.js"</span>, <span class="string">"!./public/libs/**"</span>]) //排除的js</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ title: <span class="string">"Compress JS:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(</span><br><span class="line">            gulpBabel({</span><br><span class="line">                presets: [es2015Preset] // es5检查机制</span><br><span class="line">            })</span><br><span class="line">        )</span><br><span class="line">        .pipe(uglify()) //调用压缩组件方法uglify(),对合并的文件进行压缩</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>)); //输出到目标目录</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">// 压缩public目录下的css文件</span><br><span class="line">gulp.task(<span class="string">"compressCss"</span>, <span class="function"><span class="title">function</span></span> () {</span><br><span class="line">    var option = {</span><br><span class="line">        rebase: <span class="literal">false</span>,</span><br><span class="line">        //advanced: <span class="literal">true</span>, //类型：Boolean 默认：<span class="literal">true</span> [是否开启高级优化（合并选择器等）]</span><br><span class="line">        compatibility: <span class="string">"ie7"</span> //保留ie7及以下兼容写法 类型：String 默认：<span class="string">''</span>or<span class="string">'*'</span> [启用兼容模式； <span class="string">'ie7'</span>：IE7兼容模式，<span class="string">'ie8'</span>：IE8兼容模式，<span class="string">'*'</span>：IE9+兼容模式]</span><br><span class="line">        //keepBreaks: <span class="literal">true</span>, //类型：Boolean 默认：<span class="literal">false</span> [是否保留换行]</span><br><span class="line">        //keepSpecialComments: <span class="string">'*'</span> //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span><br><span class="line">    };</span><br><span class="line">    <span class="built_in">return</span> gulp</span><br><span class="line">        .src([<span class="string">"./public/**/*.css"</span>, <span class="string">"!./public/**/*.min.css"</span>]) //排除的css</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ title: <span class="string">"Compress CSS:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">// 压缩public目录下的html文件</span><br><span class="line">gulp.task(<span class="string">"compressHtml"</span>, <span class="function"><span class="title">function</span></span> () {</span><br><span class="line">    var cleanOptions = {</span><br><span class="line">        protect: /&lt;\!--%fooTemplate\b.*?%--&gt;/g, //忽略处理</span><br><span class="line">        unprotect: /&lt;script [^&gt;]*\btype=<span class="string">"text\/x-handlebars-template"</span>[\s\S]+?&lt;\/script&gt;/gi //特殊处理</span><br><span class="line">    };</span><br><span class="line">    var minOption = {</span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>, //压缩HTML</span><br><span class="line">        collapseBooleanAttributes: <span class="literal">true</span>, //省略布尔属性的值 &lt;input checked=<span class="string">"true"</span>/&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">        removeEmptyAttributes: <span class="literal">true</span>, //删除所有空格作属性值 &lt;input id=<span class="string">""</span> /&gt; ==&gt; &lt;input /&gt;</span><br><span class="line">        removeScriptTypeAttributes: <span class="literal">true</span>, //删除&lt;script&gt;的<span class="built_in">type</span>=<span class="string">"text/javascript"</span></span><br><span class="line">        removeStyleLinkTypeAttributes: <span class="literal">true</span>, //删除&lt;style&gt;和&lt;link&gt;的<span class="built_in">type</span>=<span class="string">"text/css"</span></span><br><span class="line">        removeComments: <span class="literal">true</span>, //清除HTML注释</span><br><span class="line">        minifyJS: <span class="literal">true</span>, //压缩页面JS</span><br><span class="line">        minifyCSS: <span class="literal">true</span>, //压缩页面CSS</span><br><span class="line">        minifyURLs: <span class="literal">true</span> //替换页面URL</span><br><span class="line">    };</span><br><span class="line">    <span class="built_in">return</span> gulp</span><br><span class="line">        .src(<span class="string">"./public/**/*.html"</span>)</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ title: <span class="string">"Compress HTML:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line">// 默认任务</span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">"default"</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">"clean"</span>,</span><br><span class="line">        <span class="string">"generate"</span>,</span><br><span class="line">        gulp.parallel(<span class="string">"compressHtml"</span>, <span class="string">"compressCss"</span>, <span class="string">"compressJs"</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>根目录下执行 <code>gulp</code> 就相当于<code>hexo clean &amp;&amp; hexo g</code>，再把代码压缩。</p><p>再使用 <code>hexo d</code>即可部署到 Github</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
